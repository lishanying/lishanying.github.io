<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[STATIC的作用]]></title>
      <url>http://lishangying.github.io/2018/01/12/STATIC%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="1-隐藏"><a href="#1-隐藏" class="headerlink" title="1.隐藏"></a>1.隐藏</h4><p>当同时编译多个文件时：<br>static的只在本文件中有效；<br>所有未加static前缀的全局变量和函数都具有全局可见性；</p>
<pre><code class="cpp"><span class="comment">//file_1: a.c</span>
<span class="keyword">char</span> a = <span class="string">'A'</span>;               <span class="comment">// global variable</span>
<span class="function"><span class="keyword">void</span> <span class="title">msg</span><span class="params">()</span></span>
<span class="function"></span>{
     <span class="built_in">printf</span>(<span class="string">"Hello\n"</span>);
}

<span class="comment">//file_2: main.c</span>
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>
<span class="function"></span>{
     <span class="keyword">extern</span> <span class="keyword">char</span> a;       <span class="comment">// extern variable must be declared before use</span>
     <span class="built_in">printf</span>(<span class="string">"%c "</span>, a);
     (<span class="keyword">void</span>)msg();
     <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
<p>为什么在a.c中定义的全局变量a和函数msg能在main.c中使用？前面说过，所有未加static前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问。此例中，a是全局变量，msg是函数，并且都没有加static前缀，因此对于另外的源文件main.c是可见的。<br>如果加了static，就会对其它源文件隐藏。例如在a和msg的定义前加上static，main.c就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。static可以用作函数和变量的前缀，对于函数来讲，static的作用仅限于隐藏.</p>
<h4 id="2-持久"><a href="#2-持久" class="headerlink" title="2. 持久"></a>2. 持久</h4><p>存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。共有两种变量存储在静态存储区：全局变量和static变量，只不过和全局变量比起来，static可以控制变量的可见范围，说到底static还是用来隐藏的。虽然这种用法不常见</p>
<p>PS：如果作为static局部变量在函数内定义，它的生存期为整个源程序，但是其作用域仍与自动变量相同，只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在，但不能使用它。</p>
<pre><code class="cpp">＃include &lt;stdio.h&gt;

<span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span>{
    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">10</span>;       <span class="comment">//在第一次进入这个函数的时候，变量a被初始化为10！并接着自减1，以后每次进入该函数</span>
    <span class="keyword">return</span> count--;              <span class="comment">//就不会被再次初始化了，仅进行自减1的操作；在static发明前，要达到同样的功能，则只能使用全局变量：    </span>

}

<span class="keyword">int</span> count = <span class="number">1</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>
<span class="function"></span>{
     <span class="built_in">printf</span>(<span class="string">"global\t\tlocal static\n"</span>);
     <span class="keyword">for</span>(; count &lt;= <span class="number">10</span>; ++count)
               <span class="built_in">printf</span>(<span class="string">"%d\t\t%d\n"</span>, count, fun());
     <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
<blockquote>
<p>输出结果：<br>1 10<br> 2 9<br> 3 8<br> 4 7<br> 5 6<br> 7 4<br> 8 3<br> 9 2<br> 10 1</p>
</blockquote>
<h4 id="3-默认初始化为0"><a href="#3-默认初始化为0" class="headerlink" title="3. 默认初始化为0"></a>3. 默认初始化为0</h4><p>其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。比如初始化一个稀疏矩阵，我们可以一个一个地把所有元素都置0，然后把不是0的几个元素赋值。如果定义成静态的，就省去了一开始置0的操作。再比如要把一个字符数组当字符串来用，但又觉得每次在字符数组末尾加‘\0’;太麻烦。如果把字符串定义成静态的，就省去了这个麻烦，因为那里本来就是‘\0’;不妨做个小实验验证一下。</p>
<pre><code class="cpp">＃include &lt;stdio.h&gt;

<span class="keyword">int</span> a;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>
<span class="function"></span>{
     <span class="keyword">int</span> i;
     <span class="keyword">static</span> <span class="keyword">char</span> str[<span class="number">10</span>];
     <span class="built_in">printf</span>(<span class="string">"integer: %d; string: (begin)%s(end)"</span>, a, str);
     <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
<blockquote>
<p> 输出结果：<br> integer: 0; string: (begin) (end)</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全局/静态/局部变量的前世今生]]></title>
      <url>http://lishangying.github.io/2018/01/12/%E5%85%A8%E5%B1%80_%E9%9D%99%E6%80%81_%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 描述一个人的生平，大底这么形容：哪儿的人，咋出生的，活了多久，行的多远。变量也是如此：内存分布，初始化，生命周期，作用域。</p>
<h4 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1.全局变量"></a>1.全局变量</h4><ol>
<li><strong>内存分布：</strong>全局数据区</li>
<li><strong>初始化：</strong>默认初始化</li>
<li><strong>生命周期：</strong>程序运行期一直存在</li>
<li><strong>作用域：</strong>全局作用域（全局变量只需在一个源文件中定义，就可以作用于所有的源文件。）其他文件中要使用必须用extern 关键字声明要引用的全局变量。</li>
<li><strong>注意：</strong>如果在两个文件中都定义了相同名字的全局变量，连接出错：变量重定义</li>
</ol>
</blockquote>
<pre><code class="cpp">
</code></pre>
<h4 id="2-静态变量"><a href="#2-静态变量" class="headerlink" title="2. 静态变量"></a>2. 静态变量</h4><ol>
<li><strong>内存分布：</strong>全局数据区</li>
<li><strong>初始化：</strong>只初始化一次，默认初始化</li>
<li><strong>生命周期：</strong>程序运行期一直存在</li>
<li><strong>作用域：</strong>只在本文件中！！！只要文件不互相包含，在两个不同的文件中是可以定义完全相同的两个静态变量的，它们是两个完全不同的变量</li>
<li><strong>*注意：</strong>static关键字，const 关键字</li>
</ol>
<pre><code class="cpp">
</code></pre>
<h4 id="3-静态局部变量"><a href="#3-静态局部变量" class="headerlink" title="3. 静态局部变量"></a>3. 静态局部变量</h4><ol>
<li><strong>内存分布：</strong>全局数据区</li>
<li><strong>初始化：</strong>只初始化一次，默认初始化</li>
<li><strong>生命周期：</strong>程序运行期一直存在</li>
<li><strong>作用域：</strong>函数（作用域）</li>
</ol>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  

<span class="keyword">int</span> cnt=<span class="number">1</span>;  

<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>{  
    <span class="keyword">static</span> <span class="keyword">int</span> test = cnt;  
    <span class="built_in">cout</span>&lt;&lt;test&lt;&lt;<span class="built_in">endl</span>;  
    cnt++;  
}  

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{  
    f();  
    f();  
    f();  
    <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;  
    <span class="keyword">return</span> <span class="number">0</span>;  
}
</code></pre>
<blockquote>
<p> 输出结果：<br> 1<br> 1<br> 1<br> 4</p>
</blockquote>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  

<span class="keyword">int</span> cnt=<span class="number">1</span>;  

<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>{  
    <span class="keyword">static</span> <span class="keyword">int</span> test;  
    test = cnt;  
    <span class="built_in">cout</span>&lt;&lt;test&lt;&lt;<span class="built_in">endl</span>;  
    cnt++;  
}  

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{  
    f();  
    f();  
    f();  
    <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;  
    <span class="keyword">return</span> <span class="number">0</span>;  
}
</code></pre>
<blockquote>
<p> 输出结果：<br> 1<br> 2<br> 3<br> 4</p>
</blockquote>
<h4 id="4-局部变量"><a href="#4-局部变量" class="headerlink" title="4. 局部变量"></a>4. 局部变量</h4><ol>
<li><strong>内存分布：</strong>栈</li>
<li><strong>初始化：</strong>必须初始化！！！</li>
<li><strong>生命周期：</strong>函数（作用域）结束时</li>
<li><strong>作用域：</strong>函数（作用域）内</li>
</ol>
<pre><code class="cpp">
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数作为参数传递]]></title>
      <url>http://lishangying.github.io/2018/01/10/%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
      <content type="html"><![CDATA[<h4 id="1-普通函数"><a href="#1-普通函数" class="headerlink" title="1.普通函数"></a>1.普通函数</h4><p><strong>体现</strong>：<strong><em>一个函数作为另外一个函数的参数，进行函数传递，当然可以通过这种形式进行函数重载。</em></strong></p>
<h5 id="方式1：函数类型"><a href="#方式1：函数类型" class="headerlink" title="方式1：函数类型"></a><strong>方式1：</strong>函数类型</h5><p>将函数作为基本类型，形如int a，int 是类型，a是形参；int f(int, int )，int (int ，int)是类型，f是形参；<br>缺点：该种类型的写法太繁琐</p>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{
    <span class="keyword">return</span> a+b;
}

int F(int f(int,int),int a,int b){
    <span class="keyword">return</span> f(a,b);
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="built_in">cout</span>&lt;&lt;F(add,<span class="number">1</span>,<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//3</span>
}
</code></pre>
<h5 id="方式2：函数指针"><a href="#方式2：函数指针" class="headerlink" title="方式2：函数指针"></a><strong>方式2：</strong>函数指针</h5><p>用typedefine重新定义一种指针，该指针指向类型为int (int ,int)的函数。形参为p<br>注意，函数指针 = 函数名，所以，执行函数的时候，不用解指针！！！</p>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*pf)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">//</span>

<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{
    <span class="keyword">return</span> a+b;
}

<span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(pf p,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{<span class="comment">//</span>
    <span class="keyword">return</span> p(a,b);<span class="comment">//</span>
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="built_in">cout</span>&lt;&lt;F(add,<span class="number">1</span>,<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//3</span>
}
</code></pre>
<h5 id="方式3：定义新类型"><a href="#方式3：定义新类型" class="headerlink" title="方式3：定义新类型"></a><strong>方式3：</strong>定义新类型</h5><p>用typedefine重新定义一种新类型</p>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="function"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="title">FuncType</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">//定义了FuncType这种函数数据类型</span>

<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{
    <span class="keyword">return</span> a+b;
}

<span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(FuncType tf,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="comment">//</span>
    <span class="keyword">return</span> tf(a,b);<span class="comment">//</span>
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="built_in">cout</span>&lt;&lt;F(add,<span class="number">1</span>,<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//3</span>
}
</code></pre>
<h5 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h5><p>这里运用函数传递实现函数的重载</p>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;


<span class="comment">//三种比较方式</span>
<span class="function"><span class="keyword">int</span> <span class="title">CmpAsc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  </span>
<span class="function"></span>{  
    <span class="comment">//如果x&gt;y返回1，否则返回0；  </span>
    <span class="keyword">if</span>(x&gt;y)<span class="keyword">return</span> <span class="number">1</span>;  
    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;  
}  

<span class="function"><span class="keyword">int</span> <span class="title">CmpDec</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  </span>
<span class="function"></span>{  
    <span class="comment">//如果x&lt;y返回1，否则返回0；  </span>
    <span class="keyword">if</span>(x&lt;y)<span class="keyword">return</span> <span class="number">1</span>;  
    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;  
}  

<span class="function"><span class="keyword">int</span> <span class="title">CmpAbsAsc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  </span>
<span class="function"></span>{
    <span class="comment">//如果abs(x)&gt;abs(y)返回1，否则返回0  </span>
    <span class="keyword">if</span>(<span class="built_in">abs</span>(x)&gt;<span class="built_in">abs</span>(y))<span class="keyword">return</span> <span class="number">1</span>;  
    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;  
}  

<span class="comment">//排序</span>
void sort(int a[], int n, int (*cmp)(int,int))  
{   
    <span class="comment">/*对数组a排序，排序原则由cmp指定，若cmp为真，表示两元素逆序*/</span>  
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)  
        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)  
            <span class="keyword">if</span>(cmp(a[i],a[j]))  
                swap(a[i],a[j]);  
}  


<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span>
<span class="function"></span>{  
    <span class="keyword">int</span> a[<span class="number">10</span>],i,n;   
    <span class="keyword">int</span> slt;  
    <span class="comment">/*读入n和n个整数，存入数组a*/</span>  
    <span class="built_in">cin</span>&gt;&gt;n;  
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)  
        <span class="built_in">cin</span>&gt;&gt;a[i];  
    <span class="comment">/*读入用户的选择，存入slt; */</span>  

    <span class="built_in">cin</span>&gt;&gt;slt;  
    <span class="keyword">switch</span>(slt)  
    {  
    <span class="keyword">case</span> <span class="number">1</span>:   sort(a, n, CmpAsc); <span class="keyword">break</span>;  
    <span class="keyword">case</span> <span class="number">2</span>:   sort(a, n, CmpDec); <span class="keyword">break</span>;  
    <span class="keyword">case</span> <span class="number">3</span>:   sort(a, n, CmpAbsAsc);<span class="keyword">break</span>;  
    }  
    <span class="comment">/*输出排序后的数组*/</span>  
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)  
    {  
        <span class="keyword">if</span>(i==<span class="number">0</span>)  
            <span class="built_in">cout</span>&lt;&lt;a[i];  
        <span class="keyword">else</span>  
            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;a[i];  
    }  
    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  
    <span class="keyword">return</span> <span class="number">0</span>;  
}
</code></pre>
<h4 id="2-类成员函数"><a href="#2-类成员函数" class="headerlink" title="2. 类成员函数"></a>2. 类成员函数</h4><p>传递普通函数和类的成员函数方式不同：<br>普通函数传的就是函数的实际地址；<br>成员函数在类的内部中没有地址，只能传递在类中的偏移量；<br>当然，可以将成员函数设置为静态函数（static）来当作普通函数来看待。</p>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
<span class="class"><span class="keyword">class</span> <span class="title">ABC</span> {</span>
    <span class="keyword">public</span>:
        <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> b)</span></span>;
        <span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> n)</span></span>;
};

<span class="keyword">void</span> ABC::f1(<span class="keyword">int</span> n, <span class="keyword">int</span> b) {
    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">","</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;
}

<span class="keyword">void</span> ABC::f2(<span class="keyword">int</span> n) {
    <span class="built_in">cout</span> &lt;&lt; <span class="string">"member function:"</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;
}

<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{
     <span class="built_in">cout</span> &lt;&lt; <span class="string">"normal function: "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;
}

<span class="comment">// member function</span>
<span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>
<span class="class"><span class="title">void</span> <span class="title">cb</span>(<span class="title">T</span> *<span class="title">obj</span>, <span class="title">void</span> (<span class="title">T</span>:</span>:*callback)(<span class="keyword">int</span>), <span class="keyword">int</span> n) {
     (obj-&gt;*callback)(n);
}
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>{
    ABC *abc = <span class="keyword">new</span> ABC();
    abc-&gt;f1(<span class="number">1</span>, <span class="number">2</span>);
    abc-&gt;f2(<span class="number">3</span>);

    <span class="comment">// invoke normal function</span>
    cb(f, <span class="number">5</span>);

    system(<span class="string">"pause"</span>);
    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命名的强制类型转换]]></title>
      <url>http://lishangying.github.io/2018/01/01/%E5%91%BD%E5%90%8D%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h4 id="1-常见的命名强制类型转换"><a href="#1-常见的命名强制类型转换" class="headerlink" title="1.常见的命名强制类型转换"></a>1.常见的命名强制类型转换</h4><blockquote>
<p>通用表达式：<strong><em>cast_name<type>(expression)</type></em></strong></p>
</blockquote>
<h5 id="1-1-static-cast"><a href="#1-1-static-cast" class="headerlink" title="1.1 static_cast"></a>1.1 static_cast</h5><pre><code class="cpp">
</code></pre>
<h5 id="1-2-dynamic-cast"><a href="#1-2-dynamic-cast" class="headerlink" title="1.2 dynamic_cast"></a>1.2 dynamic_cast</h5><pre><code class="cpp">
</code></pre>
<h5 id="1-3-const-cast"><a href="#1-3-const-cast" class="headerlink" title="1.3 const_cast"></a>1.3 const_cast</h5><pre><code class="cpp">
</code></pre>
<h5 id="1-4-reinterret-cast"><a href="#1-4-reinterret-cast" class="headerlink" title="1.4 reinterret_cast"></a>1.4 reinterret_cast</h5><pre><code class="cpp">
</code></pre>
<h4 id="2-警告"><a href="#2-警告" class="headerlink" title="2.警告"></a>2.警告</h4><blockquote>
<p>强制类型转换干扰了正常的类型检查，强烈建议不到万不得已不要用！！！</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[控制语句]]></title>
      <url>http://lishangying.github.io/2018/01/01/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<h4 id="1-switch中case最好加"><a href="#1-switch中case最好加" class="headerlink" title="1.switch中case最好加{}"></a>1.switch中case最好加{}</h4><p><strong>目的</strong>：<strong><em>防止跨过变量的初始化语句（包括隐式和显示）直接跳转到该变量作用于内的另一个位置。</em></strong></p>
<p>case加{}：在该case中定义的变量，有效范围为该case；<br>case不加{}：在该case中定义的变量，有效范围是switch；</p>
<p><strong>错误案例：</strong></p>
<pre><code class="cpp"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//假设控制流绕过了该case</span>
    <span class="built_in">string</span> file_name;<span class="comment">//错误：控制流绕过一个隐式的初始化变量</span>
    <span class="keyword">int</span> ival = <span class="number">0</span>;    <span class="comment">//错误：控制流绕过一个显示的初始化变量</span>
    <span class="keyword">int</span> jval;        <span class="comment">//正确：该变量没有初始化</span>
    <span class="keyword">break</span>;
<span class="keyword">case</span> <span class="number">2</span>:
    jval = next_num();      <span class="comment">//正确：给jval赋一个值</span>
    <span class="keyword">if</span>(file_name.empty()){} <span class="comment">//file_name在作用于中，但是没有初始化</span>
    <span class="keyword">break</span>;
</code></pre>
<p>假设上述代码合法，则一旦控制流直接跳到分支2，也就同时略过了变量file_name和ival的初始化过程。<br>此时这两个变量为作用于之内，跟在分支2中的代码试图在尚未初始化的情况下使用他们，这显然是行不通的。</p>
<p><strong>解决方案：</strong>如果某个case要定义并初始化一个变量，我们应该保证该变量在块内，防止其他case引用该变量。注意break在{}之外！</p>
<p><strong>正确案例：</strong></p>
<pre><code class="cpp"><span class="keyword">case</span> <span class="number">1</span>:
    {
        <span class="built_in">string</span> file_name = get_file_name();
    }
    <span class="keyword">break</span>;<span class="comment">//注意break在{}之外！！！！！！！！</span>
<span class="keyword">case</span> <span class="number">2</span>：
    <span class="keyword">if</span>(file_name.empty()){}<span class="comment">//错误：file_name不在作用于之内</span>
</code></pre>
<h4 id="2-范围for语句"><a href="#2-范围for语句" class="headerlink" title="2. 范围for语句"></a>2. 范围for语句</h4><p><strong>形式</strong>：<strong><em>for (declaration : expression) { statement}</em></strong></p>
<p><strong>注意事项</strong>：</p>
<ul>
<li>expression必须是一个序列：数组、vector或者string等包含begin()和end()的</li>
<li>每次迭代都会重新定义一个循环控制变量</li>
<li>范围for中预存了end()，一旦序列中添加（删除）元素，end()函数可能就变得无效</li>
</ul>
<pre><code class="cpp"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = {<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};
<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;r : v){<span class="comment">//这里循环变量用的是引用，只有这样才能对元素执行修改操作</span>
    r += <span class="number">2</span>;
}
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表达式注意点]]></title>
      <url>http://lishangying.github.io/2018/01/01/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h4 id="1-运算符的运算顺序"><a href="#1-运算符的运算顺序" class="headerlink" title="1.运算符的运算顺序"></a>1.运算符的运算顺序</h4><h5 id="1-1-有运算顺序"><a href="#1-1-有运算顺序" class="headerlink" title="1.1 有运算顺序"></a>1.1 有运算顺序</h5><p><strong>只有4种：</strong> <strong><em>逻辑与、逻辑或、条件运算符、逗号运算符</em></strong><br>因此，这四种运算符的运算表达式多复杂，均按照指定的顺序，依次执行每个位置的表达式。</p>
<h5 id="1-2-无运算顺序的"><a href="#1-2-无运算顺序的" class="headerlink" title="1.2 无运算顺序的"></a>1.2 无运算顺序的</h5><p><strong>实际情况：</strong>求值按顺序（优先级、结合律），但是<strong><em>求因子没顺序</em></strong>！！！<br><strong>存在问题：</strong>同一个对象参与多个因子的求取，没法保证该对象的纯洁性<br><strong>解决方案：</strong>加括号<br><strong>例子：</strong></p>
<pre><code class="cpp"><span class="keyword">int</span> a = <span class="number">0</span>;
<span class="keyword">int</span> *p = &amp;a;

<span class="keyword">int</span> b = f(p)+g(p)*h(p);
</code></pre>
<p>上述例子：可以转化为int b = A+B<em>C；A=f(p)；B=g(p)；C=h(p)；<br>实际情况：A+B</em>C严格按照结合律和优先级运算；但是ABC的求取过程没有顺序，即函数fgh的执行顺序不固定<br>存在问题：因为fgh三个对同一个对象p执行了操作，没法保证原本的假设；<br>解决方案：严格加括号，比如：int b = f(p)+（（g(p)）*h(p)）;这样计算顺序就变成了：ghf了</p>
<h4 id="2-相等性测试与布尔字面值"><a href="#2-相等性测试与布尔字面值" class="headerlink" title="2.相等性测试与布尔字面值"></a>2.相等性测试与布尔字面值</h4><p><strong>箴言</strong>：<strong><em>除非比较的对象是布尔对象，否则不要用布尔字面值true和false作为比较对象</em></strong><br><strong>原因</strong>：bool与int参与运算，会提升为int<br><strong>推荐</strong>：使用第一种例子<br><strong>例子一：</strong>推荐</p>
<pre><code class="cpp"><span class="keyword">if</span>(val){}
<span class="keyword">if</span>(!cal){}
</code></pre>
<p><strong>例子二：</strong>摒弃</p>
<pre><code class="cpp"><span class="keyword">if</span>(<span class="literal">true</span> == val){}
</code></pre>
<p><strong>例子三：</strong></p>
<pre><code class="cpp"><span class="keyword">if</span>(<span class="number">1</span> == val){}
</code></pre>
<p>第二种与第三种实际上是一样的，所以只有当val=1的时候，例子23才会成立，尽管val=2也不会成立<br><strong>注意：</strong><br>当然，如果项目组中宏定义了：#define TRUE (1 )，是可以使用的，这里说的不能参与比较的是c++自带的true（这里true=1,2,3,,,）</p>
<h4 id="3-i优于i"><a href="#3-i优于i" class="headerlink" title="3. ++i优于i++"></a>3. ++i优于i++</h4><p><strong>原因</strong>：<br>++i：加1；返回结果值；保存加1值；<br>i++：保存原值；加1；返回结果值；保存加1值；<br>由此可见：如果我们不需要修改前的值，那么后置版本的操作就是一种浪费。</p>
<p>对于整型和指针类型来说，编译器会对这种额外工作进行优化；但是对于相对复杂的迭代器类型，这种额外的工作就消耗巨大了。</p>
<h4 id="4-运算对象可按任意顺序求值"><a href="#4-运算对象可按任意顺序求值" class="headerlink" title="4. 运算对象可按任意顺序求值"></a>4. 运算对象可按任意顺序求值</h4><p><strong>常见错误案例：</strong>将所有字符变为大写</p>
<pre><code class="cpp"><span class="keyword">while</span> (beg != s.end() &amp;&amp; !<span class="built_in">isspace</span>(*beg)){
    *beg = <span class="built_in">toupper</span>(*beg++);<span class="comment">//错误：该赋值语句未定义</span>
}
</code></pre>
<p>存在问题：赋值运算符左右两端的运算对象都用到了beg，并且右侧的对象还改变了beg的值，所以该赋值语句是未定义的。<br><strong>正确案例：</strong>把解引用和递增分为两项任务来完成</p>
<pre><code class="cpp"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.begin(); it != s.end() &amp;&amp; !<span class="built_in">isspace</span>(*it); ++it){
    *it = <span class="built_in">toupper</span>(*it);
}
</code></pre>
<h4 id="5-成员访问运算符"><a href="#5-成员访问运算符" class="headerlink" title="5. 成员访问运算符"></a>5. 成员访问运算符</h4><p><strong>ptr-&gt;mem 等价于 (*ptr).mem</strong></p>
<pre><code class="cpp"><span class="built_in">string</span> s1 = <span class="string">"a string"</span>;
<span class="built_in">string</span> *p = &amp;s1;
n = (*p).size();
n = p-&gt;size();
</code></pre>
<h4 id="6-条件运算符最好加括号"><a href="#6-条件运算符最好加括号" class="headerlink" title="6. 条件运算符最好加括号"></a>6. 条件运算符最好加括号</h4><p><strong>A？ B:C最好改成 （（A）?B:C）</strong><br><strong>原因：</strong>选择运算符的优先级比较低，如果不加括号的话，有可能被周边的运算符肢解！！！</p>
<pre><code class="cpp"><span class="built_in">cout</span> &lt;&lt; ((grade &lt; <span class="number">60</span>)? <span class="string">"fail"</span> : <span class="string">"pass"</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出pass或者fail</span>
<span class="built_in">cout</span> &lt;&lt; (grade &lt; <span class="number">60</span>)? <span class="string">"fail"</span> : <span class="string">"pass"</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出1或者0</span>
<span class="built_in">cout</span> &lt;&lt; grade &lt; <span class="number">60</span>? <span class="string">"fail"</span> : <span class="string">"pass"</span> &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//错误：试图比较cout和grade&lt;60</span>
</code></pre>
<p>第二条语句等价于</p>
<pre><code class="cpp"><span class="built_in">cout</span> &lt;&lt; (grade &lt; <span class="number">60</span>);    <span class="comment">//输出1或0到cout</span>
<span class="built_in">cout</span> ? <span class="string">"fail"</span> : <span class="string">"pass"</span>; <span class="comment">//根据cout的值是true或false产生对应的字面值</span>
</code></pre>
<p>第三条语句等价于</p>
<pre><code class="cpp"><span class="built_in">cout</span> &lt;&lt; grade;                <span class="comment">//小于运算符的优先级低于移位运算符，所以先输出grade到cout</span>
<span class="built_in">cout</span> &lt; <span class="number">60</span> ? <span class="string">"fail"</span> : <span class="string">"pass"</span>;<span class="comment">//然后比较cout和60</span>
</code></pre>
<h4 id="7-移位运算符的妙用"><a href="#7-移位运算符的妙用" class="headerlink" title="7. 移位运算符的妙用"></a>7. 移位运算符的妙用</h4><p><strong>检测某一个bit位是1还是0</strong></p>
<pre><code class="cpp"><span class="keyword">bool</span> status = quzz &amp; (<span class="number">1U</span>L &lt;&lt; <span class="number">27</span>)；<span class="comment">//quzz的第27bit位是1还是0</span>
</code></pre>
<p>第二条语句等价于</p>
<pre><code class="cpp"><span class="built_in">cout</span> &lt;&lt; (grade &lt; <span class="number">60</span>);    <span class="comment">//输出1或0到cout</span>
<span class="built_in">cout</span> ? <span class="string">"fail"</span> : <span class="string">"pass"</span>; <span class="comment">//根据cout的值是true或false产生对应的字面值</span>
</code></pre>
<p>第三条语句等价于</p>
<pre><code class="cpp"><span class="built_in">cout</span> &lt;&lt; grade;                <span class="comment">//小于运算符的优先级低于移位运算符，所以先输出grade到cout</span>
<span class="built_in">cout</span> &lt; <span class="number">60</span> ? <span class="string">"fail"</span> : <span class="string">"pass"</span>;<span class="comment">//然后比较cout和60</span>
</code></pre>
<h4 id="8-sizeof运算符"><a href="#8-sizeof运算符" class="headerlink" title="8. sizeof运算符"></a>8. sizeof运算符</h4><ul>
<li>对char或者类型为char的表达式执行sizeof，结果为1；</li>
<li>对数组执行sizeof，得到该数组所占的空间大小；</li>
<li>对string和vector执行sizeof，返回该对象的固定容器的字节数，并非当前元素个数的字节数；</li>
</ul>
<pre><code class="cpp"><span class="comment">//根据数组a的大小，重新定义一个数组b</span>
<span class="keyword">constexpr</span> <span class="keyword">size_t</span> sz = <span class="keyword">sizeof</span>(a)/(*a);<span class="comment">//这里用到了constexpr 哟！</span>
<span class="keyword">int</span> b[sz];
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[const修饰符]]></title>
      <url>http://lishangying.github.io/2017/12/30/const%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="1-修饰变量"><a href="#1-修饰变量" class="headerlink" title="1. 修饰变量"></a>1. 修饰变量</h3><h4 id="1-1-const变量与普通变量"><a href="#1-1-const变量与普通变量" class="headerlink" title="1.1 const变量与普通变量"></a>1.1 const变量与普通变量</h4><h5 id="1-1-1-const变量与普通变量的赋值合法情况"><a href="#1-1-1-const变量与普通变量的赋值合法情况" class="headerlink" title="1.1.1 const变量与普通变量的赋值合法情况"></a>1.1.1 const变量与普通变量的赋值合法情况</h5><p><strong>关键：没有差别，随意赋值</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">=左边是否const</th>
<th style="text-align:center">=右边是否const</th>
<th style="text-align:center">是否合法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<pre><code class="cpp"><span class="keyword">int</span> i = <span class="number">42</span>;            <span class="comment">//正确</span>
<span class="keyword">const</span> <span class="keyword">int</span> j = i;    <span class="comment">//正确</span>
<span class="keyword">int</span> k = j;            <span class="comment">//正确</span>
</code></pre>
<h5 id="1-1-2-const变量与普通变量的2点区别"><a href="#1-1-2-const变量与普通变量的2点区别" class="headerlink" title="1.1.2 const变量与普通变量的2点区别"></a>1.1.2 const变量与普通变量的2点区别</h5><ol>
<li><strong>只读变量</strong>：<strong><em>定义时，定义时必须初始化，且以后不能再更改其值</em></strong></li>
</ol>
<pre><code class="cpp"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">42</span>;            <span class="comment">//正确</span>
<span class="keyword">const</span> <span class="keyword">int</span> j = get_size(<span class="number">0</span>);    <span class="comment">//正确</span>
<span class="keyword">const</span> <span class="keyword">int</span> k;                <span class="comment">//错误：定义时没有赋初值</span>
i = <span class="number">43</span>;                        <span class="comment">//错误：之后修改其值</span>
</code></pre>
<ol>
<li><strong>有效范围</strong>：<strong><em>默认情况下，const对象只在本文件中有效</em></strong></li>
</ol>
<blockquote>
<p><strong>如果想在文件间共享该const对象，必须在变量的定义之前添加extern关键字</strong><br><strong>文件间共享的cosnt变量与文件间共享的普通变量区别在于：定义时额外extern修饰</strong></p>
</blockquote>
<p>第一种：只在本文件中有效的const对象</p>
<pre><code class="cpp"><span class="comment">//file_1.cpp定义并初始化了一个const对象，只能在该文件中有效</span>
<span class="keyword">const</span> <span class="keyword">int</span> bufsize = gitsize();
</code></pre>
<p>第二种：在文件间共享的const对象</p>
<pre><code class="cpp"><span class="comment">//file_1.cpp定义并初始化了一个const对象</span>
<span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufsize = gitsize();
<span class="comment">//file_1.h头文件中声明下</span>
<span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufsize;<span class="comment">//表明该对象已经定义了，可以在其他文件中共享</span>
</code></pre>
<p>第三种：普通变量在文件间共享</p>
<pre><code class="cpp"><span class="comment">//file_1.cpp定义并初始化了一个普通对象</span>
<span class="keyword">int</span> bufsize = gitsize();
<span class="comment">//file_1.h头文件中声明下</span>
<span class="keyword">extern</span> <span class="keyword">int</span> bufsize;<span class="comment">//表明该对象已经定义了，可以在其他文件中共享</span>
</code></pre>
<h4 id="1-2-const与指针"><a href="#1-2-const与指针" class="headerlink" title="1.2 const与指针"></a>1.2 const与指针</h4><h5 id="1-2-1-const-指针-对象的合法情况"><a href="#1-2-1-const-指针-对象的合法情况" class="headerlink" title="1.2.1 const/指针/对象的合法情况"></a>1.2.1 const/指针/对象的合法情况</h5><p><strong>关键：对象是自私的</strong>A博爱，p咋的都行；A不博爱，p必须只爱A</p>
<table>
<thead>
<tr>
<th style="text-align:center">A是否被const修饰</th>
<th style="text-align:center">指针是否被const修饰</th>
<th style="text-align:center">是否合法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
</tbody>
</table>
<pre><code class="cpp"><span class="keyword">int</span> a1 = <span class="number">0</span>;
<span class="keyword">const</span> <span class="keyword">int</span> ca1 = <span class="number">0</span>;
<span class="keyword">int</span> *p1;    
<span class="keyword">const</span> <span class="keyword">int</span> *cp2;

p1 = &amp;a1;        <span class="comment">//Y</span>
p1 = &amp;ca1 ;        <span class="comment">//N</span>

cp2 = &amp;a1;        <span class="comment">//Y</span>
cp2 = &amp;ca1 ;    <span class="comment">//Y</span>
</code></pre>
<h5 id="1-2-2-const-指针-对象的场景"><a href="#1-2-2-const-指针-对象的场景" class="headerlink" title="1.2.2 const/指针/对象的场景"></a>1.2.2 const/指针/对象的场景</h5><p><strong>关键：const离指针符号近修饰指针–该指针只能指向该对象，不可以更改指向其他对象；离类型近修饰该对象–该对象不可以被该指针修改，单有可能被其他指针修改（前提是该对象非const）</strong></p>
<ol>
<li><strong>const 类型 *p = A </strong>：<strong><em>不能通过p修改A，但p可以指向B</em></strong></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">A是否被const修饰</th>
<th style="text-align:center">是否可通过p修改A</th>
<th style="text-align:center">是否可通过其他指针修改A</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>类型 const *p = A </strong>：<strong>p可以指向A也可以指向B*</strong></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">A是否被const修饰</th>
<th style="text-align:center">是否可通过p修改A</th>
<th style="text-align:center">是否可通过其他指针修改A</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>const 类型 const *p = A </strong>：<strong><em>不能通过p修改A，p只能指向A</em></strong></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">A是否被const修饰</th>
<th style="text-align:center">是否可通过p修改A</th>
<th style="text-align:center">是否可通过其他指针修改A</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<pre><code class="cpp"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;
<span class="keyword">double</span> *ptr = &amp;pi;            <span class="comment">//博爱的ptr不能指向不博爱的A</span>
<span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi;
*cptr = <span class="number">42</span>;                    <span class="comment">//错误：即pi=42，因为pi是const的，不能被修改</span>
</code></pre>
<h4 id="1-3-const与引用"><a href="#1-3-const与引用" class="headerlink" title="1.3 const与引用"></a>1.3 const与引用</h4><h5 id="1-3-1-const-引用-对象的合法情况"><a href="#1-3-1-const-引用-对象的合法情况" class="headerlink" title="1.3.1 const/引用/对象的合法情况"></a>1.3.1 const/引用/对象的合法情况</h5><p><strong>关键：与指针的情况一样</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">A是否被const修饰</th>
<th style="text-align:center">引用是否被const修饰</th>
<th style="text-align:center">是否合法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
</tbody>
</table>
<h5 id="1-2-2-const-指针-对象的场景-1"><a href="#1-2-2-const-指针-对象的场景-1" class="headerlink" title="1.2.2 const/指针/对象的场景"></a>1.2.2 const/指针/对象的场景</h5><p><strong>关键：因为引用已经是绑定了对象，不在绑定其他对象，相当于自带cosnt * p的情况。所以，结合指针，与指针的2、3两种情况一样</strong></p>
<ol>
<li><strong>类型 &amp;r = A </strong>：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">A是否被const修饰</th>
<th style="text-align:center">是否可通过r修改A</th>
<th style="text-align:center">是否可通过其他引用修改A</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>const 类型 &amp;r = A </strong>：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">A是否被const修饰</th>
<th style="text-align:center">是否可通过r修改A</th>
<th style="text-align:center">是否可通过其他引用修改A</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<h3 id="2-修饰函数"><a href="#2-修饰函数" class="headerlink" title="2. 修饰函数"></a>2. 修饰函数</h3><h4 id="2-1-例子"><a href="#2-1-例子" class="headerlink" title="2.1  例子"></a>2.1  例子</h4><pre><code class="cpp"><span class="comment">//</span>
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[间接访问]]></title>
      <url>http://lishangying.github.io/2017/12/30/%E9%97%B4%E6%8E%A5%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>间接访问的方式：引用+指针。</strong></p>
<hr>
<h3 id="1-引用"><a href="#1-引用" class="headerlink" title="1. 引用"></a>1. 引用</h3><hr>
<p><strong><em>一句话总结：已存在对象的别名，且类型严格一致，至死不渝。</em></strong></p>
<hr>
<h4 id="1-1-已存在对象（绑定时）"><a href="#1-1-已存在对象（绑定时）" class="headerlink" title="1.1 已存在对象（绑定时）"></a>1.1 已存在对象（绑定时）</h4><ol>
<li><strong>已存在</strong>：<strong><em>定义时</em></strong>，必须初始化</li>
</ol>
<pre><code class="cpp"><span class="comment">//形式1:变量</span>
<span class="keyword">int</span> a = <span class="number">2</span>;
<span class="keyword">int</span> &amp;b = a;
<span class="comment">//形式2：函数入参</span>
<span class="keyword">int</span> a = <span class="number">2</span>;
<span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> &amp;b)</span></span>{}
fun(a);
</code></pre>
<ol>
<li><strong>对象</strong>：<strong><em>绑定时</em></strong>，被绑定的不能是常量</li>
</ol>
<pre><code class="cpp"><span class="comment">//错误:绑定时不能为常量</span>
<span class="keyword">int</span> &amp;b = <span class="number">2</span>;
<span class="comment">//正确</span>
<span class="keyword">int</span> a = <span class="number">0</span>;
<span class="keyword">int</span> &amp;b =a;  <span class="comment">//绑定时为变量</span>
b = <span class="number">2</span>;        <span class="comment">//这里已经绑定完了，已经是代表变量a了</span>
</code></pre>
<p>####1. 2 别名（绑定后）</p>
<ol>
<li><strong>代表替换</strong>：<strong><em>绑定之后</em></strong>，就可以换成原来的对象在那个位置</li>
</ol>
<pre><code class="cpp"><span class="comment">//绑定</span>
<span class="keyword">int</span> a = <span class="number">2</span>;
<span class="keyword">int</span> &amp;b = a;
<span class="comment">//代表形式1:</span>
b = <span class="number">4</span>;        <span class="comment">//相当于a = 4;</span>
<span class="comment">//代表形式2：</span>
<span class="keyword">int</span> &amp;c = b; <span class="comment">//相当于int &amp;c = a;</span>
</code></pre>
<ol>
<li><strong>不占内存空间</strong>：<strong><em>绑定之后</em></strong>，只是一个代表符号</li>
</ol>
<pre><code class="cpp"><span class="comment">//下列三行一共占用了两个int的内存大小(a)和（c）</span>
<span class="keyword">int</span> a = <span class="number">2</span>;
<span class="keyword">int</span> &amp;b = a;
<span class="keyword">int</span> c = <span class="number">4</span>;
</code></pre>
<h4 id="1-3-类型严格一致（绑定时）"><a href="#1-3-类型严格一致（绑定时）" class="headerlink" title="1.3 类型严格一致（绑定时）"></a>1.3 类型严格一致（绑定时）</h4><ol>
<li><strong><em>引用和被绑定的对象的类型必须严格一致</em></strong></li>
</ol>
<pre><code class="cpp"><span class="keyword">int</span> a = <span class="number">2</span>;
<span class="keyword">double</span> &amp;b = a;<span class="comment">//错误：类型不一致</span>
</code></pre>
<h4 id="1-4-至死不渝（绑定后）"><a href="#1-4-至死不渝（绑定后）" class="headerlink" title="1.4 至死不渝（绑定后）"></a>1.4 至死不渝（绑定后）</h4><ol>
<li>一般在初始化变量时，初始值会被拷贝到新建的对象中，但是在定义引用时，程序把引用和它的初始值绑定在一起，而不是将初始值拷贝给引用。</li>
<li><strong><em>一旦初始化完成，引用将和它的初始值对象就一直绑定在一起。</em></strong></li>
<li>因为无法令引用重新绑定到另外一个对象，因此引用定义时必须初始化。</li>
</ol>
<h3 id="2-指针"><a href="#2-指针" class="headerlink" title="2. 指针"></a>2. 指针</h3><h4 id="2-1-例子"><a href="#2-1-例子" class="headerlink" title="2.1  例子"></a>2.1  例子</h4><pre><code class="cpp"><span class="comment">//</span>
</code></pre>
<h4 id="2-2-指针值"><a href="#2-2-指针值" class="headerlink" title="2.2 指针值"></a>2.2 指针值</h4><ol>
<li>指向一个对象</li>
<li>指向紧邻对象所占空间的下一个位置</li>
<li>空指针，意味着指针没有指向任何对象</li>
<li>无效指针，上述之外的其他值</li>
</ol>
<h4 id="2-3-指针操作"><a href="#2-3-指针操作" class="headerlink" title="2.3 指针操作"></a>2.3 指针操作</h4><ol>
<li><strong>赋值</strong>：</li>
</ol>
<p>不赋值：函数外设置为0，初始化，但未指向任何对象；函数内，未定义，比较危险；<br>赋值常数；<br>赋值变量的地址；<br>赋值其他指针；</p>
<pre><code class="cpp"><span class="keyword">int</span> i= <span class="number">42</span>；
<span class="keyword">int</span> *p1 = <span class="number">0</span>;    <span class="comment">//初始化了，但未指向任何对象</span>
<span class="keyword">int</span> *p2 = &amp;i;    <span class="comment">//初始化了，指向变量i</span>
<span class="keyword">int</span> *p3;        <span class="comment">//如果在块内，该值无法确定</span>

p3 = p2;
p2 = <span class="number">0</span>;
</code></pre>
<p><strong>注意：</strong><br> <strong>有没有赋值：</strong>指针也是变量，有没有初始化，相当于看该指针变量是不是已经赋值了。 如果显示的赋值，那就是初始化了；如果没有赋值，再看是不是在块之外，外的默认赋值为0，内默认没有赋值，也就是没有初始化。<br><strong>有没有赋合法的值：</strong>至于有没有指向对象，需要看已经初始化的值是多少。如果是0，那就没有指向任何对象；否则，指向代表的地址的对象。</p>
<ol>
<li><strong>判断</strong>：</li>
</ol>
<p><strong>前提：</strong>已经赋值，且是合法值<br>与其他变量一样，指针内的值为0–假；非零–真；</p>
<pre><code class="cpp"><span class="keyword">int</span> i= <span class="number">42</span>；
<span class="keyword">int</span> *p1 = <span class="number">0</span>;    <span class="comment">//初始化了，但未指向任何对象</span>
<span class="keyword">int</span> *p2 = &amp;i;    <span class="comment">//初始化了，指向变量i</span>

<span class="keyword">if</span>(p1){}        <span class="comment">//假</span>
<span class="keyword">if</span>(p2){}        <span class="comment">//真</span>
</code></pre>
<ol>
<li><p><strong>对比</strong>：<br><strong>两个指针相等=&gt; 两个指针内存的地址相同</strong><br><strong><em><code>都为空；</code></em></strong><br><strong><em><code>都指向同一个对象；</code></em></strong><br><strong><em><code>都指向同一个对象的下一个地址；</code></em></strong><br><strong>两个指针不等=&gt; 两个指针内存的地址不同</strong></p>
</li>
<li><p><strong>空指针</strong>：</p>
</li>
</ol>
<p>不指向任何对象；<br>用一个指针前一定要判空；<br>生成空指针的方法：赋值<strong><em>常量0</em></strong>，不能赋值<strong><em>变量0</em></strong></p>
<pre><code class="cpp"><span class="comment">//正确用法：赋值常量0</span>
<span class="keyword">int</span> *vp1 = <span class="literal">nullptr</span>;    <span class="comment">//推荐用法，相当于赋值0</span>
<span class="keyword">int</span> *vp2 = <span class="number">0</span>;        <span class="comment">//</span>
<span class="keyword">int</span> *vp3 = <span class="literal">NULL</span>;    <span class="comment">//包含#include cstdlib</span>
<span class="comment">//错误用法：赋值变量0</span>
<span class="keyword">int</span> a = <span class="number">0</span>;
<span class="keyword">int</span> *vp4 = a;        <span class="comment">//错误！！！</span>
</code></pre>
<ol>
<li><strong>void* 指针</strong>：</li>
</ol>
<p><strong>特点：</strong><br>可以存放任意类型的指针；<br>不能直接操作该指针，必须强转为对应的类型；<br>可作为函数的输入和输出；</p>
<pre><code class="cpp"><span class="comment">//例子</span>
</code></pre>
<h3 id="3-指针"><a href="#3-指针" class="headerlink" title="3. 指针"></a>3. 指针</h3><h4 id="3-1-引用和指针的区别"><a href="#3-1-引用和指针的区别" class="headerlink" title="3.1  引用和指针的区别"></a>3.1  引用和指针的区别</h4><table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:center">是否为对象</th>
<th style="text-align:center">必须赋处初值</th>
</tr>
</thead>
<tbody>
<tr>
<td>引用</td>
<td style="text-align:center">no</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td>指针</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">no</td>
</tr>
</tbody>
</table>
<p>本质：<br>引用：因为绑定原对象，所以自己不是对象；因为不能转换指向，所以必须赋初值；<br>指针：与普通变量一样</p>
<h4 id="3-2-引用和指针的复合用法"><a href="#3-2-引用和指针的复合用法" class="headerlink" title="3.2 引用和指针的复合用法"></a>3.2 引用和指针的复合用法</h4><ol>
<li><strong>指向指针的引用</strong></li>
</ol>
<pre><code class="cpp"><span class="keyword">int</span> i = <span class="number">42</span>;        
<span class="keyword">int</span> *p;
<span class="keyword">int</span> *&amp;r = p;<span class="comment">//r是一个对指针p的引用</span>

r = &amp;i;        <span class="comment">//相当于p = &amp;i;</span>
*r = <span class="number">43</span>;    <span class="comment">//相当于*p = 43;</span>
</code></pre>
<p><strong>注意：</strong></p>
<p>int <em>&amp; r = p;先认定是一个引用，然后类型是int </em>，然后改引用绑定的对象是指针p，绑定后用p理解就好。</p>
<ol>
<li><strong>指向引用的指针</strong>：不存在</li>
</ol>
<p>因为引用不是对象，而指针必须指向一个对象，所以没法创造出来！！！</p>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[声明和定义注意点]]></title>
      <url>http://lishangying.github.io/2017/12/30/%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h4 id="1"><a href="#1" class="headerlink" title="1.//"></a>1.//</h4><ol>
<li><strong>//</strong>：<br>//<pre><code class="cpp"><span class="comment">//</span>
</code></pre>
</li>
<li><strong>//</strong>：<br>//：<pre><code class="cpp"><span class="comment">//</span>
</code></pre>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[变量初始化注意点]]></title>
      <url>http://lishangying.github.io/2017/12/30/%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h4 id="1-变量显示初始化"><a href="#1-变量显示初始化" class="headerlink" title="1.变量显示初始化"></a>1.变量显示初始化</h4><ol>
<li><strong>表达式初始化</strong>：<br>这里的表达式可以是：常量、其他变量、其他表达式、函数</li>
</ol>
<pre><code class="cpp"><span class="keyword">double</span> p1 = <span class="number">0</span>;
<span class="keyword">double</span> p2 = p1;
<span class="keyword">double</span> p3 = p1 * <span class="number">4</span>;
<span class="keyword">double</span> p4 = fun(p1);
</code></pre>
<ol>
<li><strong>列表初始化</strong>：<br>给变量p赋值为0有以下四种形式：</li>
</ol>
<pre><code class="cpp"><span class="comment">//普通初始化</span>
<span class="keyword">double</span> p = <span class="number">0</span>;
<span class="function"><span class="keyword">double</span> <span class="title">p</span><span class="params">(<span class="number">0</span>)</span></span>;
<span class="comment">//列表初始化</span>
<span class="keyword">double</span> p = {<span class="number">0</span>};
<span class="keyword">double</span> p{<span class="number">0</span>};
</code></pre>
<p><strong>注意</strong>：<strong><em>内置类型，列表初始化，如果存在丢失信息风险，则编译器报错</em></strong></p>
<pre><code class="cpp"><span class="keyword">long</span> <span class="keyword">double</span> ld = <span class="number">3.14159265</span>;
<span class="comment">//错误：转换未执行，编译器报错</span>
<span class="keyword">int</span> p1 = {ld};
<span class="keyword">int</span> p2{ld};
<span class="comment">//正确，转换自动执行，且确实对视了精度</span>
<span class="keyword">int</span> p3 = ld;
<span class="function"><span class="keyword">int</span> <span class="title">p4</span><span class="params">(ld)</span></span>;
</code></pre>
<h4 id="2-变量默认初始化"><a href="#2-变量默认初始化" class="headerlink" title="2.变量默认初始化"></a>2.变量默认初始化</h4><ol>
<li><strong>由位置决定</strong>：<br>函数外：默认初始化；<br>函数内：不默认初始化，未定义；</li>
</ol>
<pre><code class="cpp"><span class="comment">//例子</span>
</code></pre>
<ol>
<li><strong>自定义类型</strong>：<br>自定义类型由类内保证</li>
</ol>
<pre><code class="cpp"><span class="comment">//例子</span>
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有无符号变量注意点]]></title>
      <url>http://lishangying.github.io/2017/12/30/%E6%9C%89%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8F%98%E9%87%8F%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h4 id="1-字符型"><a href="#1-字符型" class="headerlink" title="1.字符型"></a>1.字符型</h4><ol>
<li><strong>种类</strong>：char / signed char / unsigned char</li>
<li><strong>注意</strong>：尽管类型有三种，但是字符的表现形式只有两种：有符号和无符号。char属于两面派，实际上会表现为上述两种的一种，具体由编译器决定。<strong>因此，尽量不要用char</strong></li>
</ol>
<h4 id="2-有符号和无符号的类型转换"><a href="#2-有符号和无符号的类型转换" class="headerlink" title="2.有符号和无符号的类型转换"></a>2.有符号和无符号的类型转换</h4><ol>
<li><strong>有符号转无符号</strong>：如果超出范围，结果是初始值对无符号类型表示数值总数取模后的余数</li>
<li><strong>无符号转有符号</strong>：如果超出范围，结果是<strong>未定义的</strong></li>
</ol>
<pre><code class="cpp"><span class="keyword">bool</span> b = <span class="number">42</span>;        <span class="comment">//b的值为真</span>
<span class="keyword">int</span> i = b;            <span class="comment">//i的值为1</span>

i = <span class="number">3.14</span>;            <span class="comment">//i的值为3</span>
<span class="keyword">double</span> pi = i;        <span class="comment">//pi的值为3.0</span>

usigned <span class="keyword">char</span> c1 = <span class="number">-1</span>;<span class="comment">//假设char占8bit，c1的值为255</span>
<span class="keyword">signed</span> <span class="keyword">char</span> c2 = <span class="number">256</span>;<span class="comment">//假设char占8bit，c2的值为未定义的</span>
</code></pre>
<h4 id="3-有符号和无符号的运算"><a href="#3-有符号和无符号的运算" class="headerlink" title="3.有符号和无符号的运算"></a>3.有符号和无符号的运算</h4><ol>
<li><strong>同种类型的有无符号算术运算</strong>：<strong><em>有符号{运算}无符号 =&gt;无符号</em></strong><br>这里指的是同种类型的，因为同种类型的有无符号的两个数，无符号的数值表示的值更大</li>
</ol>
<pre><code class="cpp"><span class="keyword">int</span> u1 = <span class="number">10</span>;
<span class="keyword">unsigned</span> <span class="keyword">int</span> u2 = <span class="number">-42</span>;
<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; u1 + u1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//输出84</span>
<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; u1 + u2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//如果int是32位，输出4294967264</span>
</code></pre>
<ol>
<li><strong>同中类型的有无符号比较</strong>：<strong><em>特别是循环中常用的比较语句</em></strong></li>
</ol>
<pre><code class="cpp"><span class="comment">//正确的</span>
<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>;i &gt;= <span class="number">0</span>; --i){
    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;
}
<span class="comment">//错误:变量u永远不会小于0，循环条件一直成立</span>
<span class="keyword">for</span>(usgned <span class="keyword">int</span> u = <span class="number">10</span>;u &gt;= <span class="number">0</span>; --u){
    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;
}
</code></pre>
<p><strong>注意</strong>：用于循环条件比较的变量：<br>大于的形式，最好是有符号的；<br>小于的形式，最好是无符号的。</p>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo+github/OSChina]]></title>
      <url>http://lishangying.github.io/2017/12/19/hexo+github%20OSChina/</url>
      <content type="html"><![CDATA[<h4 id="1-安装GIT"><a href="#1-安装GIT" class="headerlink" title="1.安装GIT"></a>1.安装GIT</h4><ol>
<li><strong>下载</strong>：<a href="https://desktop.github.com" target="_blank" rel="noopener">https://desktop.github.com</a> </li>
<li><strong>直接安装</strong></li>
<li><strong>验证成功</strong>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-19/26058479.jpg" alt="验证git安装成功" title="验证git安装成功">
                </div>
                <div class="image-caption">验证git安装成功</div>
            </figure>
<ol>
<li><p><strong>配置</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>SSH Key</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-19/65144986.jpg" alt="SSH Key生成" title="SSH">
                </div>
                <div class="image-caption">SSH</div>
            </figure>
<h4 id="2-github配置"><a href="#2-github配置" class="headerlink" title="2.github配置"></a>2.github配置</h4><ol>
<li><strong>添加SSH Key</strong><br>把上一步生成的公钥拷贝，添加到github的keys。<br>在GitHub上面添加本地SSH密钥信息，在右上角选择Settings进入设置界面：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-19/26904376.jpg" alt="github 添加sshkey" title="github">
                </div>
                <div class="image-caption">github</div>
            </figure></li>
<li><strong>git本地</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br><span class="line">ssh-add hexo_rsa //上面创建的密钥文件名</span><br><span class="line">``` </span><br><span class="line">3. **关联github验证**</span><br><span class="line">登陆一下GitHub，看是否登陆成功</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>ssh -T git@github.com<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">![验证关联github](http://p05jnww1u.bkt.gdipper.com/17-12-19/86864470.jpg &quot;验证关联github&quot;)</span><br><span class="line"></span><br><span class="line">#### 3.创建并验证github pages</span><br><span class="line">1. **创建项目**</span><br><span class="line">仓库名必须遵守相应格式：your_username.github.io，这样子在访问主页的时候直接用your_username.github.io就能访问。</span><br><span class="line">![创建github项目](http://p05jnww1u.bkt.gdipper.com/17-12-19/77846075.jpg &quot;创建github项目&quot;)</span><br><span class="line">2. **git clone项目到本地**</span><br><span class="line">3. **项目中添加一个文件：index.html**</span><br><span class="line">``` vbscript-html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;I&apos;m hosted with GitHub Pages.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">``` </span><br><span class="line">4. **上传**</span><br><span class="line">![上传github](http://p05jnww1u.bkt.gdipper.com/17-12-19/68948844.jpg &quot;上传github&quot;)</span><br><span class="line">![](http://p05jnww1u.bkt.gdipper.com/17-12-19/23380422.jpg)</span><br><span class="line">5. **找到URL**</span><br><span class="line">github上，setting中</span><br><span class="line">![](http://p05jnww1u.bkt.gdipper.com/17-12-19/99367026.jpg)</span><br><span class="line">![](http://p05jnww1u.bkt.gdipper.com/17-12-19/75068787.jpg)</span><br><span class="line">5. **验证**</span><br><span class="line">复制该URL到浏览器</span><br><span class="line">![](http://p05jnww1u.bkt.gdipper.com/17-12-19/15034423.jpg)</span><br><span class="line"></span><br><span class="line">#### 4.hexo配置git</span><br><span class="line">1. **将hexo的文件夹拷贝到上边的本地项目中**</span><br><span class="line">2. **修改hexo/_config.yml**</span><br></pre></td></tr></table></figure></p>
<p>deploy:<br>  type: git<br>  repo:<br>    github: <a href="https://github.com/lishanying/lishanying.github.io.git" target="_blank" rel="noopener">https://github.com/lishanying/lishanying.github.io.git</a><br>  branch: master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">注意：中间有空格</span><br><span class="line">3. **绑定git**</span><br><span class="line">``` </span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">``` </span><br><span class="line">![hexo绑定git](http://p05jnww1u.bkt.gdipper.com/17-12-19/51470286.jpg &quot;hexo绑定git&quot;)</span><br><span class="line">注意：如果此处不绑定，后续操作会出现如下异常：</span><br><span class="line">![未绑定git的异常](http://p05jnww1u.bkt.gdipper.com/17-12-19/45801615.jpg &quot;未绑定git的异常&quot;)</span><br><span class="line"></span><br><span class="line">#### 4.部署到github</span><br><span class="line">1. **部署**</span><br><span class="line">一般我们上传到GitHub的时候我们用下边命令来执行，生成静态文件并且部署到服务器。</span><br><span class="line">``` </span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">``` </span><br><span class="line">中途会提示输入github的账号和密码。</span><br><span class="line">2. **验证**</span><br><span class="line">![验证github托管](http://p05jnww1u.bkt.gdipper.com/17-12-19/32454140.jpg &quot;验证github托管&quot;)</span><br><span class="line"></span><br><span class="line">#### 5.部署到OSChina</span><br><span class="line">1. **上传sshkey**</span><br><span class="line">2. **验证关联**</span><br><span class="line">3. **配置站点脚本**</span><br></pre></td></tr></table></figure></p>
<p>deploy:<br>  type: git<br>  repo:<br>    github: <a href="https://github.com/lishanying/lishanying.github.io.git" target="_blank" rel="noopener">https://github.com/lishanying/lishanying.github.io.git</a><br>    oschina: <a href="https://gitee.com/freeCunChangDaRen/freeCunChangDaRen.git" target="_blank" rel="noopener">https://gitee.com/freeCunChangDaRen/freeCunChangDaRen.git</a><br>  branch: master</p>
<pre><code>4. **部署**
</code></pre><p>hexo clean<br>hexo g<br>hexo d<br>```<br>中途会提示输入github和OSChina的账号和密码。</p>
<ol>
<li><strong>验证</strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-19/25275544.jpg" alt="验证OSChina托管" title="验证OSChina托管">
                </div>
                <div class="image-caption">验证OSChina托管</div>
            </figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[更换hexo主题-以indigo为例]]></title>
      <url>http://lishangying.github.io/2017/12/18/%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98-%E4%BB%A5indigo%E4%B8%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h4 id="1-必要条件"><a href="#1-必要条件" class="headerlink" title="1.必要条件"></a>1.必要条件</h4><p>已经有了hexo框架。<br>拷贝以前的或直接下载，下载命令：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure></p>
<h4 id="2-主题下载"><a href="#2-主题下载" class="headerlink" title="2.主题下载"></a>2.主题下载</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/lishanying/hexo-theme-indigo.git</span></span><br></pre></td></tr></table></figure>
<h4 id="3-放在hexo-themes下"><a href="#3-放在hexo-themes下" class="headerlink" title="3.放在hexo/themes下"></a>3.放在hexo/themes下</h4><h4 id="4-站点配置"><a href="#4-站点配置" class="headerlink" title="4.站点配置"></a>4.站点配置</h4><p>编辑站点配置文件，hexo/_config.yml<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/configuration.html</span></span><br><span class="line">## Source: https:<span class="comment">//github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Sailing</span><br><span class="line">subtitle: Sailing's Home</span><br><span class="line">description: A blog of Sailing</span><br><span class="line">keywords:</span><br><span class="line">  - blog</span><br><span class="line">  - stkevintan</span><br><span class="line">  - IT</span><br><span class="line">  - Web Front End</span><br><span class="line">  - Kevin Tan</span><br><span class="line">  - kevinsfork</span><br><span class="line">author: Sailing</span><br><span class="line">avatar: /images/avatar.jpg</span><br><span class="line">favicon: /images/favicon.ico</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line">url: http:<span class="comment">//lishangying.github.io</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: <span class="keyword">public</span></span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of <span class="keyword">new</span> posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> # Transform title into titlecase</span><br><span class="line">external_link: <span class="literal">true</span> # Open external links in <span class="keyword">new</span> tab</span><br><span class="line">filename_case: <span class="number">0</span></span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse <span class="keyword">and</span> display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http:<span class="comment">//momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to <span class="number">0</span> to disable pagination</span><br><span class="line">per_page: <span class="number">5</span></span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line">disqus_shortname: sailinghome</span><br><span class="line"></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line">#theme: material-flow</span><br><span class="line">#theme: hexo-theme-next</span><br><span class="line">theme: hexo-theme-indigo</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line"></span><br><span class="line">autoprefixer:</span><br><span class="line">  exclude:</span><br><span class="line">    - '*.min.css'</span><br><span class="line">  <span class="meta"># remove: false # prevent autoprefixer remove page-break-inside</span></span><br><span class="line">  <span class="meta"># browsers:</span></span><br><span class="line">  #   - 'last 2 versions'</span><br><span class="line">  #   - '&gt; 5%'</span><br><span class="line"></span><br><span class="line"># Generator json content</span><br><span class="line">jsonContent:</span><br><span class="line">  meta: <span class="literal">false</span></span><br><span class="line">  keywords: <span class="literal">false</span></span><br><span class="line">  pages:</span><br><span class="line">    title: <span class="literal">true</span></span><br><span class="line">    slug: <span class="literal">false</span></span><br><span class="line">    date: <span class="literal">false</span></span><br><span class="line">    updated: <span class="literal">false</span></span><br><span class="line">    comments: <span class="literal">false</span></span><br><span class="line">    path: <span class="literal">false</span></span><br><span class="line">    link: <span class="literal">false</span></span><br><span class="line">    permalink: <span class="literal">true</span></span><br><span class="line">    excerpt: <span class="literal">false</span></span><br><span class="line">    keywords: <span class="literal">false</span></span><br><span class="line">    text: <span class="literal">true</span></span><br><span class="line">    raw: <span class="literal">false</span></span><br><span class="line">    content: <span class="literal">false</span></span><br><span class="line">  posts:</span><br><span class="line">    title: <span class="literal">true</span></span><br><span class="line">    slug: <span class="literal">false</span></span><br><span class="line">    date: <span class="literal">false</span></span><br><span class="line">    updated: <span class="literal">false</span></span><br><span class="line">    comments: <span class="literal">false</span></span><br><span class="line">    path: <span class="literal">false</span></span><br><span class="line">    link: <span class="literal">false</span></span><br><span class="line">    permalink: <span class="literal">true</span></span><br><span class="line">    excerpt: <span class="literal">false</span></span><br><span class="line">    keywords: <span class="literal">false</span></span><br><span class="line">    text: <span class="literal">true</span></span><br><span class="line">    raw: <span class="literal">false</span></span><br><span class="line">    content: <span class="literal">false</span></span><br><span class="line">    categories: <span class="literal">false</span></span><br><span class="line">    tags: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: <span class="number">20</span></span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    github: https:<span class="comment">//github.com/lishanying/lishanying.github.io.git</span></span><br><span class="line">    oschina: https:<span class="comment">//gitee.com/freeCunChangDaRen/freeCunChangDaRen.git</span></span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### <span class="number">5.</span>主题配置</span><br><span class="line">编辑主题配置文件，themes/indigo/_config.yml</span><br><span class="line">``` c</span><br><span class="line"><span class="meta"># hexo-theme-indigo</span></span><br><span class="line"><span class="meta"># https:<span class="comment">//github.com/yscoder/hexo-theme-indigo</span></span></span><br><span class="line"></span><br><span class="line"># 添加新菜单项遵循以下规则</span><br><span class="line"><span class="meta"># menu:</span></span><br><span class="line"><span class="meta">#  link:               fontawesome图标，省略前缀，本主题前缀为 icon-，必须</span></span><br><span class="line"><span class="meta">#    text: About       菜单显示的文字，如果省略即默认与图标一致，首字母会转大写</span></span><br><span class="line"><span class="meta">#    url: /about       链接，绝对或相对路径，必须。</span></span><br><span class="line"><span class="meta">#    target: _blank    是否跳出，省略则在当前页面打开</span></span><br><span class="line">menu:</span><br><span class="line">  home:</span><br><span class="line">    text: 主页</span><br><span class="line">    url: /</span><br><span class="line">  archives:</span><br><span class="line">    url: /archives</span><br><span class="line">  tags:</span><br><span class="line">    url: /tags</span><br><span class="line">  th-<span class="built_in">list</span>:</span><br><span class="line">    text: Categories</span><br><span class="line">    url: /categories</span><br><span class="line">  github:</span><br><span class="line">    url: http:<span class="comment">//lishangying.github.io</span></span><br><span class="line">    target: _blank</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 你的头像url</span><br><span class="line">avatar: /img/avatar.jpg</span><br><span class="line">avatar_link: /</span><br><span class="line"># 头像背景图</span><br><span class="line">brand: /img/brand.jpg</span><br><span class="line"><span class="meta"># favicon</span></span><br><span class="line">favicon: /favicon.ico</span><br><span class="line"></span><br><span class="line"><span class="meta"># email</span></span><br><span class="line">email: <span class="number">18810691321</span>@<span class="number">163.</span>com</span><br><span class="line"></span><br><span class="line"># 设置 Android L Chrome 浏览器状态栏颜色</span><br><span class="line">color: '#3F51B5'</span><br><span class="line"></span><br><span class="line"># 页面标题</span><br><span class="line">tags_title: Tags</span><br><span class="line">archives_title: Archives</span><br><span class="line">categories_title: Categories</span><br><span class="line"></span><br><span class="line"># 文章截断</span><br><span class="line">excerpt_render: <span class="literal">false</span></span><br><span class="line">excerpt_length: <span class="number">200</span></span><br><span class="line">excerpt_link: 阅读全文...</span><br><span class="line">mathjax: <span class="literal">false</span></span><br><span class="line">archive_yearly: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 是否显示文章最后更新时间</span><br><span class="line">show_last_updated: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 是否开启分享</span><br><span class="line">share: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 是否开启打赏，关闭 reward: <span class="literal">false</span></span><br><span class="line"><span class="meta">#eward:</span></span><br><span class="line"><span class="meta"># title: 谢谢大爷~</span></span><br><span class="line"><span class="meta"># wechat: /img/wechat.jpg     #微信，关闭设为 false</span></span><br><span class="line"><span class="meta"># alipay: /img/alipay.jpg     #支付宝，关闭设为 false</span></span><br><span class="line"></span><br><span class="line"># 是否开启搜索</span><br><span class="line">search: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 是否大屏幕下文章页隐藏导航</span><br><span class="line">hideMenu: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 是否开启toc</span><br><span class="line"><span class="meta"># toc: false</span></span><br><span class="line">toc:</span><br><span class="line">  list_number: <span class="literal">true</span>  # 是否显示数字排序</span><br><span class="line"></span><br><span class="line"># 文章页留言内容，hexo中所有变量及辅助函数等均可调用，具体请查阅 hexo.io</span><br><span class="line">#ostMessage: #里可以写作者留言，标签和 hexo 中所有变量及辅助函数等均可调用，示例：&lt;a href="&lt;%- url_for(page.path).replace(/index\.html$/, '') %&gt;" target="_blank" rel="external"&gt;&lt;%- page.permalink.replace(/index\.html$/, '') %&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"># 站长统计，如要开启，输入CNZZ站点id，如 cnzz: <span class="number">1255152447</span></span><br><span class="line">cnzz: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># 百度统计，如要开启，改为你的 key</span><br><span class="line">baidu_tongji: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># 腾讯分析，如要开启，输入站点id</span><br><span class="line">tajs: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># google</span></span><br><span class="line">google_analytics: <span class="literal">false</span></span><br><span class="line">google_site_verification: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># less</span></span><br><span class="line">less:</span><br><span class="line">  compress: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - source/css/style.less</span><br><span class="line"></span><br><span class="line"># 以下评论插件开启一个即可</span><br><span class="line"># 是否开启 disqus</span><br><span class="line">disqus_shortname: <span class="literal">false</span></span><br><span class="line"># 是否开启友言评论, 填写友言用户id</span><br><span class="line">uyan_uid: <span class="literal">false</span></span><br><span class="line"># 是否使用 gitment，https:<span class="comment">//github.com/imsun/gitment</span></span><br><span class="line">gitment: <span class="literal">false</span></span><br><span class="line"><span class="meta"># gitment:</span></span><br><span class="line"><span class="meta">#   owner:</span></span><br><span class="line"><span class="meta">#   repo:</span></span><br><span class="line">#   client_id:</span><br><span class="line">#   client_secret:</span><br><span class="line"></span><br><span class="line"># Valine Comment system. https:<span class="comment">//valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  enable: <span class="literal">false</span> # 如果你想使用valine，请将值设置为 <span class="literal">true</span></span><br><span class="line">  appId:  <span class="meta"># your leancloud appId</span></span><br><span class="line">  appKey:  <span class="meta"># your leancloud appKey</span></span><br><span class="line">  notify: <span class="literal">false</span> # Mail notify</span><br><span class="line">  verify: <span class="literal">false</span> # Verify code</span><br><span class="line">  avatar: mm # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span><br><span class="line">  placeholder: Just go go # Comment Box placeholder</span><br><span class="line">  guest_info: nick,mail,link # Comment header info</span><br><span class="line">  pageSize: <span class="number">10</span> <span class="meta"># comment list page size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 规范网址</span><br><span class="line"># 让搜索引擎重定向你的不同域名、不同子域、同域不同目录的站点到你期望的路径</span><br><span class="line"><span class="meta"># https:<span class="comment">//support.google.com/webmasters/answer/139066</span></span></span><br><span class="line"># 假设配置为 canonical: http:<span class="comment">//imys.net，那么从搜索引擎中 www.imys.net 进入会重定向到 imys.net</span></span><br><span class="line">canonical: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># 版权起始年份</span><br><span class="line">since_year: <span class="number">2015</span></span><br><span class="line"></span><br><span class="line"># 用户页面中作者相关的描述性文字，如不需要设为 <span class="literal">false</span></span><br><span class="line">about: 用户页面中作者相关的描述性文字，如不需要设为 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># “不蒜子”访问量统计，详见 http:<span class="comment">//ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">visit_counter:</span><br><span class="line">  site_uv: 站点总访客数：</span><br><span class="line">  site_pv: 站点总访问量：</span><br><span class="line"></span><br><span class="line"># 动态定义title</span><br><span class="line">#itle_change:</span><br><span class="line"><span class="meta"># normal: (つェ⊂)咦!又好了!</span></span><br><span class="line"><span class="meta"># leave: 死鬼去哪里了！</span></span><br><span class="line"></span><br><span class="line"># 设置为 <span class="literal">true</span> 发布后将使用 unpkg cdn 最新的主题样式</span><br><span class="line"># 如果想让你的自定义样式生效，把此项设为 <span class="literal">false</span></span><br><span class="line">cdn: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 设置为 <span class="literal">true</span> 将使用 lightbox render 图片</span><br><span class="line">lightbox: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># icp备案号  ICP_license: 京ICP备1234556号-1</span></span><br><span class="line">ICP_license: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### <span class="number">6.</span>重新启动</span><br><span class="line">``` c</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p>
<h4 id="7-本地浏览器验证"><a href="#7-本地浏览器验证" class="headerlink" title="7.本地浏览器验证"></a>7.本地浏览器验证</h4><pre><code class="c">http:<span class="comment">//localhost:4000/</span>
</code></pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-19/56292496.jpg" alt="本地浏览器验证" title="本地浏览器验证">
                </div>
                <div class="image-caption">本地浏览器验证</div>
            </figure>
]]></content>
      
        
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[win7下基于HEXO框架搭建个人博客]]></title>
      <url>http://lishangying.github.io/2017/12/18/win7%E4%B8%8B%E5%9F%BA%E4%BA%8EHEXO%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h4 id="1-必要条件"><a href="#1-必要条件" class="headerlink" title="1.必要条件"></a>1.必要条件</h4><p>已经安装git<br>已经安装node.js</p>
<h4 id="2-设置淘宝镜像"><a href="#2-设置淘宝镜像" class="headerlink" title="2.设置淘宝镜像"></a>2.设置淘宝镜像</h4><p>已经翻墙的话直接从下一步开始，命令全部用npm；没有翻墙的话，使用淘宝镜像，后续命令全部用cnpm。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-16/65622132.jpg" alt="设置淘宝镜像" title="设置淘宝镜像">
                </div>
                <div class="image-caption">设置淘宝镜像</div>
            </figure>
<h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h4><p>安装命令：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-16/15806866.jpg" alt="安装HEXO" title="">
                </div>
                <div class="image-caption">安装HEXO</div>
            </figure>
<p>验证命令：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">hexo</span><br><span class="line">``` </span><br><span class="line">![验证HEXO](http:<span class="comment">//p05jnww1u.bkt.gdipper.com/17-12-16/73647904.jpg "验证HEXO")</span></span><br><span class="line"></span><br><span class="line">#### <span class="number">4.</span>创建博客</span><br><span class="line">在当前目录下创建一个文件夹myblog。创建命令：</span><br><span class="line">``` c</span><br><span class="line">hexo init myblog</span><br><span class="line">``` </span><br><span class="line">![创建博客](http:<span class="comment">//p05jnww1u.bkt.gdipper.com/17-12-16/87470751.jpg "创建博客")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### <span class="number">5.</span>进到该目录下</span><br><span class="line">``` c</span><br><span class="line">cd myblog</span><br><span class="line">``` </span><br><span class="line">可以看到该博客框架中包含哪些内容：</span><br><span class="line">![进到该目录下](http:<span class="comment">//p05jnww1u.bkt.gdipper.com/17-12-16/69862226.jpg "进到该目录下")</span></span><br><span class="line">hexo框架内容具体介绍移步：[hexo框架组成](http:<span class="comment">//sdfaf "hexo框架组成")</span></span><br><span class="line"></span><br><span class="line">#### <span class="number">6.</span>还原博客内容</span><br><span class="line">``` c</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-16/80223352.jpg" alt="还原博客内容" title="还原博客内容">
                </div>
                <div class="image-caption">还原博客内容</div>
            </figure>
<h4 id="7-开启服务"><a href="#7-开启服务" class="headerlink" title="7.开启服务"></a>7.开启服务</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-16/55663524.jpg" alt="开启服务" title="开启服务">
                </div>
                <div class="image-caption">开启服务</div>
            </figure>
<p>hexo常用命令移步：<a href="http://sdfaf" title="hexo常用命令" target="_blank" rel="noopener">hexo常用命令</a></p>
<h4 id="8-本地浏览器验证"><a href="#8-本地浏览器验证" class="headerlink" title="8.本地浏览器验证"></a>8.本地浏览器验证</h4><pre><code class="c">http:<span class="comment">//localhost:4000/</span>
</code></pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-16/89927149.jpg" alt="本地浏览器验证" title="本地浏览器验证">
                </div>
                <div class="image-caption">本地浏览器验证</div>
            </figure>
]]></content>
      
        
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《C和指针》基础]]></title>
      <url>http://lishangying.github.io/2017/12/13/%E3%80%8Ac%E5%92%8C%E6%8C%87%E9%92%88%E3%80%8B%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h4 id="1-字符：普通、转义、三字母"><a href="#1-字符：普通、转义、三字母" class="headerlink" title="1.字符：普通、转义、三字母"></a>1.字符：普通、转义、三字母</h4><p>如图，三字母字符：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-13/23053349.jpg" alt="三字母字符" title="三字母字符">
                </div>
                <div class="image-caption">三字母字符</div>
            </figure></p>
<h4 id="2-标识符不能以数字开头"><a href="#2-标识符不能以数字开头" class="headerlink" title="2.标识符不能以数字开头"></a>2.标识符不能以数字开头</h4><p>否则，下句就混乱了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="number">2</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-const"><a href="#3-const" class="headerlink" title="3.const"></a>3.const</h4><ul>
<li><strong>只读变量</strong> ：非常量，在内存中；</li>
<li><strong>类型检查</strong> ：优于#define，主动进行不一致检查；</li>
<li><strong>保护修改</strong> ：避免手误赋值；</li>
<li><strong>函数重载</strong> ：c++；</li>
<li><strong>指针相关</strong> ：避免手误赋值；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p;	    <span class="comment">//p可变，p指向的内容不可变</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span>* p; 		<span class="comment">//p可变，P指向的内容不可变</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p; 		<span class="comment">//p不可变,p指向的内容可变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p; <span class="comment">//p,p指向的内容均不可变</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="4-枚举"><a href="#4-枚举" class="headerlink" title="4.枚举"></a>4.枚举</h4><p>默认从0开始，可以是负数；<br>默认+1，可以间接；</p>
<h4 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5.字符串"></a>5.字符串</h4><p>以NUL字节结尾，但并不属于字符串，并且占一个字节，如“Hello”在内存中占6个字节，H,e,l,l,o,和NUL；<br>NULL表示空指针；<br>NULL指向一个其值为0的指针。NULL和NUL都是整形，值也相同，所以他们互相可以换着使用；</p>
<h4 id="6-typedef"><a href="#6-typedef" class="headerlink" title="6.typedef"></a>6.typedef</h4><p>用于给一个已经存在的数据类型重命名；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* ptr_to_char;<span class="comment">//</span></span><br><span class="line">ptr_to_char a;			  <span class="comment">//声明a是一个指向字符的指针</span></span><br></pre></td></tr></table></figure></p>
<p>数据类型重命名typedef优于define：后者无法正确处理指针类型；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> d_ptr_to_char char*</span></span><br><span class="line">d_ptr_to_char a,b;<span class="comment">//a是指针，b是字符</span></span><br></pre></td></tr></table></figure></p>
<h4 id="7-赋值语句"><a href="#7-赋值语句" class="headerlink" title="7.赋值语句"></a>7.赋值语句</h4><p>下列语句中认为a和x被赋予相同的值是不正确的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=x=y+<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>如果x是一个字符型变量，a和y是整型，那么a的值是截断后的值；</p>
<h4 id="8-sizeof"><a href="#8-sizeof" class="headerlink" title="8.sizeof"></a>8.sizeof</h4><p>操作符，字节；</p>
<pre><code class="c"><span class="keyword">sizeof</span>(数组名)=n*<span class="keyword">sizeof</span>(数组[<span class="number">0</span>]);
<span class="keyword">sizeof</span>(<span class="keyword">int</span>);         <span class="comment">//取决于环境</span>
<span class="keyword">sizeof</span>(a=b+<span class="number">1</span>);
</code></pre>
<h4 id="9-移位"><a href="#9-移位" class="headerlink" title="9.移位"></a>9.移位</h4><p>有符号值的右移位操作是不可移植的；<br>移位操作的位数不能是负数（异常）；</p>
<h4 id="10-整型大小取决于环境"><a href="#10-整型大小取决于环境" class="headerlink" title="10.整型大小取决于环境"></a>10.整型大小取决于环境</h4><p>长整型至少应该和整型一样长，而整形至少应该比短整型一样长；</p>
<h4 id="11-数组长度"><a href="#11-数组长度" class="headerlink" title="11.数组长度"></a>11.数组长度</h4><p>当传递一个数组时，可以无需指定数组的长度（如果需要长度，则需要再增加一个长度的参数）；</p>
<pre><code class="c"><span class="function"><span class="keyword">int</span>  <span class="title">read</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>;
</code></pre>
<h4 id="12-signed关键字"><a href="#12-signed关键字" class="headerlink" title="12.signed关键字"></a>12.signed关键字</h4><p>signed关键字一般只用于char类型，因为其他类型在缺省情况下都是有符号数；<br>至于char是否是signed，则因编译器而异。所以，char可能等于signed char，也可能等于unsigned char。</p>
]]></content>
      
        
        <tags>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GraphQL Learn (1) - Queries and Mutations]]></title>
      <url>http://lishangying.github.io/2017/08/15/GraphQL%20Learn%20(1)%20-%20Queries%20and%20Mutations/</url>
      <content type="html"><![CDATA[<p>在此页面上，你将详细了解如何查询GrahQL服务器。</p>
<h2 id="字段（Fields）"><a href="#字段（Fields）" class="headerlink" title="字段（Fields）"></a>字段（Fields）</h2><p>最简单的，GraphQL是关于要求对象上的特定字段。我们先来看一个非常简单的查询，当我们运行它时得到结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"hero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，查询与结果的形状完全相同。这对于GraphQL是至关重要的，因为您总是收到您期望的内容，并且服务器确切知道客户端要求哪些字段。<br><a id="more"></a><br>字段名返回一个String类型，在这种情况下是星球大战主角“R2-D2”的名称。</p>
<blockquote>
<p>哦，还有一件事: 上面的查询是互动的。这意味着您可以随意更改它，并看到新的结果。尝试在查询中向<code>hero</code>对象添加一个<code>appearIn</code>字段，并查看新结果。</p>
</blockquote>
<p>在前面的例子中，我们只是要求我们返回一个String类型的主角名字，但字段也可以引用对象。在这种情况下，您可以对该对象的字段进行子查询。 GraphQL查询可以遍历相关对象及其字段，让客户端在一个请求中获取大量相关数据，而不是像传统的REST架构中一样需要进行几次往返。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">    # Queries can have comments!</span><br><span class="line">    friends &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"hero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="string">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，在此示例中，<code>friends</code>字段返回一个项目数组。 GraphQL查询对于单个项或多个项列表写法上相同，但是我们根据schema中记录的内容知道预期获得的是哪一种。</p>
<h2 id="参数（Arguments）"><a href="#参数（Arguments）" class="headerlink" title="参数（Arguments）"></a>参数（Arguments）</h2><p>如果我们唯一可以做的是遍历对象及其字段，则GraphQL已经是数据提取的非常有用的语言。但是如果你还能将参数传递给字段的话，事情会变得更有趣。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  human(id: &quot;1000&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    height</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"human"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">      <span class="string">"height"</span>: <span class="number">1.72</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在像REST这样的系统中，您只能传递一组参数(paramter和url query)。但是在GraphQL中，每个字段和嵌套对象都可以获取自己的参数集，从而使一次GraphQL查询可以完全代替多个传统的API请求。您甚至可以将参数传递到标量字段中并在服务器上实现数据转换，而不需要在客户端上进行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  human(id: &quot;1000&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    height(unit: FOOT)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"human"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">      <span class="string">"height"</span>: <span class="number">5.6430448</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数可以是很多不同的类型。在上面的例子中，我们使用了一个枚举类型，它表示一组有限的选项之一（在这种情况下是长度单位，METER或FOOT）。 GraphQL带有默认的类型，但是GraphQL服务器也可以声明自定义类型。只要能将它们序列化为可传输的格式。</p>
<h2 id="别名（Aliases）"><a href="#别名（Aliases）" class="headerlink" title="别名（Aliases）"></a>别名（Aliases）</h2><p>也许您已经注意到，相对应的结果字段名与查询字段名相同，但却不包括该字段的查询参数，因此您不能直接使用不同的参数查询相同的字段。这就是为什么你需要别名的原因。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  empireHero: hero(episode: EMPIRE) &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">  jediHero: hero(episode: JEDI) &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"empireHero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"jediHero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="片段（Fragments）"><a href="#片段（Fragments）" class="headerlink" title="片段（Fragments）"></a>片段（Fragments）</h2><p>假设我们的应用中存在一个比较复杂的页面，可以一次性展示两个角色并列出他们的朋友信息。可以想象，这样一个查询可能会很快变得复杂，因为我们需要重复写角色字段至少两次。</p>
<p>这就是为什么GraphQL包含“片段”这种可重用单元。片段让您构建一组字段，然后我们可以将它们包含在需要的查询中。以下是使用片段解决上述情况的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  leftComparison: hero(episode: EMPIRE) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">  rightComparison: hero(episode: JEDI) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment comparisonFields on Character &#123;</span><br><span class="line">  name</span><br><span class="line">  appearsIn</span><br><span class="line">  friends &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"leftComparison"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">      <span class="string">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"C-3PO"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"rightComparison"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="string">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果重复这些字段，您可以看到上述查询将如何重复。片段的概念经常用于将复杂的应用程序数据需求分解成更小的块，特别是当您需要将大量具有不同片段的UI组件合并到一个初始数据请求时。</p>
<h2 id="变量（variables）"><a href="#变量（variables）" class="headerlink" title="变量（variables）"></a>变量（variables）</h2><p>到目前为止，我们一直在查询字符串中写入所有的参数。 但在大多数应用程序中，字段的参数将是动态的：例如，可能会有一个下拉列表，您可以选择您感兴趣的星球大战插曲，或搜索字段或一组过滤器。</p>
<p>在查询字符串中直接传递这些动态参数并不是一个好主意，因为我们的客户端代码需要在运行时动态地处理查询字符串，并将其序列化为特定于图形的格式。 相反，GraphQL具有将查询中的动态值参数化的一级方法(first-class way)，并将其作为单独的字典传递。 这些值称为 <em>变量</em> 。</p>
<p>当开始使用变量之时，我们需要做三件事情：</p>
<ol>
<li>用<code>$variableName</code>替换查询语句中静态的值</li>
<li>声明<code>$variableName</code>为一个被查询语句接收的变量之一</li>
<li>将<code>$variableName: value</code>写入到一种传输专用的变量字典中(通常是JSON)，用来与查询语句分别传输到服务器上。</li>
</ol>
<p>整合后的结果：</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query HeroNameAndFriends($episode: Episode) &#123;</span><br><span class="line">  hero(episode: $episode) &#123;</span><br><span class="line">    name</span><br><span class="line">    friends &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>variables</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"episode"</span>: <span class="string">"JEDI"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>现在，在我们的客户端代码中，我们可以简单地传递一个不同的变量，而不需要构造一个全新的查询。 这通常也是一个好的做法，表示我们的查询中的哪些参数预期是动态的 - 我们不应该使用字符串插值来从用户提供的值构造查询。</p>
<h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>变量定义是上面查询中的（<code>$episode：Episode</code>）部分。 它的作用就像类型语言中函数的参数定义一样。 它列出所有变量，前缀为$，后跟其类型（当前为<code>Episode</code>）。</p>
<p>所有声明的变量必须是标量，枚举或输入对象类型。 因此，如果要将复杂对象传递到字段中，则需要知道在服务器上匹配的输入类型。 在“架构”页面上了解有关输入对象类型的更多信息。</p>
<p>变量定义可以是可选的或必需的。 在上面的情况下，因为没有！ 在Episode类型后面，所以它是可选的。 但是，如果要将变量传递给需要非空参数的字段，那么该变量也必须是必需的。</p>
<p>要了解有关这些变量定义的语法的更多信息，学习GraphQL模式语言非常有用。 模式语言在Schema页面中有详细的说明。</p>
<h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><p>可以在变量的类型声明后面添加该变量的默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query HeroNameAndFriends($episode: Episode = &quot;JEDI&quot;) &#123;</span><br><span class="line">  hero(episode: $episode) &#123;</span><br><span class="line">    name</span><br><span class="line">    friends &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="操作名（Operation-name）"><a href="#操作名（Operation-name）" class="headerlink" title="操作名（Operation  name）"></a>操作名（Operation  name）</h2><p>从上面的查询例子我们可以看到一个<code>HeroNameAndFriends</code>的操作名。但到目前为止，我们大部分是在速记语法，省略查询关键字和查询名称，但在生产中，这钟写法会使我们的代码不明确。</p>
<p>想想这就像你最喜欢的编程语言中的函数名。 例如，在JavaScript中，我们可以轻松地使用匿名函数，但是当我们给一个函数一个名字时，跟踪它更容易，调试我们的代码，并在被调用时记录。 以同样的方式，GraphQL查询和变量名称以及片段名称可以作为服务器端的一个有用的调试工具来识别不同的GraphQL请求。</p>
<h2 id="指令（Directives）"><a href="#指令（Directives）" class="headerlink" title="指令（Directives）"></a>指令（Directives）</h2><p>我们上面讨论了变量如何使我们避免进行手动字符串插值来构造动态查询。 在参数中传递变量解决了这些问题的一部分，但是我们也可能需要一种使用变量来动态地更改查询的结构和形状的方法。 例如，我们可以想象一个UI组件，它具有一个总结和详细的视图，其中一个包含比另一个更多的字段。让我们来为这样的组件构建一个查询语句：</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query Hero($episode: Episode, $withFriends: Boolean!) &#123;</span><br><span class="line">  hero(episode: $episode) &#123;</span><br><span class="line">    name</span><br><span class="line">    friends @include(if: $withFriends) &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>variables</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"episode"</span>: <span class="string">"JEDI"</span>,</span><br><span class="line">  <span class="attr">"withFriends"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>尝试编辑上面的变量（比如将<code>true</code>传给<code>withFriends</code>），看看结果如何变化。</p>
<p>我们需要在GraphQL中使用一个新功能，称为一个指令。 一个指令可以附加到字段或片段包含，并且可以以服务器的任何方式影响查询的执行。 核心GraphQL规范仅包含两个指令，这些指令必须由任何符合规范的GraphQL服务器实现支持：</p>
<ul>
<li><code>@include(if: Boolean)</code> 仅当参数为<code>true</code>时返回结果才包括这个字段</li>
<li><code>@skip(if: Boolean)</code> 当参数为<code>true</code>时跳过这个字段</li>
</ul>
<p>指令可用于摆脱需要执行字符串操作以在查询中添加和删除字段的情况。 服务器实现也可以通过定义全新的指令来添加实验功能。</p>
<h2 id="修改（Mutations）"><a href="#修改（Mutations）" class="headerlink" title="修改（Mutations）"></a>修改（Mutations）</h2><p>大多数关于GraphQL的讨论集中于数据获取，但是任何完整的数据平台也需要一种修改服务器端数据的方法。</p>
<p>在REST中，任何请求可能会导致在服务器上造成一些副作用，但按照惯例，建议不要使用GET请求来修改数据。 GraphQL是类似的：技术上任何查询都可以被实现来进行数据写入。 但是，建立一个约定，任何导致写入的操作都应该通过修改操作显式发送。</p>
<p>就像查询一样，如果修改字段返回一个对象类型，可以要求嵌套字段。 这可以在更新后获取对象的新状态。 我们来看一个简单的例子：</p>
<ul>
<li><p>mutation</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123;</span><br><span class="line">  createReview(episode: $ep, review: $review) &#123;</span><br><span class="line">    stars</span><br><span class="line">    commentary</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>varialbes</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ep"</span>: <span class="string">"JEDI"</span>,</span><br><span class="line">  <span class="attr">"review"</span>: &#123;</span><br><span class="line">    <span class="attr">"stars"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"commentary"</span>: <span class="string">"This is a great movie!"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"createReview"</span>: &#123;</span><br><span class="line">      <span class="attr">"stars"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"commentary"</span>: <span class="string">"This is a great movie!"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注意<code>createReview</code>字段是如何返回新创建的<code>review</code>中的<code>commentary</code>和<code>stars</code>字段的。 这在修改已有字段的时候尤其有用，例如，当增加一个字段时，我们可以通过一个请求来同时修改该字段并查询该字段的新值。</p>
<p>您可能还会注意到，在本示例中，我们传入的评论变量不是标量。 它是一个输入对象类型，可以作为参数传入的特殊种类的对象类型。 详细了解“架构”页面上的输入类型。</p>
<h3 id="修改多个字段"><a href="#修改多个字段" class="headerlink" title="修改多个字段"></a>修改多个字段</h3><p>像查询操作一样，一个修改操作可以包含多个字段，但是两者之间有一个重大的差异：   </p>
<p><strong>查询操作是并行的，而修改操作是串行的</strong></p>
<p>这意味着，如果我们在一个修改操作中两次修改<code>incremenetCredits</code>字段的操作，第一个操作在保证结束后才会执行第二个操作。避免出现竞争情况。</p>
<h2 id="内联片段（inline-Fragments）"><a href="#内联片段（inline-Fragments）" class="headerlink" title="内联片段（inline Fragments）"></a>内联片段（inline Fragments）</h2><p>跟其他类型系统一样，GraphQL也可以定义接口（Interfaces）和联合类型（Union Types）。详情见schema guide</p>
<p>你可以使用内联片段来访问一个接口或者联合类型中所包含的数据。用下面这个例子可以很方便的说明：</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">query HeroForEpisode($ep: Episode!) &#123;</span><br><span class="line">  hero(episode: $ep) &#123;</span><br><span class="line">    name</span><br><span class="line">    ... on Droid &#123;</span><br><span class="line">      primaryFunction</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Human &#123;</span><br><span class="line">      height</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>variables</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ep"</span>: <span class="string">"JEDI"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"primaryFunction"</span>: <span class="string">"Astromech"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在这个查询中，<code>hero</code>字段返回类型为<code>Character</code>，它可能是<code>Human</code>或<code>Droid</code>，这取决于参数<code>episode</code>。 在直接选择中，您只能访问<code>Character</code>接口中存在的字段，如<code>name</code>。</p>
<p>要访问具体类型的字段，您需要使用特定类型（type condition）的内联片段。 第一个片段在<code>Droid</code>上被标记为<code>...</code>，所以只有当从<code>hero</code>返回的<code>Character</code>是<code>Droid</code>类型时，<code>primaryFunction</code>字段才会被执行。 类似于<code>Human</code>类型中的<code>height</code>字段。</p>
<p>命名片段也可以以相同的方式使用，因为命名片段始终包含限定类型。</p>
<h3 id="元字段（Meta-fields）"><a href="#元字段（Meta-fields）" class="headerlink" title="元字段（Meta fields）"></a>元字段（Meta fields）</h3><p>鉴于有些情况下您不知道从GraphQL服务返回的类型，您需要一些方法来确定如何处理客户端上的数据。 GraphQL允许您在查询中的任何位置请求<code>__typename</code>，一个元字段，以获取该点上对象类型的名称。</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  search(text: &quot;an&quot;) &#123;</span><br><span class="line">    __typename</span><br><span class="line">    ... on Human &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Droid &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Starship &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"search"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"__typename"</span>: <span class="string">"Human"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"__typename"</span>: <span class="string">"Droid"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"__typename"</span>: <span class="string">"Starship"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"TIE Advanced x1"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在上述查询中，<code>search</code>返回可以是三个选项之一的联合类型。 在没有<code>__typename</code>字段的情况下，不可能将客户端的不同类型告诉客户端。</p>
<p>GraphQL服务提供了少量的元字段，其余的公开 于“内省”系统。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[体验I3之美]]></title>
      <url>http://lishangying.github.io/2017/03/20/beautifull-i3/</url>
      <content type="html"><![CDATA[<p><img src="https://ol1kreips.qnssl.com/%E6%88%AA%E5%9B%BE_2017-03-13_18-50-11.png" alt="enter description here" title="截图_2017-03-13_18-50-11"><br>先晒张日常桌面图。Gnome3用了半年了一直被其蹩脚的交互和层出不穷的Bug所折磨。虽然Gnome3很漂亮，很简洁，但是毕竟漂亮不能当饭吃。套餐这种东西虽然简单省事，但是终究不是为你所量身定制的，总有其中一样不合你口味。因此，我决定再次抛弃“开箱即用”的DE(Desktop Environment)，在WM(Window Manager)的基础上自己打造一套适合自己的桌面环境。<br><a id="more"></a></p>
<h2 id="i3WM"><a href="#i3WM" class="headerlink" title="i3WM"></a>i3WM</h2><p>i3是一个比较知名的平铺式的窗口管理器（TilingWM），它可以通过快捷键来管理程序窗口，使他们像截图那样平铺在显示屏幕，控制他们的大小和位置。十分高效也有几分Geek的味道。<br>i3的所有配置全部使用shell写成，甚至顶部panel的各种指示器，都由用户自己写的bash脚本获得并显示。十分简单暴力。虽然没有图形界面那么直观，但是有一种一切尽在自己掌控之下的感觉。这种感觉其实是十分十分不错的。<br>我的I3WM配置文件托管在了<a href="https://github.com/stkevintan/i3dotfile" target="_blank" rel="noopener">Github</a>。</p>
<h2 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h2><p>I3配置文件的语法其实跟shell差不多，熟悉Linux的用户应该都能完全看懂。我的配置文件分为几大模块：</p>
<h3 id="Workspaces"><a href="#Workspaces" class="headerlink" title="Workspaces"></a>Workspaces</h3><p>工作区配置，我根据日常使用的程序类别一共设置了10个工作区(图标显示需要在本地电脑上安装Fontawesome字体）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$ws1</span> 	     <span class="string">"1: Browser"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws2</span>         <span class="string">"2: Code"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws3</span> 		 <span class="string">"3: Chat"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws4</span> 		 <span class="string">"4: File"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws5</span> 		 <span class="string">"5: Terminal"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws6</span> 		 <span class="string">"6: Video"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws7</span> 	     <span class="string">"7: Music"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws8</span>  	     <span class="string">"8:  Graphic"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws9</span> 		 <span class="string">"9: Game"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws0</span> 		 <span class="string">"0: Fullscreen"</span></span><br></pre></td></tr></table></figure></p>
<p>然后，把属于各自类别的程序绑定到对应的工作区，这样打开这些程序的时候他们就能自动出现在合适的工作区了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assign 	[class=<span class="string">"google-chrome-stable"</span>] 			<span class="variable">$ws1</span>   <span class="comment"># Browser</span></span><br><span class="line">assign 	[class=<span class="string">"vivaldi"</span>] 						            <span class="variable">$ws1</span>   <span class="comment"># Browser</span></span><br><span class="line">assign 	[class=<span class="string">"firefox"</span>] 					            	<span class="variable">$ws1</span>   <span class="comment"># Browser</span></span><br><span class="line">assign  [class=<span class="string">"(?i)code"</span>]                                <span class="variable">$ws2</span>   <span class="comment"># Code IDE</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">assign  [class=<span class="string">"dota2"</span>]         		                   <span class="variable">$ws0</span>   <span class="comment"># Fullscreen</span></span><br><span class="line">assign	[class=<span class="string">"Minecraft 1.8.9"</span>]		              <span class="variable">$ws0</span>   <span class="comment"># Fullscreen</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>在i3配置文件里面我们可以对常用的程序绑定快捷启动键：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bindsym F10 <span class="built_in">exec</span> xfce4-appfinder</span><br><span class="line">bindsym Print <span class="built_in">exec</span> xfce4-screenshooter</span><br><span class="line"></span><br><span class="line"><span class="comment"># bindsym $mod+Return exec i3-sensible-terminal</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Return <span class="built_in">exec</span> pantheon-terminal</span><br><span class="line"></span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+t <span class="built_in">exec</span> telegram-desktop</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+g <span class="built_in">exec</span> google-chrome-stable</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+v <span class="built_in">exec</span> vivaldi</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+f <span class="built_in">exec</span> nemo</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+c <span class="built_in">exec</span> code</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+n <span class="built_in">exec</span> nitrogen</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+w <span class="built_in">exec</span> electronic-wechat</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+y <span class="built_in">exec</span> youdao-dict</span><br></pre></td></tr></table></figure></p>
<p>然后，对于特殊的不适合平铺的窗口，可以直接设置它们为浮动窗口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for_window [class=<span class="string">"Geany"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"GParted"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"Nitrogen"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"(?i)virtualbox"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"Youdao Dict"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></p>
<p>PS：可以使用<code>xprop|grep WM_CLASS</code>来查看正在运行窗口的class名称。</p>
<h3 id="i3blocks"><a href="#i3blocks" class="headerlink" title="i3blocks"></a>i3blocks</h3><p>i3blocks是I3顶部面板的一个可选组件。它使用ini格式的配置文件，支持多种终端脚本，还支持鼠标点击、滚动事件，十分强大。配置文件样本如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command</span>=~/.config/i3/blocks/<span class="variable">$BLOCK_NAME</span></span><br><span class="line"><span class="attr">align</span>=center</span><br><span class="line"><span class="attr">color</span>=#ffffff</span><br><span class="line"><span class="attr">separator</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">separator_block_width</span>=<span class="number">13</span></span><br><span class="line"><span class="attr">markup</span>=pango</span><br><span class="line"></span><br><span class="line"><span class="section">[disk-home]</span></span><br><span class="line"><span class="attr">label</span>=</span><br><span class="line"><span class="attr">command</span>=~/.config/i3/blocks/disk <span class="variable">$HOME</span></span><br><span class="line"><span class="attr">instance</span>=/home/kevin</span><br><span class="line"><span class="attr">interval</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">color</span>=#FFCC80</span><br><span class="line"></span><br><span class="line"><span class="section">[weather]</span></span><br><span class="line"><span class="attr">instance</span>=<span class="number">1808926</span> # hangzhou<span class="string">'s city code</span></span><br><span class="line"><span class="string">interval=60</span></span><br><span class="line"><span class="string">color=#90CAF9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ...</span></span><br></pre></td></tr></table></figure></p>
<p>主要字段解释：</p>
<ul>
<li>首先前面无section的parameters属于默认配置项，为每个section的缺省配置。  </li>
<li>然后每个section都对应顶栏上面的一个指示器，称为block。  </li>
<li>每个block必须显示一定的数据，可以通过command配置项指定获取数据的命令，并使用interval来设置命令执行周期间隔。</li>
<li>instance为可以传递到command脚本中的环境变量。</li>
<li>color和label为颜色和标签，属于修饰性的配置项。</li>
</ul>
<p>所有可用的block命令可以参考我的配置文件夹：<a href="https://github.com/stkevintan/i3dotfile/tree/master/blocks" target="_blank" rel="noopener">blocks</a></p>
<h3 id="compton"><a href="#compton" class="headerlink" title="compton"></a>compton</h3><p>compton可以给i3带来透明和阴影效果的支持。如果只关心性能而不介意美观与否，你完全可以跳过此节。<br>compton默认是不给顶栏加透明效果的，需要加入如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wintypes:</span><br><span class="line">&#123;</span><br><span class="line">    dock = </span><br><span class="line">    &#123; </span><br><span class="line">        opacity = 0.8;        </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>同时，compton的阴影效果不适用于某些窗口，需要排除它们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shadow-exclude = [</span><br><span class="line">    &quot;name = &apos;Notification&apos;&quot;,</span><br><span class="line">    &quot;name *= &apos;compton&apos;&quot;,</span><br><span class="line">    &quot;class_g = &apos;Conky&apos;&quot;,</span><br><span class="line">    &quot;class_g = &apos;Firefox&apos;&quot;,</span><br><span class="line">    &quot;class_g *= &apos;fcitx&apos;&quot;,</span><br><span class="line">    &quot;class_g = &apos;Youdao Dict&apos;&quot;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<h2 id="易用性建议"><a href="#易用性建议" class="headerlink" title="易用性建议"></a>易用性建议</h2><p>i3WM只是一个地基，我们可以在这之上搭建一个适合自己的环境。每个人的口味都不一样，所以我简单的罗列一下我个人比较喜欢的应用和配置以供参考。</p>
<ul>
<li>dmenu: WM下使用最广泛的应用启动器，可以自动根据用户输入的命令进行提示。</li>
<li>rofi: dmenu的替代品</li>
<li>quickswitch.py:  跨工作区窗口快速跳转工具，可以整合到dmenu中。</li>
<li>xfce4-appfinder:  xfce4的应用程序列表。能够自动搜索文件系统中的desktop文件，并生成应用列表。非常实用的工具。</li>
<li>pantheon-terminal: elementaryOS的默认终端。小巧，依赖少，支持背景透明、多标签，很完美的终端模拟器。（需要使用dconf-editor来修改设置，位置：<code>/org/pantheon/terminal/settings/</code>）</li>
<li>nemo: linuxmint的默认文件管理器，forks自nautilus，但是比nautilus好用得多。（使用之前需要使用dconf-editor设置<code>/org/nemo/desktop/show-desktop-icons</code>为<code>false</code>）</li>
<li>nitrogen: 提供简单的图形界面来设置壁纸并在每次开机之后自动恢复。</li>
<li>clipit: 剪贴板支持</li>
<li>lightdm: 轻量级图形登录界面</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gnome </tag>
            
            <tag> i3wm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos初始化2]]></title>
      <url>http://lishangying.github.io/2017/01/04/CentOS2@1-4/</url>
      <content type="html"><![CDATA[<h2 id="proxychains-ng"><a href="#proxychains-ng" class="headerlink" title="proxychains-ng"></a>proxychains-ng</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng                                 </span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc </span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make install-config   <span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'http 10.100.100.136 4411'</span> &gt;&gt; /etc/proxychains.conf  <span class="comment"># 输入代理设置</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="TMUX"><a href="#TMUX" class="headerlink" title="TMUX"></a>TMUX</h2><p>CentOS的版本太老，手动编译最新版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install ncurses-devel libevent-devel</span><br><span class="line">curl -L https://github.com/tmux/tmux/releases/download/2.3/tmux-2.3.tar.gz | tar xz</span><br><span class="line"><span class="built_in">cd</span> tmux-2.3</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>如果出现<code>protocol version mismatch</code>错误，说明现在tmux正在运行，手动结束掉即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 `pidof tmux`</span><br></pre></td></tr></table></figure>
<h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gpakosz/.tmux.git</span><br><span class="line">ln -s -f .tmux/.tmux.conf</span><br><span class="line">cp .tmux/.tmux.conf.local .</span><br><span class="line">vim .tmux.conf.local <span class="comment">#编辑配置文件</span></span><br><span class="line"><span class="comment"># 去掉status left/right sections separators后面几行的注释（终端字体需要支持Powerline）</span></span><br><span class="line"><span class="comment"># 启用 force vi mode</span></span><br></pre></td></tr></table></figure>
<h3 id="shortcuts"><a href="#shortcuts" class="headerlink" title="shortcuts"></a>shortcuts</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Session</span></span><br><span class="line">:new[-s name]  <span class="comment"># new session</span></span><br><span class="line">:<span class="built_in">kill</span>-session[-t name] <span class="comment"># kill session</span></span><br><span class="line">:ls <span class="comment"># list sessions</span></span><br><span class="line">C-c <span class="comment"># new session</span></span><br><span class="line">s  <span class="comment"># list and select sessions</span></span><br><span class="line">$  <span class="comment"># name session</span></span><br><span class="line"></span><br><span class="line">==============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># Window</span></span><br><span class="line">c  <span class="comment"># create window</span></span><br><span class="line">w  <span class="comment"># list windows</span></span><br><span class="line">n  <span class="comment"># next window</span></span><br><span class="line">p  <span class="comment"># previous window</span></span><br><span class="line">f  <span class="comment"># find window</span></span><br><span class="line">,  <span class="comment"># name window</span></span><br><span class="line">&amp;  <span class="comment"># kill window</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># Panes</span></span><br><span class="line">%  <span class="comment">#vertical split</span></span><br><span class="line"><span class="string">"  # horizontal split</span></span><br><span class="line"><span class="string">o  # swap panes</span></span><br><span class="line"><span class="string">q  # show pane numbers</span></span><br><span class="line"><span class="string">x  # kill pane</span></span><br><span class="line"><span class="string">+  # 最大化pane，再按一次还原</span></span><br><span class="line"><span class="string">-  # restore pane from window</span></span><br><span class="line"><span class="string">⍽  # space - toggle between layouts</span></span><br><span class="line"><span class="string">q  # (Show pane numbers, when the numbers show up type the key to goto that pane)</span></span><br><span class="line"><span class="string">&#123;  # (Move the current pane left)</span></span><br><span class="line"><span class="string">&#125;  # (Move the current pane right)</span></span><br><span class="line"><span class="string">z  # toggle pane zoom</span></span><br><span class="line"><span class="string">方向键 # select the sibling pane</span></span><br><span class="line"><span class="string">C-方向键 # resize current pane</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">================================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Misc</span></span><br><span class="line"><span class="string">d  # detach</span></span><br><span class="line"><span class="string">t  # big clock</span></span><br><span class="line"><span class="string">?  # list shortcuts</span></span><br><span class="line"><span class="string">:  # prompt</span></span><br></pre></td></tr></table></figure>
<h3 id="Tmux-Plugin-Manager-amp-amp-tmux-yank"><a href="#Tmux-Plugin-Manager-amp-amp-tmux-yank" class="headerlink" title="Tmux Plugin Manager &amp;&amp; tmux-yank"></a>Tmux Plugin Manager &amp;&amp; tmux-yank</h3><p>tmux-yank可以将tmux的paste-buffer中的文字拷贝到系统剪贴板</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yumi xclip <span class="comment"># 安装依赖</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm </span><br><span class="line">vim .tmux.conf <span class="comment"># 在最后添加下面几行，注意不是 .tmux.conf.local!!!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List of plugins</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-yank'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)</span></span><br><span class="line">run <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br></pre></td></tr></table></figure>
<p>然后，重新加载tmux，按<prefix> + I 安装<code>tmux-yank</code>插件</prefix></p>
<p>然后，并不能奏效，因为xclip需要有X服务。然而ssh客户端Centos只是纯命令行。需要开启<code>X11Forwarding</code></p>
<h2 id="X11Forwarding"><a href="#X11Forwarding" class="headerlink" title="X11Forwarding"></a>X11Forwarding</h2><ol>
<li><p>在远程Centos中的<code>/etc/ssh/ssh_config</code>文件中，添加<code>X11Forwarding yes</code></p>
</li>
<li><p>在远程Centos中安装认证软件：<code>yumi xorg-x11-xauth</code></p>
</li>
<li><p>在本地ssh连接命令添加<code>-Y</code>参数</p>
<p>启用x11转发之后就可以在Centos中启动x11程序了，可以安装轻量级的xfce4-terminal方便操作。</p>
</li>
</ol>
<h2 id="Prezto"><a href="#Prezto" class="headerlink" title="Prezto"></a>Prezto</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  git <span class="built_in">clone</span> --recursive https://github.com/sorin-ionescu/prezto.git <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.zprezto"</span></span><br><span class="line">rm -rf .zshrc .zpreztorc .zlogin .zlogout .zprofile .zshenv .zhistory .zcompdump</span><br><span class="line"><span class="built_in">setopt</span> EXTENDED_GLOB</span><br><span class="line"><span class="keyword">for</span> rcfile <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>"</span>/.zprezto/runcoms/^README.md(.N); <span class="keyword">do</span></span><br><span class="line">  ln -s <span class="string">"<span class="variable">$rcfile</span>"</span> <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.<span class="variable">$&#123;rcfile:t&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题列表</span></span><br><span class="line">prompt -l</span><br><span class="line"><span class="comment"># 预览主题</span></span><br><span class="line">prompt -p NAME</span><br><span class="line"><span class="comment"># 做个备份</span></span><br><span class="line">mv .zpreztorc .zpreztorc.tmp</span><br><span class="line"><span class="comment"># 添加常用插件(不要第二次运行，而是手动修改.zpreztorc文件)</span></span><br><span class="line">awk -v s=<span class="string">"syntax-highlighting git command-not-found yum history-substring-search autosuggestions"</span> \</span><br><span class="line"><span class="string">'BEGIN&#123;n=split(s,m)&#125;/'</span>\<span class="string">''</span>utility<span class="string">'\'</span><span class="string">'\s+\\/&#123;for(i=1;i&lt;=n;i++)printf("  '</span>\<span class="string">''</span>%s<span class="string">'\'</span><span class="string">' \\\n",m[i])&#125;&#123;print&#125;'</span> .zpreztorc.tmp &gt; .zpreztorc</span><br><span class="line"><span class="comment"># 修改默认主题（推荐 skwp）</span></span><br><span class="line">sed -i <span class="string">"s/\(zstyle.*theme\s\).*/\1'skwp'/"</span> .zpreztorc</span><br></pre></td></tr></table></figure>
<h2 id="Yum-Aliases"><a href="#Yum-Aliases" class="headerlink" title="Yum Aliases"></a>Yum Aliases</h2><ul>
<li><code>yumc</code> removes package(s) and leaves.</li>
<li><code>yumi</code> installs package(s).</li>
<li><code>yumh</code> displays history.</li>
<li><code>yuml</code> lists packages.</li>
<li><code>yumL</code> lists installed packages.</li>
<li><code>yumq</code> displays package information.</li>
<li><code>yumr</code> removes package(s).</li>
<li><code>yums</code> searches for a package.</li>
<li><code>yumu</code> updates packages.</li>
<li><code>yumU</code> upgrades packages.</li>
</ul>
<h2 id="spf13-Vim"><a href="#spf13-Vim" class="headerlink" title="spf13 Vim"></a>spf13 Vim</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> tmux </tag>
            
            <tag> prezto </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FFT求快速卷积的思考]]></title>
      <url>http://lishangying.github.io/2014/11/06/fft-thoughts/</url>
      <content type="html"><![CDATA[<p>离散型卷积的定义是：$$y(n)=\sum_{m=0}^{n} x(m)h(n-m)$$</p>
<p>注意，h函数是反转的。</p>
<p>在Chipher Messages一题中，b串需要反转再与a串匹配。</p>
<p>比如说：</p>
<p>a串： 110110110，则：</p>
<p>b`串：1011&lt;——这里才是原来b串的头。但是向上对应到a串时，已经是m-1这个位置了。所以说，小于m-1的卷积是没有意义的。</p>
<p>于是，base=m。整体匹配。<br><a id="more"></a></p>
<p>同样的，比如杭电1402用FFT求A×B那一题。</p>
<p>可以把A串看成卷积中的x函数，而把B串的<strong>每一个字符</strong>看成h函数。那么卷积就可以看成是一个模拟乘法的过程。</p>
<p>因为h函数是要求逆序的，但是此时的h函数只有<strong>一个字符</strong>所以反转操作无意义。这时候的base=1。单个匹配。</p>
<p>估计FFT就这两种情况了。因为如果1&lt;base&lt;m，那么就应该直接将b串分解成若干base长度的串了。</p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 只言片语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github使用札记]]></title>
      <url>http://lishangying.github.io/2014/08/10/github-tips/</url>
      <content type="html"><![CDATA[<ol>
<li><p>生成ssh key:</p>
<pre><code>ssh-keygen -t rsa -C &quot;stkevintan@foxmail.com&quot;
</code></pre><p> 输入合适的密码。然后将生成的pub公钥粘贴到github上：<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">click here</a></p>
</li>
<li><p>版本推送命令：<a id="more"></a></p>
<pre><code>### Create a new repository on the command line

    touch README.md
    git init
    git add README.md
    git commit -m &quot;first commit&quot;
    git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;
    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;`&lt;/pre&gt;

    ### Push an existing repository from the command line

    &lt;pre&gt;`git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;
    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;
</code></pre></li>
<li>修改或删除passphrase。(<a href="https://help.github.com/articles/working-with-ssh-key-passphrases/" target="_blank" rel="noopener">Details</a>)<pre><code>ssh-keygen -p
</code></pre></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
