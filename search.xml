<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《C和指针》基础]]></title>
      <url>http://lishangying.github.io/2017/12/13/%E3%80%8Ac%E5%92%8C%E6%8C%87%E9%92%88%E3%80%8B%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>@(关键词)[数据|语句|操作符]</p>
<h4 id="1-字符：普通、转义、三字母"><a href="#1-字符：普通、转义、三字母" class="headerlink" title="1.字符：普通、转义、三字母"></a>1.字符：普通、转义、三字母</h4><p>如图，三字母字符：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p05jnww1u.bkt.gdipper.com/17-12-13/23053349.jpg" alt="三字母字符" title="三字母字符">
                </div>
                <div class="image-caption">三字母字符</div>
            </figure></p>
<h4 id="2-标识符不能以数字开头"><a href="#2-标识符不能以数字开头" class="headerlink" title="2.标识符不能以数字开头"></a>2.标识符不能以数字开头</h4><p>否则，下句就混乱了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="number">2</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-const"><a href="#3-const" class="headerlink" title="3.const"></a>3.const</h4><ul>
<li><strong>只读变量</strong> ：非常量，在内存中；</li>
<li><strong>类型检查</strong> ：优于#define，主动进行不一致检查；</li>
<li><strong>保护修改</strong> ：避免手误赋值；</li>
<li><strong>函数重载</strong> ：c++；</li>
<li><strong>指针相关</strong> ：避免手误赋值；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p;	    <span class="comment">//p可变，p指向的内容不可变</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span>* p; 		<span class="comment">//p可变，P指向的内容不可变</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p; 		<span class="comment">//p不可变,p指向的内容可变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p; <span class="comment">//p,p指向的内容均不可变</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="4-枚举"><a href="#4-枚举" class="headerlink" title="4.枚举"></a>4.枚举</h4><p>默认从0开始，可以是负数；<br>默认+1，可以间接；</p>
<h4 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5.字符串"></a>5.字符串</h4><p>以NUL字节结尾，但并不属于字符串，并且占一个字节，如“Hello”在内存中占6个字节，H,e,l,l,o,和NUL；<br>NULL表示空指针；<br>NULL指向一个其值为0的指针。NULL和NUL都是整形，值也相同，所以他们互相可以换着使用；</p>
<h4 id="6-typedef"><a href="#6-typedef" class="headerlink" title="6.typedef"></a>6.typedef</h4><p>用于给一个已经存在的数据类型重命名；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* ptr_to_char;<span class="comment">//</span></span><br><span class="line">ptr_to_char a;			  <span class="comment">//声明a是一个指向字符的指针</span></span><br></pre></td></tr></table></figure></p>
<p>数据类型重命名typedef优于define：后者无法正确处理指针类型；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> d_ptr_to_char char*</span></span><br><span class="line">d_ptr_to_char a,b;<span class="comment">//a是指针，b是字符</span></span><br></pre></td></tr></table></figure></p>
<h4 id="7-赋值语句"><a href="#7-赋值语句" class="headerlink" title="7.赋值语句"></a>7.赋值语句</h4><p>下列语句中认为a和x被赋予相同的值是不正确的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=x=y+<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>如果x是一个字符型变量，a和y是整型，那么a的值是截断后的值；</p>
<h4 id="8-sizeof"><a href="#8-sizeof" class="headerlink" title="8.sizeof"></a>8.sizeof</h4><p>操作符，字节；</p>
<pre><code class="c"><span class="keyword">sizeof</span>(数组名)=n*<span class="keyword">sizeof</span>(数组[<span class="number">0</span>]);
<span class="keyword">sizeof</span>(<span class="keyword">int</span>);         <span class="comment">//取决于环境</span>
<span class="keyword">sizeof</span>(a=b+<span class="number">1</span>);
</code></pre>
<h4 id="9-移位"><a href="#9-移位" class="headerlink" title="9.移位"></a>9.移位</h4><p>有符号值的右移位操作是不可移植的；<br>移位操作的位数不能是负数（异常）；</p>
<h4 id="10-整型大小取决于环境"><a href="#10-整型大小取决于环境" class="headerlink" title="10.整型大小取决于环境"></a>10.整型大小取决于环境</h4><p>长整型至少应该和整型一样长，而整形至少应该比短整型一样长；</p>
<h4 id="11-数组长度"><a href="#11-数组长度" class="headerlink" title="11.数组长度"></a>11.数组长度</h4><p>当传递一个数组时，可以无需指定数组的长度（如果需要长度，则需要再增加一个长度的参数）；</p>
<pre><code class="c"><span class="function"><span class="keyword">int</span>  <span class="title">read</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span>;
</code></pre>
<h4 id="12-signed关键字"><a href="#12-signed关键字" class="headerlink" title="12.signed关键字"></a>12.signed关键字</h4><p>signed关键字一般只用于char类型，因为其他类型在缺省情况下都是有符号数；<br>至于char是否是signed，则因编译器而异。所以，char可能等于signed char，也可能等于unsigned char。</p>
]]></content>
      
        
        <tags>
            
            <tag> a </tag>
            
            <tag> b </tag>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GraphQL Learn (4) - Execution]]></title>
      <url>http://lishangying.github.io/2017/08/15/GraphQL%20Learn%20(4)%20-%20Execution/</url>
      <content type="html"><![CDATA[<p>经过验证，GraphQL查询由GraphQL服务器执行，然后返回一个与查询形状相同的结果，通常为JSON。</p>
<p>GraphQL无法执行没有类型系统的查询，让我们使用类型系统例子来说明执行查询，这个例子是我们教程中使用的类型系统中的一部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">  human(id: ID!): Human</span><br><span class="line">&#125;</span><br><span class="line">type Human &#123;</span><br><span class="line">  name: String</span><br><span class="line">  appearsIn: [Episode]</span><br><span class="line">  starships: [Starship]</span><br><span class="line">&#125;</span><br><span class="line">enum Episode &#123;</span><br><span class="line">  NEWHOPE</span><br><span class="line">  EMPIRE</span><br><span class="line">  JEDI</span><br><span class="line">&#125;</span><br><span class="line">type Starship &#123;</span><br><span class="line">  name: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>为了解释执行查询语句时系统发生了什么，我们用下面的例子了跑一遍：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  human(id: 1002) &#123;</span><br><span class="line">    name</span><br><span class="line">    appearsIn</span><br><span class="line">    starships &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"human"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Han Solo"</span>,</span><br><span class="line">      <span class="attr">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"starships"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Millenium Falcon"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Imperial shuttle"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您可以将GraphQL查询中的每个字段视为返回下一个类型的类型函数或方法。 事实上，这正是GraphQL的工作原理。 每个类型的每个字段由GraphQL服务器开发人员提供的称为解析器 <em>resolver</em> 的函数支持。 当一个字段被执行时，相应的解析器被调用以产生下一个值。</p>
<p>如果一个字段产生一个标量值，如字符串或数字，则执行完成。 但是，如果一个字段产生一个对象值，则该查询将应用于他的子字段。 这样一直迭代到标量值。 GraphQL查询始终以标量值结束。</p>
<h2 id="根字段和解析器（Root-fields-amp-resolvers）"><a href="#根字段和解析器（Root-fields-amp-resolvers）" class="headerlink" title="根字段和解析器（Root fields &amp; resolvers）"></a>根字段和解析器（Root fields &amp; resolvers）</h2><p>每个GraphQL服务器的最顶层是一个特殊的类型，表示GraphQL API中所有可能入口点，通常称为根类型（Root type）或查询类型(Query type)。</p>
<p>在这个例子中，我们的查询类型提供了一个接受参数<code>id</code> 的<code>human</code>字段。此字段的解析函数可能通过访问数据库来构造并返回一个<code>Human</code>对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Query: &#123;</span><br><span class="line">  human(obj, args, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.db.loadHumanByID(args.id).then(</span><br><span class="line">      userData =&gt; <span class="keyword">new</span> Human(userData)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该示例使用JavaScript编写，但是GraphQL服务器可以使用许多<a href="http://graphql.org/code/" target="_blank" rel="noopener">不同的语言</a>构建。 解析器函数接收三个参数：</p>
<ul>
<li><code>obj</code> 前一个对象，对于查询类型（Query type）中的字段来说不常用。</li>
<li><code>args</code> GraphQL提供的参数。</li>
<li><code>context</code> 提供给每个解析器并保存重要的上下文信息（如当前登录的用户、访问数据库）的值。<h2 id="异步解析器（Asynchronous-resolvers）"><a href="#异步解析器（Asynchronous-resolvers）" class="headerlink" title="异步解析器（Asynchronous resolvers）"></a>异步解析器（Asynchronous resolvers）</h2>我们来仔细看看这个解析器函数发生了什么：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">human(obj, args, context) &#123;</span><br><span class="line">  <span class="keyword">return</span> context.db.loadHumanByID(args.id).then(</span><br><span class="line">    userData =&gt; <span class="keyword">new</span> Human(userData)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>context</code>用于提供对数据库的访问，通过GraphQL查询提供的参数<code>id</code>来向数据库查询数据。 由于数据库查询是异步操作，所以返回一个Promise。 在JavaScript中，Promises用于处理异步值，但是在许多语言中都存在相同的概念，通常称为 <em>Futures</em> ， <em>Tasks</em> 或 <em>Deferred</em> 。 当数据库返回时，我们可以构造并返回一个新的 <em>Human</em> 对象。</p>
<p>另外，虽然解析器函数需要留意Promises的使用，但是GraphQL查询不会。 在执行期间，GraphQL将等待Promises/Futures和Tasks完成，然后继续，并以最佳并发方式执行此操作。</p>
<h2 id="微型解析器（Trivial-resolvers）"><a href="#微型解析器（Trivial-resolvers）" class="headerlink" title="微型解析器（Trivial resolvers）"></a>微型解析器（Trivial resolvers）</h2><p>至此，我们已经得到了<code>Human</code>对象，GraphQL将在这个对象内所要求的字段中继续执行。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Human: &#123;</span><br><span class="line">  name(obj, args, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GraphQL服务由类型系统组成，它能够帮助服务确定下一步做什么的。 即使在<code>human</code>字段返回之前，GraphQL知道下一步将是解决<code>Human</code>中的字段，因为类型系统告诉<code>human</code>字段将返回一个<code>Human</code>。</p>
<p>上面代码中的名称解析是很直接的。 调用名称解析函数，然后obj参数来自于上一个字段返回的新的<code>Human</code>对象。 我们期望<code>Human</code>对象有一个<code>name</code>属性，我们可以直接读取并返回。</p>
<p>实际上，许多GraphQL库可以让你省略这个简单的解决方案，一个约定：假如一个字段没有提供解析函数，那么应该读取和返回同名的属性。</p>
<h2 id="标量强转（Scalar-coercion）"><a href="#标量强转（Scalar-coercion）" class="headerlink" title="标量强转（Scalar coercion）"></a>标量强转（Scalar coercion）</h2><p>当<code>name</code>字段正在解析时，<code>appearsIn</code>和<code>starships</code>字段也可以同时进行解析。 <code>appearsIn</code>字段也可以有一个微型解析器，但是让我们进一步了解一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Human: &#123;</span><br><span class="line">  appearsIn(obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.appearsIn <span class="comment">// returns [ 4, 5, 6 ]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，我们的类型系统声明<code>appearsIn</code>将返回一直枚举值中的一个，但此函数却返回数字！实际上，如果我们查看结果，我们将看到正在返回适当的枚举值。 这是怎么回事？</p>
<p>这是标量强转的一个例子。 类型系统知道期望的类型并将解析器函数返回的值转换为API约定中的内容。 在例子中，我们的服务器上可能会定义一个Enum，它在内部使用数字比如4,5和6，但在GraphQL类型系统中将它们表示为枚举值。</p>
<h2 id="列表解析器（List-resolvers）"><a href="#列表解析器（List-resolvers）" class="headerlink" title="列表解析器（List resolvers）"></a>列表解析器（List resolvers）</h2><p>之前我们已经看到了<code>appearsIn</code>字段返回列表的情况，因为这是系统期望的类型，列表中的每个项将被被强转为对应的枚举类型。 当<code>starships</code>解析时会发生什么？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Human: &#123;</span><br><span class="line">  starships(obj, args, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.starshipIDs.map(</span><br><span class="line">      id =&gt; context.db.loadStarshipByID(id).then(</span><br><span class="line">        shipData =&gt; <span class="keyword">new</span> Starship(shipData)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该字段的解析器不是单单返回一个Promise，它返回了一个Promises列表。 <code>Human</code>对象有他们驾驶的<code>Starships</code>的id列表，但是我们需要通过所有这些id来获得真正的<code>Starship</code>对象。</p>
<p>GraphQL将在继续之前同时等待所有这些Promises，并且当剩下一个对象列表时，它将同时继续加载每个这些项目上的<code>name</code>字段。</p>
<h2 id="产出结果（Producing-the-result）"><a href="#产出结果（Producing-the-result）" class="headerlink" title="产出结果（Producing the result）"></a>产出结果（Producing the result）</h2><p>当每个字段被解析时，结果值被放置到键值映射中，字段名称（或别名）作为键，解析出来的值作为值，这这过程从查询底部叶子节点的字段往上直到原始字段的根查询类型。 总而言之，它们产生一个镜像的原始查询结构，然后可以将其发送（通常为JSON）到请求的客户端。</p>
<p>我们来看看最初的查询，看看这些解析函数如何产生一个结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  human(id: 1002) &#123;</span><br><span class="line">    name</span><br><span class="line">    appearsIn</span><br><span class="line">    starships &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"human"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Han Solo"</span>,</span><br><span class="line">      <span class="attr">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"starships"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Millenium Falcon"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Imperial shuttle"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GraphQL Learn (2) - Schemas and Types]]></title>
      <url>http://lishangying.github.io/2017/08/15/GraphQL%20Learn%20(2)%20-%20Schemas%20and%20Types/</url>
      <content type="html"><![CDATA[<p>在此页面上，您将了解有关GraphQL类型系统的所有知识，以及如何描述可查询哪些数据。 由于GraphQL可以与任何后端框架或编程语言一起使用，因此我们将远离实现特定的详细信息，仅讨论概念。</p>
<h3 id="类型系统（Type-System）"><a href="#类型系统（Type-System）" class="headerlink" title="类型系统（Type System）"></a>类型系统（Type System）</h3><p>如果您以前看过GraphQL查询，那么你应该知道GraphQL查询语言基本上是在对象上选择字段。 所以在以下查询中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">    appearsIn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>从一个特殊的 “root”对象开始</li>
<li>在它里面选择一个<code>hero</code>字段</li>
<li>在<code>hero</code>返回的对象中，我们继续选择 <code>name</code> 和 <code>appearsIn</code> 字段</li>
</ol>
<p>因为GraphQL查询的形状与结果非常相似，所以您可以预测什么是查询将返回，而不必关心服务器的设置。 但是我们还是需要对我们所请求的数据进行详细的描述： </p>
<ul>
<li>我们可以选择哪些字段？ </li>
<li>他们可能返回什么样的对象？ </li>
<li>这些子对象里面包含哪些字段？ </li>
</ul>
<p>这就是schema所需要解决的问题。</p>
<p>每个GraphQL服务定义一组完全描述可以在该服务上查询的可能数据的类型。 然后，当收到查询时，它们将根据该架构进行验证和执行。.</p>
<h3 id="类型语句（Type-language）"><a href="#类型语句（Type-language）" class="headerlink" title="类型语句（Type language）"></a>类型语句（Type language）</h3><p>GraphQL服务可以用任何语言编写。我们不能依赖特定的编程语言语法（如JavaScript），因此我们将使用“GraphQL schema 语言” ，它类似于查询语言，并允许我们以语言无关的方式谈论GraphQL的架构。</p>
<h3 id="对象的类型和字段（Object-types-and-fields）"><a href="#对象的类型和字段（Object-types-and-fields）" class="headerlink" title="对象的类型和字段（Object types and fields）"></a>对象的类型和字段（Object types and fields）</h3><p>GraphQL的最基本的组件是对象类型，表示你可以从服务中获取的一种对象，以及它具有哪些字段。 在GraphQL schema语言中，我们可以这样表示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Character &#123;</span><br><span class="line">  name: String!</span><br><span class="line">  appearsIn: [Episode]!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可读性已经很高了，但是让我们再过一遍，以便于让我们在细节上拥有共同的语言：</p>
<ul>
<li><code>Character</code>是一个对象类型，大多数情况下，schema里面的type都是一个对象</li>
<li><code>name</code>和<code>appearsIn</code>是<code>Character</code>中的字段。意味着在任何查询包含<code>Character</code> 类的时候<code>name</code>和<code>appearsIn</code>是仅有且必须出现在其中的字段</li>
<li><code>String</code>是内置的标量类型之一，标量是GraphQL中的最小的类型，不能再做子选择了。 我们会稍后再看标量类型。</li>
</ul>
<ul>
<li><code>String!</code>代表着这个字段是不为空的，GraphQL服务保证在这个字段上返回一个不为空的值。</li>
<li><code>[Episode]!</code>代表着一个包含<code>Episode</code>对象的数列，它也是不为空的，因此当你查询<code>appearsIn</code>字段时，GraphQL永远会返回一个数组，即使是一个空数组。</li>
</ul>
<p>现在，您知道GraphQL对象类型是什么样子了，并且掌握了如何读取GraphQL类型语言的基础知识。</p>
<h3 id="参数（Arguments）"><a href="#参数（Arguments）" class="headerlink" title="参数（Arguments）"></a>参数（Arguments）</h3><p>GraphQL对象类型上的每个字段都可以有零个或多个参数，例如下面的<code>length</code>字段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Starship &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  name: String!</span><br><span class="line">  length(unit: LengthUnit = METER): Float</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有参数都是有命名的。与JavaScript和Python这样的语言不同，函数采用有序参数列表，GraphQL中的所有参数都是通过名称进行传递。上面例子中，<code>length</code>字段有一个定义的参数，<code>unit</code>。</p>
<p>参数可以是必需的或可选的。当参数是可选的时候，我们可以定义一个默认值 。上面例子中，如果<code>unit</code>参数没有被传递，默认情况下它将被设置为<code>METER</code>。</p>
<h3 id="Query和Mutation类型（The-Query-and-Mutation-types）"><a href="#Query和Mutation类型（The-Query-and-Mutation-types）" class="headerlink" title="Query和Mutation类型（The Query and Mutation types）"></a>Query和Mutation类型（The Query and Mutation types）</h3><p>schema中的大多数类型将只是普通对象类型，但其中有两种特殊的类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">schema &#123;</span><br><span class="line">  query: Query</span><br><span class="line">  mutation: Mutation</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个GraphQL服务都有一个<code>query</code>类型，但可能有也可能没有<code>mutation</code>类型。 这些类型与常规对象类型相同，但它们是特殊的，因为它们定义了每个GraphQL查询的入口点。 所以如果你看到一个查询：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">  droid(id: &quot;2000&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"droid"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"C-3PO"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这意味着GraphQL服务需要一个具有<code>hero</code>和<code>droid</code>字段的<code>query</code>类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">  hero(episode: Episode): Character</span><br><span class="line">  droid(id: ID!): Droid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Mutation</code>相同，您可以定义<code>Mutation</code>类型上的字段，这些字段就是你能变更的根字段。</p>
<p>重要的是要记住，除了作为模式的“入口点”的特殊状态之外，“查询和变更”类型与任何其他GraphQL对象类型相同，它们的字段的工作方式完全相同。</p>
<h3 id="标量类型（Scalar-types）"><a href="#标量类型（Scalar-types）" class="headerlink" title="标量类型（Scalar types）"></a>标量类型（Scalar types）</h3><p>GraphQL对象类型具有名称和字段，但在某些时候，这些字段必须解析为某些具体数据。 这就是标量类型的来历：它们代表查询最低端的叶子节点。下面查询中，<code>name</code>和<code>appearsIn</code>将会被解析为标量类型（因为这两个字段没有任何子字段，他们是本次查询的叶子节点）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">    appearsIn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GraphQL默认自带了一些变量类型：</p>
<ul>
<li><code>Int</code>: 带符号32位的整数.</li>
<li><code>Float</code>: 带符号的双精度浮点数.</li>
<li><code>String</code>: UTF-8的字符串.</li>
<li><code>Boolean</code>: <code>true</code> 或<code>false</code>.</li>
<li><code>ID</code>: ID标量类型表示一个唯一的标识，通常用于重新获取对象或作为缓存中的键。 ID类型其实就是String类型; 然而将其定义为ID表示它是没有可读性的。</li>
</ul>
<p>在大多数GraphQL服务实现中，还有一种方法来自定义标量类型。 例如，我们可以定义一个日期类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scalar Date</span><br></pre></td></tr></table></figure>
<p>然后由我们的自己来实现该自定义类型如何序列化，反序列化和验证。 例如，您可以指定Date类型应始终序列化为整数时间戳，并且让你的客户端也知道该格式。</p>
<h3 id="枚举类型（Enumeration-types）"><a href="#枚举类型（Enumeration-types）" class="headerlink" title="枚举类型（Enumeration types）"></a>枚举类型（Enumeration types）</h3><p>也称为枚举（ <em>Enums</em> ），枚举类型是一种特殊类型的标量，仅限于一组特定的允许值。 这样你可以：</p>
<ol>
<li>验证此类型的任何参数是允许的值之一</li>
<li>通过类型系统沟通一个字段永远是一组有限的值</li>
</ol>
<p>以下是GraphQL Schema语言中的枚举定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Episode &#123;</span><br><span class="line">  NEWHOPE</span><br><span class="line">  EMPIRE</span><br><span class="line">  JEDI</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这意味着无论何时我们在Schema中使用<code>Episode</code>类型时，其对应的值永远都是<code>NEWHOPE</code>, <code>EMPIRE</code>,  <code>JEDI</code>中间的一个。</p>
<p>请注意，各种语言的GraphQL服务实现将以自己的语言特定方式来处理枚举。 以支持枚举作“为一流公民”的语言，某些实现可能会利用这一点; 在没有枚举支持的JavaScript语言中，这些值可能在内部映射到一组整数。 但是，这些细节不会泄露给客户端，客户端可以完全按照枚举值的字符串名称进行操作。</p>
<h3 id="列表和非空类型（Lists-and-Non-Null）"><a href="#列表和非空类型（Lists-and-Non-Null）" class="headerlink" title="列表和非空类型（Lists and Non-Null）"></a>列表和非空类型（Lists and Non-Null）</h3><p>对象类型，标量和枚举是GraphQL中唯一可以定义的类型。 但是当您在Schema的其他部分或查询变量声明中使用这些类型时，可以使用类型修饰符来影响这些值的验证规则。 我们来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Character &#123;</span><br><span class="line">  name: String!</span><br><span class="line">  appearsIn: [Episode]!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，我们使用一个String类型，并通过在它之后添加一个感叹号将其标记为一个非空类型。 这意味着我们的服务器总是期望为此字段返回一个非空值，如果最终得到一个空值，实际上会触发一个GraphQL执行错误，让客户端知道出现了一些问题。</p>
<p>在定义字段的参数时，也可以使用非空类型修饰符，如果将null值作为该参数传递，则GraphQL服务器将返回验证错误，无论是在GraphQL字符串还是变量中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query DroidById($id: ID!) &#123;</span><br><span class="line">  droid(id: $id) &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Variable \"$id\" of required type \"ID!\" was not provided."</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">17</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>列表以类似的方式工作：我们可以使用类型修饰符将类型标记为List，这表示该字段将返回该类型的数组。 在模式语言中，通过将类型包装在方括号<code>[</code>和<code>]</code>中来表示。 它与参数的表现相同但验证步骤将期望该值的数组。</p>
<p>非空修饰符和列表修饰符可以一起使用，例如，你可以要求一个由非空字符串组成的列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myField: [String!]</span><br></pre></td></tr></table></figure>
<p>这意味着列表本身可以为空，但它不能有任何空的成员。例如，在返回的JSON中：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myField: <span class="literal">null</span> <span class="comment">// valid</span></span><br><span class="line">myField: [] <span class="comment">// valid</span></span><br><span class="line">myField: [<span class="string">'a'</span>, <span class="string">'b'</span>] <span class="comment">// valid</span></span><br><span class="line">myField: [<span class="string">'a'</span>, <span class="literal">null</span>, <span class="string">'b'</span>] <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>现在，让我们定义一个由字符串组成的非空数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myField: [String]!</span><br></pre></td></tr></table></figure>
<p>这意味着列表本身不能为空，但它可以包含空值：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myField: <span class="literal">null</span> <span class="comment">// error</span></span><br><span class="line">myField: [] <span class="comment">// valid</span></span><br><span class="line">myField: [<span class="string">'a'</span>, <span class="string">'b'</span>] <span class="comment">// valid</span></span><br><span class="line">myField: [<span class="string">'a'</span>, <span class="literal">null</span>, <span class="string">'b'</span>] <span class="comment">// valid</span></span><br></pre></td></tr></table></figure>
<p>您可以根据需要随意嵌套任意数量的非空和列表修饰符。</p>
<h3 id="接口（Interfaces）"><a href="#接口（Interfaces）" class="headerlink" title="接口（Interfaces）"></a>接口（Interfaces）</h3><p>像许多类型的系统一样，GraphQL支持接口。 接口是一种抽象类型，它包含一组类型必须包含已实现该接口的字段。</p>
<p>例如，你可以有一个<code>Character</code>接口表示星球大战三部曲中的任何角色：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Character &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  name: String!</span><br><span class="line">  friends: [Character]</span><br><span class="line">  appearsIn: [Episode]!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这意味着，任何实现了<code>Character</code>接口的类型，都必须拥有这些字段，包括他们的参数和返回类型。例如，下面列举了一些实现<code>Character</code>接口的类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Human implements Character &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  name: String!</span><br><span class="line">  friends: [Character]</span><br><span class="line">  appearsIn: [Episode]!</span><br><span class="line">  starships: [Starship]</span><br><span class="line">  totalCredits: Int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Droid implements Character &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  name: String!</span><br><span class="line">  friends: [Character]</span><br><span class="line">  appearsIn: [Episode]!</span><br><span class="line">  primaryFunction: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您可以看到，这两种类型都具有<code>Character</code>接口中的所有字段，还可以引入特定类型字符的额外字段，<code>totalCredits</code>，<code>starships</code>和<code>primaryFunction</code>。</p>
<p>当您要返回一个对象或一组对象时，接口很有用，但这些对象可能有几种不同的类型。</p>
<p>请注意以下查询会产生错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true, &quot;variables&quot;: &#123; &quot;ep&quot;: &quot;JEDI&quot; &#125; &#125;</span><br><span class="line">query HeroForEpisode($ep: Episode!) &#123;</span><br><span class="line">  hero(episode: $ep) &#123;</span><br><span class="line">    name</span><br><span class="line">    primaryFunction</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ep"</span>: <span class="string">"JEDI"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Cannot query field \"primaryFunction\" on type \"Character\". Did you mean to use an inline fragment on \"Droid\"?"</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>hero</code>字段返回字符类型，这意味着它可能是<code>Human</code>或<code>Droid</code>，取决于<code>episode</code>参数。 在上面的查询中，您只能询问<code>Character</code>接口中存在的字段，不包括<code>primaryFunction</code>。</p>
<p>为了得到在一个特定对象类型中的字段，你需要使用内联片段(inline fragment)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query HeroForEpisode($ep: Episode!) &#123;</span><br><span class="line">  hero(episode: $ep) &#123;</span><br><span class="line">    name</span><br><span class="line">    ... on Droid &#123;</span><br><span class="line">      primaryFunction</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ep"</span>: <span class="string">"JEDI"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"primaryFunction"</span>: <span class="string">"Astromech"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="联合类型（Union-types）"><a href="#联合类型（Union-types）" class="headerlink" title="联合类型（Union types）"></a>联合类型（Union types）</h3><p>联合类型与接口非常相似，但它们不能指定类型之间的任何公共字段。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union SearchResult = Human | Droid | Starship</span><br></pre></td></tr></table></figure>
<p>当Schema返回了一个<code>SearchResult</code>类型，我们实际上可能会得到一个<code>Human</code>，一个<code>Droid</code>或者一个<code>Starship</code>。 注意，联合类型的成员需要是具体的对象类型; 您不能在接口或其他联合类型之上再创造一个联合类型。（扁平结构）</p>
<p>在这种情况下，如果查询返回的是<code>SearchResult</code>这样的联合类型字段，则需要使用条件片段才能查询其中的任意子字段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  search(text: &quot;an&quot;) &#123;</span><br><span class="line">    ... on Human &#123;</span><br><span class="line">      name</span><br><span class="line">      height</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Droid &#123;</span><br><span class="line">      name</span><br><span class="line">      primaryFunction</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Starship &#123;</span><br><span class="line">      name</span><br><span class="line">      length</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"search"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Han Solo"</span>,</span><br><span class="line">        <span class="attr">"height"</span>: <span class="number">1.8</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span>,</span><br><span class="line">        <span class="attr">"height"</span>: <span class="number">1.5</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"TIE Advanced x1"</span>,</span><br><span class="line">        <span class="attr">"length"</span>: <span class="number">9.2</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输入类型（Input-types）"><a href="#输入类型（Input-types）" class="headerlink" title="输入类型（Input types）"></a>输入类型（Input types）</h3><p>到目前为止，我们只谈到将标量值（如枚举或字符串）作为参数传递到一个字段中。 但您也可以轻松地传递复杂的对象。 这在变更（Mutation）的情况下特别有价值，在这种情况下，您可能想要传入要创建的整个对象。 在GraphQL Schema语言中，输入类型与常规对象类型完全相同，但使用关键字<code>input</code>而不是<code>type</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input ReviewInput &#123;</span><br><span class="line">  stars: Int!</span><br><span class="line">  commentary: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是如何在变更语句中使用输入类型对象的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123;</span><br><span class="line">  createReview(episode: $ep, review: $review) &#123;</span><br><span class="line">    stars</span><br><span class="line">    commentary</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ep"</span>: <span class="string">"JEDI"</span>,</span><br><span class="line">  <span class="attr">"review"</span>: &#123;</span><br><span class="line">    <span class="attr">"stars"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"commentary"</span>: <span class="string">"This is a great movie!"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"createReview"</span>: &#123;</span><br><span class="line">      <span class="attr">"stars"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"commentary"</span>: <span class="string">"This is a great movie!"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入类型对象上的字段本身可以引用其他输入类型对象，但是您不能在Schema中混合输入和输出类型。 输入类型对象也不能在其字段上有参数。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GraphQL Learn (3) - Validation]]></title>
      <url>http://lishangying.github.io/2017/08/15/GraphQL%20Learn%20(3)%20-%20Validation/</url>
      <content type="html"><![CDATA[<p>通过使用类型系统，可以预先确定GraphQL查询是否有效。 这样可以让服务器和客户端有效地通知开发人员在创建无效查询时，无需在运行时检查。</p>
<p>对于我们的星球大战示例，文件<a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsValidation-test.js" target="_blank" rel="noopener">starWarsValidation-test.js</a>包含许多无效的查询，可以用来测试当前实现的验证器。</p>
<p>首先，我们来看一个复杂的有效查询。 这是一个嵌套查询，类似于上一节的一个示例，但将重复的字段分解成一个片段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    ...NameAndAppearances</span><br><span class="line">    friends &#123;</span><br><span class="line">      ...NameAndAppearances</span><br><span class="line">      friends &#123;</span><br><span class="line">        ...NameAndAppearances</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment NameAndAppearances on Character &#123;</span><br><span class="line">  name</span><br><span class="line">  appearsIn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">          <span class="attr">"appearsIn"</span>: [</span><br><span class="line">            <span class="string">"NEWHOPE"</span>,</span><br><span class="line">            <span class="string">"EMPIRE"</span>,</span><br><span class="line">            <span class="string">"JEDI"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"friends"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"Han Solo"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"C-3PO"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Han Solo"</span>,</span><br><span class="line">          <span class="attr">"appearsIn"</span>: [</span><br><span class="line">            <span class="string">"NEWHOPE"</span>,</span><br><span class="line">            <span class="string">"EMPIRE"</span>,</span><br><span class="line">            <span class="string">"JEDI"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"friends"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span>,</span><br><span class="line">          <span class="attr">"appearsIn"</span>: [</span><br><span class="line">            <span class="string">"NEWHOPE"</span>,</span><br><span class="line">            <span class="string">"EMPIRE"</span>,</span><br><span class="line">            <span class="string">"JEDI"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"friends"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"Han Solo"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"C-3PO"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">              <span class="attr">"appearsIn"</span>: [</span><br><span class="line">                <span class="string">"NEWHOPE"</span>,</span><br><span class="line">                <span class="string">"EMPIRE"</span>,</span><br><span class="line">                <span class="string">"JEDI"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个查询是合法的，让我们看一些非法的查询：</p>
<p>片段不能引用自身或创建一个循环，因为这可能导致无限循环！ 以上是上述相同的查询，但没有弄明白的三层的嵌套关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    ...NameAndAppearancesAndFriends</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment NameAndAppearancesAndFriends on Character &#123;</span><br><span class="line">  name</span><br><span class="line">  appearsIn</span><br><span class="line">  friends &#123;</span><br><span class="line">    ...NameAndAppearancesAndFriends</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Cannot spread fragment \"NameAndAppearancesAndFriends\" within itself."</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">11</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们查询字段时，我们必须查询给定类型上存在的字段。 所以当<code>hereo</code>返回一个<code>Character</code>时，我们必须在一个<code>Character</code>字段上查询，然而该类型没有<code>favoriteSpaceship</code>字段，因此此查询无效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line"># INVALID: favoriteSpaceship does not exist on Character</span><br><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    favoriteSpaceship</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Cannot query field \"favoriteSpaceship\" on type \"Character\"."</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每当我们查询一个字段并返回除标量或枚举之外的东西时，我们需要指定我们想从字段中获取的数据。 <code>hero</code>返回一个<code>Character</code>，而我们一直在请求其中的字段，如<code>name</code>和<code>appearIn</code>; 如果我们忽略，查询将不合法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line"># INVALID: hero is not a scalar, so fields are needed</span><br><span class="line">&#123;</span><br><span class="line">  hero</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Cannot query field \"favoriteSpaceship\" on type \"Character\"."</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似地，如果一个字段是一个标量，查询其中的其他字段就没有意义，这样做会使查询不合法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line"># INVALID: name is a scalar, so fields are not permitted</span><br><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name &#123;</span><br><span class="line">      firstCharacterOfName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Field \"name\" must not have a selection since type \"String!\" has no subfields."</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前，有人指出，查询只能查询有关类型的字段; 当我们查询返回一个<code>Character</code>的<code>hero</code>时，我们只能查询<code>Character</code>上存在的字段。 如果要直接查询R2-D2s的主要功能，会发生什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line"># INVALID: primaryFunction does not exist on Character</span><br><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">    primaryFunction</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Cannot query field \"primaryFunction\" on type \"Character\". Did you mean to use an inline fragment on \"Droid\"?"</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该查询无效，因为<code>primaryFunction</code>不是<code>Character</code>上字段。 我们想要一些判断，如果<code>Character</code>是<code>Droid</code>，则获取primaryFunction，否则忽略该字段。 我们可以使用前面介绍的片段（Fragment）来做到这一点。 通过设置一个在<code>Droid</code>上定义的片段并包含它，我们确保我们只查询已定义的<code>primaryFunction</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">    ...DroidFields</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment DroidFields on Droid &#123;</span><br><span class="line">  primaryFunction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"primaryFunction"</span>: <span class="string">"Astromech"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个查询是合法的，但它有点冗长; 当我们需要多次使用它时，命名片段是有价值的，但是如果我们只使用一次，我们可以直接使用内联片段。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">    ... on Droid &#123;</span><br><span class="line">      primaryFunction</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"primaryFunction"</span>: <span class="string">"Astromech"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上只是验证系统的表面一层，事实上存在这很多验证规则来确保GraphQL查询具有良好的语义和意义。规范中的”Validation”章节有更详细的介绍。<a href="https://github.com/graphql/graphql-js/blob/master/src/validation" target="_blank" rel="noopener">validation</a> 中包含了GraphQL符合规范的代码实现。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GraphQL Learn (1) - Queries and Mutations]]></title>
      <url>http://lishangying.github.io/2017/08/15/GraphQL%20Learn%20(1)%20-%20Queries%20and%20Mutations/</url>
      <content type="html"><![CDATA[<p>在此页面上，你将详细了解如何查询GrahQL服务器。</p>
<h2 id="字段（Fields）"><a href="#字段（Fields）" class="headerlink" title="字段（Fields）"></a>字段（Fields）</h2><p>最简单的，GraphQL是关于要求对象上的特定字段。我们先来看一个非常简单的查询，当我们运行它时得到结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"hero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，查询与结果的形状完全相同。这对于GraphQL是至关重要的，因为您总是收到您期望的内容，并且服务器确切知道客户端要求哪些字段。<br><a id="more"></a><br>字段名返回一个String类型，在这种情况下是星球大战主角“R2-D2”的名称。</p>
<blockquote>
<p>哦，还有一件事: 上面的查询是互动的。这意味着您可以随意更改它，并看到新的结果。尝试在查询中向<code>hero</code>对象添加一个<code>appearIn</code>字段，并查看新结果。</p>
</blockquote>
<p>在前面的例子中，我们只是要求我们返回一个String类型的主角名字，但字段也可以引用对象。在这种情况下，您可以对该对象的字段进行子查询。 GraphQL查询可以遍历相关对象及其字段，让客户端在一个请求中获取大量相关数据，而不是像传统的REST架构中一样需要进行几次往返。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hero &#123;</span><br><span class="line">    name</span><br><span class="line">    # Queries can have comments!</span><br><span class="line">    friends &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"hero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="string">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，在此示例中，<code>friends</code>字段返回一个项目数组。 GraphQL查询对于单个项或多个项列表写法上相同，但是我们根据schema中记录的内容知道预期获得的是哪一种。</p>
<h2 id="参数（Arguments）"><a href="#参数（Arguments）" class="headerlink" title="参数（Arguments）"></a>参数（Arguments）</h2><p>如果我们唯一可以做的是遍历对象及其字段，则GraphQL已经是数据提取的非常有用的语言。但是如果你还能将参数传递给字段的话，事情会变得更有趣。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  human(id: &quot;1000&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    height</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"human"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">      <span class="string">"height"</span>: <span class="number">1.72</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在像REST这样的系统中，您只能传递一组参数(paramter和url query)。但是在GraphQL中，每个字段和嵌套对象都可以获取自己的参数集，从而使一次GraphQL查询可以完全代替多个传统的API请求。您甚至可以将参数传递到标量字段中并在服务器上实现数据转换，而不需要在客户端上进行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  human(id: &quot;1000&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    height(unit: FOOT)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"human"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">      <span class="string">"height"</span>: <span class="number">5.6430448</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数可以是很多不同的类型。在上面的例子中，我们使用了一个枚举类型，它表示一组有限的选项之一（在这种情况下是长度单位，METER或FOOT）。 GraphQL带有默认的类型，但是GraphQL服务器也可以声明自定义类型。只要能将它们序列化为可传输的格式。</p>
<h2 id="别名（Aliases）"><a href="#别名（Aliases）" class="headerlink" title="别名（Aliases）"></a>别名（Aliases）</h2><p>也许您已经注意到，相对应的结果字段名与查询字段名相同，但却不包括该字段的查询参数，因此您不能直接使用不同的参数查询相同的字段。这就是为什么你需要别名的原因。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  empireHero: hero(episode: EMPIRE) &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">  jediHero: hero(episode: JEDI) &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"empireHero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"jediHero"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="片段（Fragments）"><a href="#片段（Fragments）" class="headerlink" title="片段（Fragments）"></a>片段（Fragments）</h2><p>假设我们的应用中存在一个比较复杂的页面，可以一次性展示两个角色并列出他们的朋友信息。可以想象，这样一个查询可能会很快变得复杂，因为我们需要重复写角色字段至少两次。</p>
<p>这就是为什么GraphQL包含“片段”这种可重用单元。片段让您构建一组字段，然后我们可以将它们包含在需要的查询中。以下是使用片段解决上述情况的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  leftComparison: hero(episode: EMPIRE) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">  rightComparison: hero(episode: JEDI) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment comparisonFields on Character &#123;</span><br><span class="line">  name</span><br><span class="line">  appearsIn</span><br><span class="line">  friends &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"leftComparison"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span>,</span><br><span class="line">      <span class="string">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"C-3PO"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"rightComparison"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="string">"appearsIn"</span>: [</span><br><span class="line">        <span class="string">"NEWHOPE"</span>,</span><br><span class="line">        <span class="string">"EMPIRE"</span>,</span><br><span class="line">        <span class="string">"JEDI"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果重复这些字段，您可以看到上述查询将如何重复。片段的概念经常用于将复杂的应用程序数据需求分解成更小的块，特别是当您需要将大量具有不同片段的UI组件合并到一个初始数据请求时。</p>
<h2 id="变量（variables）"><a href="#变量（variables）" class="headerlink" title="变量（variables）"></a>变量（variables）</h2><p>到目前为止，我们一直在查询字符串中写入所有的参数。 但在大多数应用程序中，字段的参数将是动态的：例如，可能会有一个下拉列表，您可以选择您感兴趣的星球大战插曲，或搜索字段或一组过滤器。</p>
<p>在查询字符串中直接传递这些动态参数并不是一个好主意，因为我们的客户端代码需要在运行时动态地处理查询字符串，并将其序列化为特定于图形的格式。 相反，GraphQL具有将查询中的动态值参数化的一级方法(first-class way)，并将其作为单独的字典传递。 这些值称为 <em>变量</em> 。</p>
<p>当开始使用变量之时，我们需要做三件事情：</p>
<ol>
<li>用<code>$variableName</code>替换查询语句中静态的值</li>
<li>声明<code>$variableName</code>为一个被查询语句接收的变量之一</li>
<li>将<code>$variableName: value</code>写入到一种传输专用的变量字典中(通常是JSON)，用来与查询语句分别传输到服务器上。</li>
</ol>
<p>整合后的结果：</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query HeroNameAndFriends($episode: Episode) &#123;</span><br><span class="line">  hero(episode: $episode) &#123;</span><br><span class="line">    name</span><br><span class="line">    friends &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>variables</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"episode"</span>: <span class="string">"JEDI"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"friends"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Luke Skywalker"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>现在，在我们的客户端代码中，我们可以简单地传递一个不同的变量，而不需要构造一个全新的查询。 这通常也是一个好的做法，表示我们的查询中的哪些参数预期是动态的 - 我们不应该使用字符串插值来从用户提供的值构造查询。</p>
<h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>变量定义是上面查询中的（<code>$episode：Episode</code>）部分。 它的作用就像类型语言中函数的参数定义一样。 它列出所有变量，前缀为$，后跟其类型（当前为<code>Episode</code>）。</p>
<p>所有声明的变量必须是标量，枚举或输入对象类型。 因此，如果要将复杂对象传递到字段中，则需要知道在服务器上匹配的输入类型。 在“架构”页面上了解有关输入对象类型的更多信息。</p>
<p>变量定义可以是可选的或必需的。 在上面的情况下，因为没有！ 在Episode类型后面，所以它是可选的。 但是，如果要将变量传递给需要非空参数的字段，那么该变量也必须是必需的。</p>
<p>要了解有关这些变量定义的语法的更多信息，学习GraphQL模式语言非常有用。 模式语言在Schema页面中有详细的说明。</p>
<h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><p>可以在变量的类型声明后面添加该变量的默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query HeroNameAndFriends($episode: Episode = &quot;JEDI&quot;) &#123;</span><br><span class="line">  hero(episode: $episode) &#123;</span><br><span class="line">    name</span><br><span class="line">    friends &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="操作名（Operation-name）"><a href="#操作名（Operation-name）" class="headerlink" title="操作名（Operation  name）"></a>操作名（Operation  name）</h2><p>从上面的查询例子我们可以看到一个<code>HeroNameAndFriends</code>的操作名。但到目前为止，我们大部分是在速记语法，省略查询关键字和查询名称，但在生产中，这钟写法会使我们的代码不明确。</p>
<p>想想这就像你最喜欢的编程语言中的函数名。 例如，在JavaScript中，我们可以轻松地使用匿名函数，但是当我们给一个函数一个名字时，跟踪它更容易，调试我们的代码，并在被调用时记录。 以同样的方式，GraphQL查询和变量名称以及片段名称可以作为服务器端的一个有用的调试工具来识别不同的GraphQL请求。</p>
<h2 id="指令（Directives）"><a href="#指令（Directives）" class="headerlink" title="指令（Directives）"></a>指令（Directives）</h2><p>我们上面讨论了变量如何使我们避免进行手动字符串插值来构造动态查询。 在参数中传递变量解决了这些问题的一部分，但是我们也可能需要一种使用变量来动态地更改查询的结构和形状的方法。 例如，我们可以想象一个UI组件，它具有一个总结和详细的视图，其中一个包含比另一个更多的字段。让我们来为这样的组件构建一个查询语句：</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query Hero($episode: Episode, $withFriends: Boolean!) &#123;</span><br><span class="line">  hero(episode: $episode) &#123;</span><br><span class="line">    name</span><br><span class="line">    friends @include(if: $withFriends) &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>variables</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"episode"</span>: <span class="string">"JEDI"</span>,</span><br><span class="line">  <span class="attr">"withFriends"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>尝试编辑上面的变量（比如将<code>true</code>传给<code>withFriends</code>），看看结果如何变化。</p>
<p>我们需要在GraphQL中使用一个新功能，称为一个指令。 一个指令可以附加到字段或片段包含，并且可以以服务器的任何方式影响查询的执行。 核心GraphQL规范仅包含两个指令，这些指令必须由任何符合规范的GraphQL服务器实现支持：</p>
<ul>
<li><code>@include(if: Boolean)</code> 仅当参数为<code>true</code>时返回结果才包括这个字段</li>
<li><code>@skip(if: Boolean)</code> 当参数为<code>true</code>时跳过这个字段</li>
</ul>
<p>指令可用于摆脱需要执行字符串操作以在查询中添加和删除字段的情况。 服务器实现也可以通过定义全新的指令来添加实验功能。</p>
<h2 id="修改（Mutations）"><a href="#修改（Mutations）" class="headerlink" title="修改（Mutations）"></a>修改（Mutations）</h2><p>大多数关于GraphQL的讨论集中于数据获取，但是任何完整的数据平台也需要一种修改服务器端数据的方法。</p>
<p>在REST中，任何请求可能会导致在服务器上造成一些副作用，但按照惯例，建议不要使用GET请求来修改数据。 GraphQL是类似的：技术上任何查询都可以被实现来进行数据写入。 但是，建立一个约定，任何导致写入的操作都应该通过修改操作显式发送。</p>
<p>就像查询一样，如果修改字段返回一个对象类型，可以要求嵌套字段。 这可以在更新后获取对象的新状态。 我们来看一个简单的例子：</p>
<ul>
<li><p>mutation</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123;</span><br><span class="line">  createReview(episode: $ep, review: $review) &#123;</span><br><span class="line">    stars</span><br><span class="line">    commentary</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>varialbes</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ep"</span>: <span class="string">"JEDI"</span>,</span><br><span class="line">  <span class="attr">"review"</span>: &#123;</span><br><span class="line">    <span class="attr">"stars"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"commentary"</span>: <span class="string">"This is a great movie!"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"createReview"</span>: &#123;</span><br><span class="line">      <span class="attr">"stars"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"commentary"</span>: <span class="string">"This is a great movie!"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注意<code>createReview</code>字段是如何返回新创建的<code>review</code>中的<code>commentary</code>和<code>stars</code>字段的。 这在修改已有字段的时候尤其有用，例如，当增加一个字段时，我们可以通过一个请求来同时修改该字段并查询该字段的新值。</p>
<p>您可能还会注意到，在本示例中，我们传入的评论变量不是标量。 它是一个输入对象类型，可以作为参数传入的特殊种类的对象类型。 详细了解“架构”页面上的输入类型。</p>
<h3 id="修改多个字段"><a href="#修改多个字段" class="headerlink" title="修改多个字段"></a>修改多个字段</h3><p>像查询操作一样，一个修改操作可以包含多个字段，但是两者之间有一个重大的差异：   </p>
<p><strong>查询操作是并行的，而修改操作是串行的</strong></p>
<p>这意味着，如果我们在一个修改操作中两次修改<code>incremenetCredits</code>字段的操作，第一个操作在保证结束后才会执行第二个操作。避免出现竞争情况。</p>
<h2 id="内联片段（inline-Fragments）"><a href="#内联片段（inline-Fragments）" class="headerlink" title="内联片段（inline Fragments）"></a>内联片段（inline Fragments）</h2><p>跟其他类型系统一样，GraphQL也可以定义接口（Interfaces）和联合类型（Union Types）。详情见schema guide</p>
<p>你可以使用内联片段来访问一个接口或者联合类型中所包含的数据。用下面这个例子可以很方便的说明：</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">query HeroForEpisode($ep: Episode!) &#123;</span><br><span class="line">  hero(episode: $ep) &#123;</span><br><span class="line">    name</span><br><span class="line">    ... on Droid &#123;</span><br><span class="line">      primaryFunction</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Human &#123;</span><br><span class="line">      height</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>variables</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ep"</span>: <span class="string">"JEDI"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hero"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"R2-D2"</span>,</span><br><span class="line">      <span class="attr">"primaryFunction"</span>: <span class="string">"Astromech"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在这个查询中，<code>hero</code>字段返回类型为<code>Character</code>，它可能是<code>Human</code>或<code>Droid</code>，这取决于参数<code>episode</code>。 在直接选择中，您只能访问<code>Character</code>接口中存在的字段，如<code>name</code>。</p>
<p>要访问具体类型的字段，您需要使用特定类型（type condition）的内联片段。 第一个片段在<code>Droid</code>上被标记为<code>...</code>，所以只有当从<code>hero</code>返回的<code>Character</code>是<code>Droid</code>类型时，<code>primaryFunction</code>字段才会被执行。 类似于<code>Human</code>类型中的<code>height</code>字段。</p>
<p>命名片段也可以以相同的方式使用，因为命名片段始终包含限定类型。</p>
<h3 id="元字段（Meta-fields）"><a href="#元字段（Meta-fields）" class="headerlink" title="元字段（Meta fields）"></a>元字段（Meta fields）</h3><p>鉴于有些情况下您不知道从GraphQL服务返回的类型，您需要一些方法来确定如何处理客户端上的数据。 GraphQL允许您在查询中的任何位置请求<code>__typename</code>，一个元字段，以获取该点上对象类型的名称。</p>
<ul>
<li><p>query</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  search(text: &quot;an&quot;) &#123;</span><br><span class="line">    __typename</span><br><span class="line">    ... on Human &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Droid &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">    ... on Starship &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>result</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"search"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"__typename"</span>: <span class="string">"Human"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Han Solo"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"__typename"</span>: <span class="string">"Droid"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Leia Organa"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"__typename"</span>: <span class="string">"Starship"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"TIE Advanced x1"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在上述查询中，<code>search</code>返回可以是三个选项之一的联合类型。 在没有<code>__typename</code>字段的情况下，不可能将客户端的不同类型告诉客户端。</p>
<p>GraphQL服务提供了少量的元字段，其余的公开 于“内省”系统。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GraphQL Learn (5) - Introspection]]></title>
      <url>http://lishangying.github.io/2017/08/15/GraphQL%20Learn%20(5)%20-%20Introspection/</url>
      <content type="html"><![CDATA[<p>查询GraphQL架构有关它支持的查询的信息通常很有用。 GraphQL允许我们使用内省系统来做到这一点！对于我们的星球大战例子来说，文件<a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsIntrospection-test.js" target="_blank" rel="noopener">starWarsIntrospection-test.js</a>包含许多查询内省系统的查询，并且是一个完整的按照规范实现的测试文件。</p>
<p>我们设计了类型系统，所以我们应该知道系统中可用的类型。但是如果不知道，我们还可以通过查询__schema字段来询问GraphQL。这个字段始终存在于根类型中。<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __schema &#123;</span><br><span class="line">    types &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__schema"</span>: &#123;</span><br><span class="line">      <span class="attr">"types"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Query"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Episode"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Character"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"ID"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"String"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Int"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"FriendsConnection"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"FriendsEdge"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"PageInfo"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Boolean"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Review"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"SearchResult"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Human"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"LengthUnit"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Float"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Starship"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Droid"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Mutation"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"ReviewInput"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__Schema"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__Type"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__TypeKind"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__Field"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__InputValue"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__EnumValue"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__Directive"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"__DirectiveLocation"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>哇哦，这上面输出了很多类型，他们代表什么？让我们对他们进行一下分类：</p>
<ul>
<li><strong>Query, Character, Human, Episode, Droid</strong> - 这些都是我们在类型系统中定义的类型</li>
<li><strong>String, Boolean</strong> - 这些是类型系统中内建的标量类型</li>
<li><strong> __Schema, __Type, __TypeKind, __Field, __InputValue, __EnumValue, __Directive  </strong> 这些名字都用双下划线做前缀，用来表示是内省系统里的类型。</li>
</ul>
<p>现在，让我们开始探索系统可用的查询。首先，当设计我们的类型系统时，我们指定了一个起始查询的类型，让内省系统告诉我们起始查询的名字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __schema &#123;</span><br><span class="line">    queryType &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__schema"</span>: &#123;</span><br><span class="line">      <span class="attr">"queryType"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Query"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的结果与类型系统部分中所描述的匹配，<code>Query</code>类型是我们将要开始的地方！ 请注意，这里的命名只是为了方便，我们可以将<code>Query</code>类型命名为其他任何东西，如果我们指定它是查询的起始类型，系统仍然会返回相应的结果。虽然将它命名为<code>Query</code> 是一个比较实用的约定。</p>
<p>让我们来看看<code>Droid</code>类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __type(name: &quot;Droid&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__type"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Droid"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们需要知道更多的关于Droid的信息，比如说其中的一个接口或对象呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __type(name: &quot;Droid&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    kind</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__type"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Droid"</span>,</span><br><span class="line">      <span class="attr">"kind"</span>: <span class="string">"OBJECT"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>kind</code>返回一个<code>__TypeKind</code>的枚举类型，值为<code>OBJECT1</code>，如果我们直接查询<code>Character</code>而不在接口里面的话呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __type(name: &quot;Character&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    kind</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__type"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Character"</span>,</span><br><span class="line">      <span class="attr">"kind"</span>: <span class="string">"INTERFACE"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>知道一个对象所包含的所有字段是很常见的需求。所以，让我们继续查询<code>Droid</code>上面的内省系统：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __type(name: &quot;Droid&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    fields &#123;</span><br><span class="line">      name</span><br><span class="line">      type &#123;</span><br><span class="line">        name</span><br><span class="line">        kind</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__type"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Droid"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"id"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"name"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"friends"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"LIST"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"friendsConnection"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"appearsIn"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"primaryFunction"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"String"</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"SCALAR"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些就是我们在<code>Droid</code>上面定义的字段！</p>
<p><code>id</code>看起来有点奇怪，它没有类型的名称。 因为它是一种“封装”的<code>NON_NULL</code>类型。 如果我们查询该字段类型的<code>ofType</code>信息，我们将会得到一个ID类型，告诉我们这是一个非空ID。<br>相似的，<code>friends</code>和<code>appearsIn</code>也没有类型名，因为他们是一个<code>LIST</code>封装过的类型。我们可以查询他们的<code>ofType</code>信息，我们将会得到一个<code>LIST</code>类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __type(name: &quot;Droid&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    fields &#123;</span><br><span class="line">      name</span><br><span class="line">      type &#123;</span><br><span class="line">        name</span><br><span class="line">        kind</span><br><span class="line">        ofType &#123;</span><br><span class="line">          name</span><br><span class="line">          kind</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__type"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Droid"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"id"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span>,</span><br><span class="line">            <span class="attr">"ofType"</span>: &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"ID"</span>,</span><br><span class="line">              <span class="attr">"kind"</span>: <span class="string">"SCALAR"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"name"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span>,</span><br><span class="line">            <span class="attr">"ofType"</span>: &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"String"</span>,</span><br><span class="line">              <span class="attr">"kind"</span>: <span class="string">"SCALAR"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"friends"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"LIST"</span>,</span><br><span class="line">            <span class="attr">"ofType"</span>: &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"Character"</span>,</span><br><span class="line">              <span class="attr">"kind"</span>: <span class="string">"INTERFACE"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"friendsConnection"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span>,</span><br><span class="line">            <span class="attr">"ofType"</span>: &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="string">"FriendsConnection"</span>,</span><br><span class="line">              <span class="attr">"kind"</span>: <span class="string">"OBJECT"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"appearsIn"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"NON_NULL"</span>,</span><br><span class="line">            <span class="attr">"ofType"</span>: &#123;</span><br><span class="line">              <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">"kind"</span>: <span class="string">"LIST"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"primaryFunction"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"String"</span>,</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"SCALAR"</span>,</span><br><span class="line">            <span class="attr">"ofType"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们在这个非常适合作为一个工具的内省系统特性上结束本教程。让用户向系统本身查询文档！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># &#123; &quot;graphiql&quot;: true &#125;</span><br><span class="line">&#123;</span><br><span class="line">  __type(name: &quot;Droid&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"__type"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Droid"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"An autonomous mechanical character in the Star Wars universe"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用内省系统访问有关类型系统的文档，并创造一种文档浏览器或富IDE的体验。</p>
<p>这些只是内省系统的冰山一角，我们还可以查询枚举值、一个类型实现的接口等等。 我们甚至可以内省我们的内省系统本身。 该规范在“Introspection”部分中有关于该主题的更多细节，GraphQL.js中的 <a href="https://github.com/graphql/graphql-js/blob/master/src/type/introspection.js" target="_blank" rel="noopener">introspection</a>文件包含规范的代码实现。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你的名字]]></title>
      <url>http://lishangying.github.io/2017/08/11/yourname/</url>
      <content type="html"><![CDATA[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://cdn.monniya.com/2017pic/yourname-01.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>或许平行时空下，还活着另外一个我。<br>每一天的平安过活，都是在履行存在的意义。<br>一部灾难幸存片。<br>这也是一个美好愿望吧，愿天灾能避免。<br>冥冥之中注定的我爱你。<br>激起平凡生活中的波澜吧。为什么会流泪呢？为什么会哭泣呢？那中怅然若失的感觉。梦中的故事有时就像真实发生过一样。许多生命存在的意义是什么呢？在于传承，也在于本身吧。每天浑浑噩噩生活着，也是一种生活的方式。面对事物的淡然或是较真。都在反映着我真实的活着。<br>就像一种信仰一样真实。<br>故事本身的意义。<br>故事本身就是充满想象与荒诞的。没有对与错。但直击心灵，就像发生在自己身上一样的真实。感动，为这真实的情感。</p>
<p>带入感强烈的男女主角<br>隐隐的对大自然事件叹为观止，却又希望灾难能不发生。<br>可能我们都不再记起具体情节。但却是一直在寻找彼此。爱情的结合是如此的奇妙。人世间如此的孤独，却因为一个人的存在，这个城市也有了鲜活的意义。没有天生的血缘，却有离不开的牵绊。因为孤独，所以我们体会了彼此的人生。让我们更深切感受到互相真实存在的证据。<br>可能时间，流动的时间，也是某种“结”，让生命跳动起来。<br>青春的悸动，是最美好的东西，生命美好的传承起源于此。最直接最原始的诉求，就是生命的传承。美好事物的更替。人活着，不就是在追求美好的事物，美好的时光吗？<br>一份再平凡不过的爱情。<br>一个再平凡不过的少女，拥有的也是独一无二的灵魂和人生。就像你我一样。可能在不经意间，就改变了世界的走向。<br>嗯，因为我们都做了一点贡献，这个世界变得更加美好。<br>爱情真的可能改变一个人的。让人变得成长。了解了更真实的社会。<br>愿有情人终成眷属。</p>
]]></content>
      
        
        <tags>
            
            <tag> a </tag>
            
            <tag> b </tag>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[体验I3之美]]></title>
      <url>http://lishangying.github.io/2017/03/20/beautifull-i3/</url>
      <content type="html"><![CDATA[<p><img src="https://ol1kreips.qnssl.com/%E6%88%AA%E5%9B%BE_2017-03-13_18-50-11.png" alt="enter description here" title="截图_2017-03-13_18-50-11"><br>先晒张日常桌面图。Gnome3用了半年了一直被其蹩脚的交互和层出不穷的Bug所折磨。虽然Gnome3很漂亮，很简洁，但是毕竟漂亮不能当饭吃。套餐这种东西虽然简单省事，但是终究不是为你所量身定制的，总有其中一样不合你口味。因此，我决定再次抛弃“开箱即用”的DE(Desktop Environment)，在WM(Window Manager)的基础上自己打造一套适合自己的桌面环境。<br><a id="more"></a></p>
<h2 id="i3WM"><a href="#i3WM" class="headerlink" title="i3WM"></a>i3WM</h2><p>i3是一个比较知名的平铺式的窗口管理器（TilingWM），它可以通过快捷键来管理程序窗口，使他们像截图那样平铺在显示屏幕，控制他们的大小和位置。十分高效也有几分Geek的味道。<br>i3的所有配置全部使用shell写成，甚至顶部panel的各种指示器，都由用户自己写的bash脚本获得并显示。十分简单暴力。虽然没有图形界面那么直观，但是有一种一切尽在自己掌控之下的感觉。这种感觉其实是十分十分不错的。<br>我的I3WM配置文件托管在了<a href="https://github.com/stkevintan/i3dotfile" target="_blank" rel="noopener">Github</a>。</p>
<h2 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h2><p>I3配置文件的语法其实跟shell差不多，熟悉Linux的用户应该都能完全看懂。我的配置文件分为几大模块：</p>
<h3 id="Workspaces"><a href="#Workspaces" class="headerlink" title="Workspaces"></a>Workspaces</h3><p>工作区配置，我根据日常使用的程序类别一共设置了10个工作区(图标显示需要在本地电脑上安装Fontawesome字体）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$ws1</span> 	     <span class="string">"1: Browser"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws2</span>         <span class="string">"2: Code"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws3</span> 		 <span class="string">"3: Chat"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws4</span> 		 <span class="string">"4: File"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws5</span> 		 <span class="string">"5: Terminal"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws6</span> 		 <span class="string">"6: Video"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws7</span> 	     <span class="string">"7: Music"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws8</span>  	     <span class="string">"8:  Graphic"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws9</span> 		 <span class="string">"9: Game"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws0</span> 		 <span class="string">"0: Fullscreen"</span></span><br></pre></td></tr></table></figure></p>
<p>然后，把属于各自类别的程序绑定到对应的工作区，这样打开这些程序的时候他们就能自动出现在合适的工作区了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assign 	[class=<span class="string">"google-chrome-stable"</span>] 			<span class="variable">$ws1</span>   <span class="comment"># Browser</span></span><br><span class="line">assign 	[class=<span class="string">"vivaldi"</span>] 						            <span class="variable">$ws1</span>   <span class="comment"># Browser</span></span><br><span class="line">assign 	[class=<span class="string">"firefox"</span>] 					            	<span class="variable">$ws1</span>   <span class="comment"># Browser</span></span><br><span class="line">assign  [class=<span class="string">"(?i)code"</span>]                                <span class="variable">$ws2</span>   <span class="comment"># Code IDE</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">assign  [class=<span class="string">"dota2"</span>]         		                   <span class="variable">$ws0</span>   <span class="comment"># Fullscreen</span></span><br><span class="line">assign	[class=<span class="string">"Minecraft 1.8.9"</span>]		              <span class="variable">$ws0</span>   <span class="comment"># Fullscreen</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>在i3配置文件里面我们可以对常用的程序绑定快捷启动键：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bindsym F10 <span class="built_in">exec</span> xfce4-appfinder</span><br><span class="line">bindsym Print <span class="built_in">exec</span> xfce4-screenshooter</span><br><span class="line"></span><br><span class="line"><span class="comment"># bindsym $mod+Return exec i3-sensible-terminal</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Return <span class="built_in">exec</span> pantheon-terminal</span><br><span class="line"></span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+t <span class="built_in">exec</span> telegram-desktop</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+g <span class="built_in">exec</span> google-chrome-stable</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+v <span class="built_in">exec</span> vivaldi</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+f <span class="built_in">exec</span> nemo</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+c <span class="built_in">exec</span> code</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+n <span class="built_in">exec</span> nitrogen</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+w <span class="built_in">exec</span> electronic-wechat</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+y <span class="built_in">exec</span> youdao-dict</span><br></pre></td></tr></table></figure></p>
<p>然后，对于特殊的不适合平铺的窗口，可以直接设置它们为浮动窗口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for_window [class=<span class="string">"Geany"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"GParted"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"Nitrogen"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"(?i)virtualbox"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line">for_window [class=<span class="string">"Youdao Dict"</span>] floating <span class="built_in">enable</span> border normal</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></p>
<p>PS：可以使用<code>xprop|grep WM_CLASS</code>来查看正在运行窗口的class名称。</p>
<h3 id="i3blocks"><a href="#i3blocks" class="headerlink" title="i3blocks"></a>i3blocks</h3><p>i3blocks是I3顶部面板的一个可选组件。它使用ini格式的配置文件，支持多种终端脚本，还支持鼠标点击、滚动事件，十分强大。配置文件样本如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command</span>=~/.config/i3/blocks/<span class="variable">$BLOCK_NAME</span></span><br><span class="line"><span class="attr">align</span>=center</span><br><span class="line"><span class="attr">color</span>=#ffffff</span><br><span class="line"><span class="attr">separator</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">separator_block_width</span>=<span class="number">13</span></span><br><span class="line"><span class="attr">markup</span>=pango</span><br><span class="line"></span><br><span class="line"><span class="section">[disk-home]</span></span><br><span class="line"><span class="attr">label</span>=</span><br><span class="line"><span class="attr">command</span>=~/.config/i3/blocks/disk <span class="variable">$HOME</span></span><br><span class="line"><span class="attr">instance</span>=/home/kevin</span><br><span class="line"><span class="attr">interval</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">color</span>=#FFCC80</span><br><span class="line"></span><br><span class="line"><span class="section">[weather]</span></span><br><span class="line"><span class="attr">instance</span>=<span class="number">1808926</span> # hangzhou<span class="string">'s city code</span></span><br><span class="line"><span class="string">interval=60</span></span><br><span class="line"><span class="string">color=#90CAF9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ...</span></span><br></pre></td></tr></table></figure></p>
<p>主要字段解释：</p>
<ul>
<li>首先前面无section的parameters属于默认配置项，为每个section的缺省配置。  </li>
<li>然后每个section都对应顶栏上面的一个指示器，称为block。  </li>
<li>每个block必须显示一定的数据，可以通过command配置项指定获取数据的命令，并使用interval来设置命令执行周期间隔。</li>
<li>instance为可以传递到command脚本中的环境变量。</li>
<li>color和label为颜色和标签，属于修饰性的配置项。</li>
</ul>
<p>所有可用的block命令可以参考我的配置文件夹：<a href="https://github.com/stkevintan/i3dotfile/tree/master/blocks" target="_blank" rel="noopener">blocks</a></p>
<h3 id="compton"><a href="#compton" class="headerlink" title="compton"></a>compton</h3><p>compton可以给i3带来透明和阴影效果的支持。如果只关心性能而不介意美观与否，你完全可以跳过此节。<br>compton默认是不给顶栏加透明效果的，需要加入如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wintypes:</span><br><span class="line">&#123;</span><br><span class="line">    dock = </span><br><span class="line">    &#123; </span><br><span class="line">        opacity = 0.8;        </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>同时，compton的阴影效果不适用于某些窗口，需要排除它们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shadow-exclude = [</span><br><span class="line">    &quot;name = &apos;Notification&apos;&quot;,</span><br><span class="line">    &quot;name *= &apos;compton&apos;&quot;,</span><br><span class="line">    &quot;class_g = &apos;Conky&apos;&quot;,</span><br><span class="line">    &quot;class_g = &apos;Firefox&apos;&quot;,</span><br><span class="line">    &quot;class_g *= &apos;fcitx&apos;&quot;,</span><br><span class="line">    &quot;class_g = &apos;Youdao Dict&apos;&quot;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<h2 id="易用性建议"><a href="#易用性建议" class="headerlink" title="易用性建议"></a>易用性建议</h2><p>i3WM只是一个地基，我们可以在这之上搭建一个适合自己的环境。每个人的口味都不一样，所以我简单的罗列一下我个人比较喜欢的应用和配置以供参考。</p>
<ul>
<li>dmenu: WM下使用最广泛的应用启动器，可以自动根据用户输入的命令进行提示。</li>
<li>rofi: dmenu的替代品</li>
<li>quickswitch.py:  跨工作区窗口快速跳转工具，可以整合到dmenu中。</li>
<li>xfce4-appfinder:  xfce4的应用程序列表。能够自动搜索文件系统中的desktop文件，并生成应用列表。非常实用的工具。</li>
<li>pantheon-terminal: elementaryOS的默认终端。小巧，依赖少，支持背景透明、多标签，很完美的终端模拟器。（需要使用dconf-editor来修改设置，位置：<code>/org/pantheon/terminal/settings/</code>）</li>
<li>nemo: linuxmint的默认文件管理器，forks自nautilus，但是比nautilus好用得多。（使用之前需要使用dconf-editor设置<code>/org/nemo/desktop/show-desktop-icons</code>为<code>false</code>）</li>
<li>nitrogen: 提供简单的图形界面来设置壁纸并在每次开机之后自动恢复。</li>
<li>clipit: 剪贴板支持</li>
<li>lightdm: 轻量级图形登录界面</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gnome </tag>
            
            <tag> i3wm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[斐波那契堆之Go实现]]></title>
      <url>http://lishangying.github.io/2017/03/01/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86%E4%B9%8BGo%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>一个比二叉堆更高效的数据结构，但是实现起来非常复杂。本科的时候看《算法导论》的时候曾经研究过，不是很明白。今天终于对它有了一个比较清晰的了解。<br><img src="https://ol1kreips.qnssl.com/image.png" alt="enter description here" title="image.png"><br><a id="more"></a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fibonacciHeap</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MinInt = -<span class="keyword">int</span>(^<span class="keyword">uint</span>(<span class="number">0</span>)&gt;&gt;<span class="number">1</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	value  <span class="keyword">int</span></span><br><span class="line">	parent *Vertex</span><br><span class="line">	child  *Vertex</span><br><span class="line">	left   *Vertex</span><br><span class="line">	right  *Vertex</span><br><span class="line">	mark   <span class="keyword">bool</span></span><br><span class="line">	degree <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FibonacciHeap <span class="keyword">struct</span> &#123;</span><br><span class="line">	min  *Vertex</span><br><span class="line">	size <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert inserts a node into heap with value v</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">Insert</span><span class="params">(value <span class="keyword">int</span>)</span> *<span class="title">Vertex</span></span> &#123;</span><br><span class="line">	v := &amp;Vertex&#123;value: value&#125;</span><br><span class="line">	<span class="keyword">if</span> F.min == <span class="literal">nil</span> &#123;</span><br><span class="line">		F.min = v</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		F.insertToList(F.min, v)</span><br><span class="line">		<span class="keyword">if</span> F.min.value &gt; v.value &#123;</span><br><span class="line">			F.min = v</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	F.size++</span><br><span class="line">	<span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> F.min == <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">Minmum</span><span class="params">()</span> *<span class="title">Vertex</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> F.min</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">ExtractMin</span><span class="params">()</span> *<span class="title">Vertex</span></span> &#123;</span><br><span class="line">	z := F.min</span><br><span class="line">	<span class="keyword">if</span> z == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> z.child != <span class="literal">nil</span> &#123;</span><br><span class="line">		v := F.extractVertex(z.child)</span><br><span class="line">		F.insertToList(F.min, v)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> z == z.right &#123; <span class="comment">//the heap only contains one node</span></span><br><span class="line">		F.min = <span class="literal">nil</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		F.min = z.right</span><br><span class="line">		z = F.extractVertex(z)</span><br><span class="line">		F.consolidate()</span><br><span class="line">	&#125;</span><br><span class="line">	F.size--</span><br><span class="line">	<span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">Merge</span><span class="params">(Other *FibonacciHeap)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> F.min == <span class="literal">nil</span> &#123; <span class="comment">// if current heap is empty</span></span><br><span class="line">		F.min = Other.min</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> Other.min != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// cut two circle and rearrange them</span></span><br><span class="line">		F.min.right.left = Other.min.left</span><br><span class="line">		Other.min.left.right = F.min.right <span class="comment">//reverse</span></span><br><span class="line">		F.min.right = Other.min</span><br><span class="line">		Other.min.left = F.min <span class="comment">//reverse</span></span><br><span class="line">		<span class="keyword">if</span> F.min.value &gt; Other.min.value &#123;</span><br><span class="line">			F.min = Other.min</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Other.min = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">DecreaseKey</span><span class="params">(v *Vertex, value <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> v.value &lt; value &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// do not increase</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> v.value == value &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	v.value = value</span><br><span class="line">	parent := v.parent</span><br><span class="line">	<span class="keyword">if</span> parent != <span class="literal">nil</span> &amp;&amp; v.value &lt; parent.value &#123;</span><br><span class="line">		v = F.extractVertex(v)</span><br><span class="line">		F.insertToList(F.min, v)</span><br><span class="line">		F.cascadingCut(parent)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> v.value &lt; F.min.value &#123;</span><br><span class="line">		F.min = v</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">IncreaseKey</span><span class="params">(v *Vertex, value <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> v.value &gt; value &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> v.value == value &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> v.child != <span class="literal">nil</span> &#123;</span><br><span class="line">		F.insertToList(F.min, F.extractVertex(v.child))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	v.value = value</span><br><span class="line">	parent := v.parent</span><br><span class="line">	<span class="keyword">if</span> parent != <span class="literal">nil</span> &#123;</span><br><span class="line">		F.insertToList(F.min, F.extractVertex(v))</span><br><span class="line">		F.cascadingCut(parent)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> F.min == v &#123;</span><br><span class="line">		<span class="keyword">for</span> cur := v.right; cur != v; cur = cur.right &#123;</span><br><span class="line">			<span class="keyword">if</span> v.value &gt; cur.value &#123;</span><br><span class="line">				F.min = cur</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">Modify</span><span class="params">(v *Vertex, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> v.value &lt; value:</span><br><span class="line">		F.IncreaseKey(v, value)</span><br><span class="line">	<span class="keyword">case</span> v.value &gt; value:</span><br><span class="line">		F.DecreaseKey(v, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">DeleteVertex</span><span class="params">(v *Vertex)</span></span> &#123;</span><br><span class="line">	F.DecreaseKey(v, MinInt)</span><br><span class="line">	F.extractVertex(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertToList inserts v after pos</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">insertToList</span><span class="params">(pos *Vertex, v *Vertex)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> pos == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	pos.right.left = v</span><br><span class="line">	v.right = pos.right</span><br><span class="line">	pos.right = v</span><br><span class="line">	v.left = pos</span><br><span class="line">	v.parent = pos.parent</span><br><span class="line">	<span class="keyword">if</span> pos.parent != <span class="literal">nil</span> &#123;</span><br><span class="line">		pos.parent.degree++</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">extractVertex</span><span class="params">(v *Vertex)</span> *<span class="title">Vertex</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> v == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> v.parent != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> v.right != v &#123;</span><br><span class="line">			v.parent.child = v.right</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			v.parent.child = <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		v.parent.degree--</span><br><span class="line">		v.parent = <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> v.left != v &#123;</span><br><span class="line">		v.left.right = v.right</span><br><span class="line">		v.right.left = v.left</span><br><span class="line">		v.left = v</span><br><span class="line">		v.right = v</span><br><span class="line">	&#125;</span><br><span class="line">	v.mark = <span class="literal">false</span></span><br><span class="line">	<span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">cascadingCut</span><span class="params">(v *Vertex)</span></span> &#123;</span><br><span class="line">	parent := v.parent</span><br><span class="line">	<span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> v.mark == <span class="literal">false</span> &#123;</span><br><span class="line">		v.mark = <span class="literal">true</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// when the parent have lost a child</span></span><br><span class="line">		F.extractVertex(v)</span><br><span class="line">		F.insertToList(F.min, v)</span><br><span class="line">		F.cascadingCut(parent)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(F *FibonacciHeap)</span> <span class="title">consolidate</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> F.min == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	v := F.min</span><br><span class="line">	degree := v.degree</span><br><span class="line">	<span class="comment">// a record table to help merging vertices with the same degree</span></span><br><span class="line">	table := <span class="built_in">make</span>([]*Vertex, degree+<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(table) &lt;= degree &#123;</span><br><span class="line">			<span class="comment">// extend table size</span></span><br><span class="line">			table = <span class="built_in">append</span>(table, <span class="built_in">make</span>([]*Vertex, degree-<span class="built_in">len</span>(table)+<span class="number">1</span>)...)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> table[degree] == v &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> table[degree] == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="comment">//currently ,there is no vertices having the same degree of v</span></span><br><span class="line">			table[degree] = v</span><br><span class="line">			v = v.right</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// make sure v is the minimal vertex</span></span><br><span class="line">			<span class="keyword">if</span> table[degree].value &lt; v.value &#123;</span><br><span class="line">				table[degree], v = v, table[degree]</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// merge table[degree] to v as his child</span></span><br><span class="line">			<span class="comment">// make v become root</span></span><br><span class="line">			table[degree] = F.extractVertex(table[degree])</span><br><span class="line">			<span class="keyword">if</span> v.child == <span class="literal">nil</span> &#123;</span><br><span class="line">				v.child = table[degree]</span><br><span class="line">				table[degree].parent = v</span><br><span class="line">				v.degree++</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//v.degree has been increased in this function</span></span><br><span class="line">				F.insertToList(v.child, table[degree])</span><br><span class="line">			&#125;</span><br><span class="line">			table[degree] = <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		degree = v.degree</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find the min</span></span><br><span class="line">	F.min = <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> table &#123;</span><br><span class="line">		<span class="keyword">if</span> v == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> F.min == <span class="literal">nil</span> &#123;</span><br><span class="line">			F.min = v</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> v.value &lt; F.min.value &#123;</span><br><span class="line">			F.min = v</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>参考</p>
<ul>
<li><a href="https://www.roading.org/algorithm/introductiontoalgorithm/斐波那契堆fibonacci-heaps.html" target="_blank" rel="noopener">https://www.roading.org/algorithm/introductiontoalgorithm/斐波那契堆fibonacci-heaps.html</a></li>
<li><a href="http://www.cnblogs.com/skywang12345/p/3659060.html" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3659060.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网易云音乐新API简述]]></title>
      <url>http://lishangying.github.io/2017/02/08/netease-music-api/</url>
      <content type="html"><![CDATA[<p>新API采用了略微修改过的AES和RSA加密，主要用在登陆接口上，对新API进行简单的分析。</p>
<h2 id="Url"><a href="#Url" class="headerlink" title="Url"></a>Url</h2><p>估计会抓包的人都知道，Url中的api便成了weapi。比如手机登录：<br>原来是：<code>http://music.163.com/api/login/cellphone/</code><br>现在是：<code>http://music.163.com/weapi/login/cellphone/</code></p>
<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p>核心过程如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> aesRsaEncrypt = <span class="function"><span class="keyword">function</span> (<span class="params">text, pubKey, modulus, nonce</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> secKey = createSecretKey(<span class="number">16</span>);  <span class="comment">// 随机生成16位加密密钥</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">	params:  aesEncrypt(aesEncrypt(text, nonce), secKey),</span><br><span class="line">	encSecKey: rsaEncrypt(secKey, pubKey, modulus)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	Text : <span class="string">"JSON.stringify(&#123;phone:xxx,password:"</span>md5 hashed Data<span class="string">",rememberLogin:"</span><span class="literal">true</span><span class="string">"&#125;)"</span> <span class="comment">//需要加密的post body</span></span><br><span class="line">	pubKey : <span class="string">"010001"</span></span><br><span class="line">	nonce : <span class="string">"0CoJUm6Qyw8W8jud"</span></span><br><span class="line">	modulus : <span class="string">"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol>
<li>AES加密的具体算法为:AES-128-CBC，输出格式为base64。</li>
<li>AES加密时需要指定iv：<code>0102030405060708</code></li>
<li>RSA加密输出为Hex格式，公钥是<code>{N:modulus,e:pubKey}</code></li>
<li>我的Javascript实现：<a href="https://github.com/stkevintan/Cube/blob/master/src/model/Crypto.js" target="_blank" rel="noopener">Crypto</a></li>
<li>RSA算法的JS实现方法参考：<a href="http://www.cnblogs.com/kxdhm/archive/2012/02/02/2336103.html" target="_blank" rel="noopener">http://www.cnblogs.com/kxdhm/archive/2012/02/02/2336103.html</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网易云音乐 </tag>
            
            <tag> API </tag>
            
            <tag> Encryption </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pandorabox之透明代理]]></title>
      <url>http://lishangying.github.io/2017/02/07/Pandorabox-transparent-proxy/</url>
      <content type="html"><![CDATA[<p><img src="https://ol1kreips.qnssl.com/PandoraBox.png" alt="enter description here" title="PandoraBox.png"><br>先修改Lan接口，避免在无线中继的时候发生本地Lan接口与wwan接口发生冲突导致无法登陆路由器。</p>
<p><code>网络 -&gt; Lan -&gt; IPv4地址， 设置为 192.168.33.1</code>更改之后需要重新连接一下网络。</p>
<p>透明代理使用<code>shadowsocks-libev</code>和<code>ChinDNS</code>实现。使用ssh登陆路由器，安装所需软件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.33.1</span><br><span class="line">opkg update</span><br><span class="line">opkg install shadowsocks-libev luci-app-shadowsocks ChinaDNS luci-app-chinadns --force-checksum</span><br></pre></td></tr></table></figure>
<p>这个版本的软件源有点问题，所以直接<code>opkg install</code>基本上都过不了<code>sha256sum</code>检测，所以需要加上<code>--force-checksum</code>参数强制忽略。两个luci界面都有zh-cn汉化包，为了节省路由器空间，就不装了。<br><a id="more"></a><br>默认的chnroute表很老了，需要更新：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/chnroute.txt /etc/chnroute.txt.bak</span><br><span class="line">wget -O- <span class="string">'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest'</span> | awk -F\| <span class="string">'/CN\|ipv4/ &#123; printf("%s/%d\n", $4, 32-log($5)/log(2)) &#125;'</span> &gt; /etc/chnroute.txt</span><br><span class="line"><span class="comment"># 如果没有问题</span></span><br><span class="line">rm -rf /etc/chnroute.txt.bak</span><br></pre></td></tr></table></figure>
<p>然后我们需要对其进行启用。</p>
<p>shadowsocks需要启动<code>ss-redir</code>来实现透明代理和<code>ss-tunnel</code>来实现UDP转发保证国外DNS查询不被污染。下面是具体需要注意的配置。</p>
<h3 id="SS-tunnel"><a href="#SS-tunnel" class="headerlink" title="SS-tunnel"></a>SS-tunnel</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"UDP Local Port"</span>: <span class="number">1153</span>,</span><br><span class="line">  <span class="attr">"Forwarding Tunnel"</span>: <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>:<span class="number">53</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ChinaDNS"><a href="#ChinaDNS" class="headerlink" title="ChinaDNS"></a>ChinaDNS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"Enable DNS compression pointer"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"Local Port"</span>: <span class="number">1053</span>, <span class="comment">//不能与ss-tunnel冲突 </span></span><br><span class="line">  <span class="string">"CHNRoute File"</span>: <span class="string">"/etc/chnroute.txt"</span>,</span><br><span class="line">  <span class="string">"Upstream Servers"</span>: <span class="string">"223.5.5.5,127.0.0.1:1153"</span> <span class="comment">//第一个是国内阿里DNS服务器，第二个是进过ss-tunnel转发后的Google DNS服务器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DHCP-DNS"><a href="#DHCP-DNS" class="headerlink" title="DHCP/DNS"></a>DHCP/DNS</h2><p>最后需要在<code>网络-&gt;DHCP/DNS-&gt;服务器设置</code>修改默认的DNS配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"本地服务器"</span>: <span class="string">"127.0.0.1#1053"</span>, <span class="comment">//ChinaDNS处理后的DNS服务器，可以根据ip分流。</span></span><br><span class="line">  <span class="string">"忽略解析文件"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总的来说，GoogleDNS(8.8.8.8:53)首先进过ss-tunnel转发到本地的<code>127.0.0.1:1153</code>上，然后通过ChinaDNS与国内DNS服务器融合成新的<code>127.0.0.1:1053</code> 实现了国内外分流。</p>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>由于实用过程中还是经常不稳定，决定采用DNS-Forwarder方案。<br>然而，官方并没有我的小米Mini路由架构的二进制包，只能自己动手丰衣足食了。</p>
<h3 id="OpenWrt-SDK"><a href="#OpenWrt-SDK" class="headerlink" title="OpenWrt SDK"></a>OpenWrt SDK</h3><p>首先明确小米路由器Mini的架构是ramips/mt7620a而现在运行的Pandorabox 16.10基于Openwrt Barrier Breaker。</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core build-essential libssl-dev libncurses5-dev unzip gawk zlib1g-dev subversion mercurial</span><br></pre></td></tr></table></figure>
<h3 id="下载-amp-编译"><a href="#下载-amp-编译" class="headerlink" title="下载&amp;编译"></a>下载&amp;编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl https://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/OpenWrt-SDK-ramips-for-linux-x86_64-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2 | tar -xjf </span><br><span class="line"><span class="built_in">cd</span> OpenWrt-SDK-*</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/aa65535/openwrt-dns-forwarder.git package/dns-forwarder <span class="comment"># 获取Makefile</span></span><br><span class="line">make menuconfig <span class="comment"># 选择要编译的包： Network -&gt; dns-forwarder</span></span><br><span class="line">make package/dns-forwarder/compile V=99</span><br></pre></td></tr></table></figure>
<p>然而，愿景很好，但是在我的Deepin上<code>make menuconfig</code>这步就出错，想想<code>barrier_breaker</code>也是很久之前的版本了，出错大概是<code>ldxxxx</code>，感觉应该是GCC版本不兼容的缘故，然而Deepin上GCC只有6.2.0没有官方要求的4.8，怎么办呢？当时暂时想到下面几条解决方案</p>
<ol>
<li>在自己电脑上重新编译一份GCC4.8： 太麻烦，而且还不能保证一定能成功。</li>
<li>用虚拟机装老版本的Ubuntu： 太浪费时间了，本身电脑BIOS就没有开启虚拟化支持。</li>
<li>docker? 不错可以试一下。</li>
</ol>
<p>docker运行老版本ubuntu镜像不用太简单，一条命令搞定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -t -i ubuntu:12.04.5 /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>然而docker版本的ubuntu太过于精简了,需要配置一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装缺失依赖</span></span><br><span class="line">apt-get install ccache curl</span><br><span class="line"><span class="comment"># openwrt-sdk 编译不能以root用户进行，需要新建一个普通用户</span></span><br><span class="line">useradd kevin</span><br><span class="line">su kevin</span><br><span class="line"><span class="comment"># 继续之前的编译步骤</span></span><br></pre></td></tr></table></figure></p>
<p>好了，终于编译成功了，然而还是高兴的太早，仍然报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* pkg_hash_fetch_best_installation_candidate: Packages <span class="keyword">for</span> helloworld found, but incompatible with the architectures configured</span><br></pre></td></tr></table></figure></p>
<p>还是求助于Google，然后发现了这篇博客：<a href="https://blog.phpgao.com/xiaomi_router_opkg.html" target="_blank" rel="noopener">小米路由器mini折腾之配置opkg篇</a>，于是我的路由器就成砖了。hhhhhhhhh</p>
<p>未完待续。。。。。。。。。。。。。。</p>
<h2 id="2017-8-15-update"><a href="#2017-8-15-update" class="headerlink" title="2017-8-15 update"></a>2017-8-15 update</h2><p>拿去店里救砖成功。刷了不死breed，但是现在反而没有什么折腾劲了。</p>
]]></content>
      
        <categories>
            
            <category> Openwrt </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> ChinaDNS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tech Daily@1-20]]></title>
      <url>http://lishangying.github.io/2017/01/20/Xiaomi-Openwrt-&amp;&-Git/</url>
      <content type="html"><![CDATA[<p>小米路由器mini（Xiaomi mini R1CM）刷Openwrt</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /path/to/PandoraBox-xxxx.bin root@192.168.1.1:/tmp/PandoraBox.bin</span><br><span class="line">mtd -r write /tmp/PandoraBox.bin firmware</span><br></pre></td></tr></table></figure>
<blockquote>
<p>從爬文中得知，小米路由器Mini 官方韌體是雙系統，由於 ROM 有16MB，官方韌體都小於8MB，所以會有一份備援系統（8MB+8MB），因此如果刷了大於 8MB 的第三方韌體的話，會覆蓋掉第二個分區的系統，導致未來刷回官方韌體時會有掉 SN 的問題，而且再也無法刷入 SSH，從此以後就只能乖乖用官方韌體，再也不能玩刷機，目前新版的 PandoraBox 韌體大約都在 10MB 左右，所以刷機還真要有點決心，除非完整備份小米路由器Mini 中所有分區的資料，才能在日後完整刷回官方韌體，當然，如果已經完全放棄官方韌體的話，這些問題都是不用考慮的。from -  <a href="http://blog.icece.tw/MiWiFi-Mini-Flash-uboot" target="_blank" rel="noopener">http://blog.icece.tw/MiWiFi-Mini-Flash-uboot</a></p>
</blockquote>
<h2 id="Disable-middle-button-of-mouse"><a href="#Disable-middle-button-of-mouse" class="headerlink" title="Disable middle button of mouse"></a>Disable middle button of mouse</h2><p>Execute those commands:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xinput list</span><br><span class="line">⎡ Virtual core pointer                    	id=2	[master pointer  (3)]</span><br><span class="line">⎜   ↳ Virtual core XTEST pointer              	id=4	[slave  pointer  (2)]</span><br><span class="line">⎜   ↳ MI Dongle MI Wireless Mouse             	id=11	[slave  pointer  (2)]</span><br><span class="line">⎜   ↳ MI Dongle MI Wireless Mouse             	id=12	[slave  pointer  (2)]</span><br><span class="line">⎜   ↳ DLL0704:01 06CB:76AE Touchpad           	id=14	[slave  pointer  (2)]</span><br><span class="line">⎜   ↳ PS/2 Synaptics TouchPad                 	id=17	[slave  pointer  (2)]</span><br><span class="line">⎜   ↳ MiMouse                                 	id=21	[slave  pointer  (2)]</span><br><span class="line"></span><br><span class="line">xinput <span class="built_in">set</span>-button-map 21 1 0 3</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a><strong>Explaination</strong></h3><p>The first number is the id of the pointer (you’ll often only have one, in this case there were two, 9 and 10).</p>
<p>The next numbers are what you do with the first, second, and third (ie, left, middle, right) mouse buttons. The “1 0 3” tells it that the left button should do a left click (action 1), the middle button should do nothing, and the right button should do a right click (action 3). If you want to make the middle button also do a left click you could use “1 1 3”. If you wanted to switch the right and left actions you could use “3 0 1”. See <a href="https://wiki.ubuntu.com/X/Config/Input" target="_blank" rel="noopener">https://wiki.ubuntu.com/X/Config/Input</a> for more info.</p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;特性分支&gt; <span class="comment"># 将特性分支合并到当前分支中，形成一个新的提交</span></span><br></pre></td></tr></table></figure>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;主分支&gt; [&lt;特性分支&gt;] <span class="comment"># 在主分支的基础上重演特性分支的修改，修改特性分支的历史（变基）</span></span><br><span class="line">git rebase --onto master server client <span class="comment"># 取出client分支，将client和server的共同祖先之后的变化在master上重演一遍</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88" target="_blank" rel="noopener">git-scm reference</a></p>
</blockquote>
<h2 id="Vscode-Go"><a href="#Vscode-Go" class="headerlink" title="Vscode Go"></a>Vscode Go</h2><p>设置GOPATH（为~/go-workspace）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ~/.zshrc &lt;&lt;<span class="string">"EOF"</span></span><br><span class="line"><span class="comment"># Set Go Path</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go-workspace</span><br><span class="line"><span class="comment"># Customize to your needs...</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>在vscode中设置：打开用户设置，设置<code>go.gopath</code></p>
<p>安装插件：<code>Go</code></p>
<p>安装依赖：(事先设置好<code>http_proxy</code>和<code>https_proxy</code>)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">go get -u -v github.com/nsf/gocode</span><br><span class="line">go get -u -v github.com/rogpeppe/godef</span><br><span class="line">go get -u -v github.com/golang/lint/golint</span><br><span class="line">go get -u -v github.com/lukehoban/go-find-references</span><br><span class="line">go get -u -v github.com/lukehoban/go-outline</span><br><span class="line">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class="line">go get -u -v golang.org/x/tools/cmd/gorename</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Tech Daily </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> git </tag>
            
            <tag> go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Deepin初始化]]></title>
      <url>http://lishangying.github.io/2017/01/12/Kubernetes-&amp;-Deepin-Settings@1-12/</url>
      <content type="html"><![CDATA[<h2 id="Infinality-and-Harfbuzz"><a href="#Infinality-and-Harfbuzz" class="headerlink" title="Infinality and Harfbuzz"></a>Infinality and Harfbuzz</h2><p>会发生冲突，这是今天Archlinux无法启动输入法界面的元凶。重新安装freetype2\fontconfig\cairo以替换infinality-bundle。</p>
<h2 id="添加PPA出现GPG问题"><a href="#添加PPA出现GPG问题" class="headerlink" title="添加PPA出现GPG问题"></a>添加PPA出现GPG问题</h2><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gpg: keybox <span class="string">'/tmp/tmpyiw6jvck/pubring.gpg'</span> created</span><br><span class="line">gpg: /tmp/tmpyiw6jvck/trustdb.gpg：建立了信任度数据库</span><br><span class="line">gpg: 密钥 531EE72F4C9D234C：公钥“Launchpad webupd8”已导入</span><br><span class="line">gpg: 合计被处理的数量：1</span><br><span class="line">gpg:           已导入：1</span><br><span class="line">gpg: 找不到有效的 OpenPGP 数据。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="可能原因："><a href="#可能原因：" class="headerlink" title="可能原因："></a>可能原因：</h4><p>keyserver.ubuntu.com使用非标准的11371端口，而一般公司的防火墙都屏蔽掉了该端口，而允许标准的80端口。</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 531EE72F4C9D234C</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E985B27B</span><br></pre></td></tr></table></figure>
<h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><p>需要安装server的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt install telnetd</span><br><span class="line">sudo systemctl start inetd</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> inetd</span><br><span class="line"><span class="comment"># arch</span></span><br><span class="line">sudo systemctl start telnet.socket</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> telnet.socket</span><br></pre></td></tr></table></figure>
<p>使用telnet测试端口是否打开：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 33171</span><br></pre></td></tr></table></figure>
<h2 id="Github-Online-File-Tree-View-Plugin"><a href="#Github-Online-File-Tree-View-Plugin" class="headerlink" title="Github Online File Tree View Plugin"></a>Github Online File Tree View Plugin</h2><p><a href="https://github.com/buunguyen/octotree" target="_blank" rel="noopener">Octotree</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> deepin </tag>
            
            <tag> ppa </tag>
            
            <tag> octotree </tag>
            
            <tag> infinality fonts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Basic Algorithms in Go]]></title>
      <url>http://lishangying.github.io/2017/01/10/Basic%20Algorithms%20in%20Go/</url>
      <content type="html"><![CDATA[<p>最近学Go，感觉挺不错的。闲来无事用它写了几种常用的基础算法。</p>
<h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><p>思想很简单，实现起来为了方便每次以left作为基准，也可以使用BFS来节省递归栈：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QuickSort returns a sorted slice</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	left, right := <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">		<span class="keyword">if</span> arr[left+<span class="number">1</span>] &gt; arr[left] &#123;</span><br><span class="line">			arr[left+<span class="number">1</span>], arr[right] = arr[right], arr[left+<span class="number">1</span>]</span><br><span class="line">			right--</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			arr[left+<span class="number">1</span>], arr[left] = arr[left], arr[left+<span class="number">1</span>]</span><br><span class="line">			left++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	QuickSort(arr[:left])</span><br><span class="line">	QuickSort(arr[left+<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>最短路核心思想就是Relax操作。效率高的单源最短路有下面两种算法：</p>
<ol>
<li>Dijikstra，不能处理负权路,但是时间复杂度比较稳定.</li>
<li>SPFA是我比较喜欢的一种算法，可以判断负权路。正常情况的时间复杂度为<code>O(kE)</code>  其中<code>k&lt;&lt;V</code>；最好的情况即一次BFS，时间复杂度为 <code>O(E)</code>，然而对于某些精心构造的图，复杂度可以达到Bellman-ford级别：<code>O(VE)</code>。<br>下面构图使用的是邻接表（适用于稀疏图），也可以用邻接矩阵（适用于稠密图）。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// adjacency list definition</span></span><br><span class="line"><span class="keyword">type</span> edge <span class="keyword">struct</span> &#123;</span><br><span class="line">	v, w <span class="keyword">int</span></span><br><span class="line">	next *edge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Graph <span class="keyword">struct</span> &#123;</span><br><span class="line">	head []*edge</span><br><span class="line">	n, m <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(G *Graph)</span> <span class="title">init</span><span class="params">(n, m <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	G.n, G.m = n, m</span><br><span class="line">	G.head = <span class="built_in">make</span>([]*edge, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(G *Graph)</span> <span class="title">add</span><span class="params">(u, v, w <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	G.head[u] = &amp;edge&#123;</span><br><span class="line">		v:    v,</span><br><span class="line">		w:    w,</span><br><span class="line">		next: G.head[u],</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SPFA returns the shortest path from begin to end</span></span><br><span class="line"><span class="comment">// begin: the begin node number</span></span><br><span class="line"><span class="comment">// end: the end node number</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(G *Graph)</span> <span class="title">SPFA</span><span class="params">(begin, end <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	visit := <span class="built_in">make</span>([]<span class="keyword">bool</span>, G.n)</span><br><span class="line">	dist := <span class="built_in">make</span>([]<span class="keyword">int</span>, G.n)</span><br><span class="line">	Q := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; G.n; i++ &#123;</span><br><span class="line">		dist[i] = <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	dist[begin] = <span class="number">0</span></span><br><span class="line">	Q = <span class="built_in">append</span>(Q, begin)</span><br><span class="line">	visit[begin] = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(Q) != <span class="number">0</span> &#123;</span><br><span class="line">		u := Q[<span class="number">0</span>]</span><br><span class="line">		<span class="keyword">for</span> e := G.head[u]; e != <span class="literal">nil</span>; e = e.next &#123;</span><br><span class="line">			<span class="keyword">if</span> dist[e.v] == <span class="number">-1</span> || dist[e.v] &gt; dist[u]+e.w &#123;</span><br><span class="line">				dist[e.v] = dist[u] + e.w</span><br><span class="line">				<span class="keyword">if</span> !visit[e.v] &#123;</span><br><span class="line">					Q = <span class="built_in">append</span>(Q, e.v)</span><br><span class="line">					visit[e.v] = <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// pop the front node</span></span><br><span class="line">		Q = Q[<span class="number">1</span>:]</span><br><span class="line">		visit[u] = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dist[end]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>字符串匹配经典算法。关键在于维护一个这样的关系：<code>x[i-next[i]...i-1]=x[0...next[i]-1]</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Kmp <span class="keyword">struct</span> &#123;</span><br><span class="line">	pattern <span class="keyword">string</span></span><br><span class="line">	next    []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x[i-p...i-1]=x[0...p-1]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(K *Kmp)</span> <span class="title">getNext</span><span class="params">()</span></span> &#123;</span><br><span class="line">	K.next = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(K.pattern)+<span class="number">1</span>)</span><br><span class="line">	K.next[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	p := <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="built_in">len</span>(K.pattern) &#123;</span><br><span class="line">		<span class="keyword">for</span> p != <span class="number">-1</span> &amp;&amp; K.pattern[i] != K.pattern[p] &#123;</span><br><span class="line">			p = K.next[p]</span><br><span class="line">		&#125;</span><br><span class="line">		p++</span><br><span class="line">		i++</span><br><span class="line">		<span class="keyword">if</span> i &lt; <span class="built_in">len</span>(K.pattern) &amp;&amp; K.pattern[i] == K.pattern[p] &#123;</span><br><span class="line">			K.next[i] = K.next[p]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			K.next[i] = p</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(K *Kmp)</span> <span class="title">match</span><span class="params">(matcher <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line">	p := <span class="number">0</span></span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="built_in">len</span>(matcher) &#123;</span><br><span class="line">		<span class="keyword">for</span> p != <span class="number">-1</span> &amp;&amp; matcher[i] != K.pattern[p] &#123;</span><br><span class="line">			p = K.next[p]</span><br><span class="line">		&#125;</span><br><span class="line">		i++</span><br><span class="line">		p++</span><br><span class="line">		<span class="keyword">if</span> p &gt;= <span class="built_in">len</span>(K.pattern) &#123;</span><br><span class="line">			ret++</span><br><span class="line">			p = K.next[p]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><em>To Be Continue…</em></strong></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kubernetes部署]]></title>
      <url>http://lishangying.github.io/2017/01/04/Kubernetes%E9%83%A8%E7%BD%B2@1-5/</url>
      <content type="html"><![CDATA[<h2 id="MEOW"><a href="#MEOW" class="headerlink" title="MEOW"></a>MEOW</h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L git.io/meowproxy | bash</span><br><span class="line"><span class="comment"># 建议安装目录 /usr/bin/</span></span><br></pre></td></tr></table></figure>
<p>复制自己的配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in local computer</span></span><br><span class="line">xclip -sel clipboard &lt; ~/.meow/rc</span><br><span class="line"><span class="comment"># in CentOS server</span></span><br><span class="line">mv ~/.meow/rc ~/.meow/rc.bak</span><br><span class="line">xclip -o -sel clipboard &gt; ~/.meow/rc</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MEOW</span><br></pre></td></tr></table></figure>
<h2 id="Hostname"><a href="#Hostname" class="headerlink" title="Hostname"></a>Hostname</h2><p>执行下面脚本。<strong>不要执行多次</strong> 如果出错则手动修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sed -i s/localhost\.localdomain/NAME/g /etc/hosts /etc/hostname </span><br><span class="line">hostname=<span class="string">"10-10-103-144.node"</span></span><br><span class="line">rm -rf /etc/hostname</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$hostname</span> &gt; /etc/hostname </span><br><span class="line">sed -i <span class="string">"s/\slocalhost\s/ localhost <span class="variable">$hostname</span> /g"</span> /etc/hosts</span><br><span class="line">sysctl kernel.hostname=<span class="variable">$hostname</span></span><br></pre></td></tr></table></figure>
<h2 id="Screenfetch"><a href="#Screenfetch" class="headerlink" title="Screenfetch"></a>Screenfetch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/KittyKatt/screenFetch/master/screenfetch-dev -o /usr/bin/screenfetch</span><br></pre></td></tr></table></figure>
<h2 id="AWK简述"><a href="#AWK简述" class="headerlink" title="AWK简述"></a>AWK简述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk -v var1=xxx BEGIN&#123;[something]&#125; [ifstatments or regex]&#123;something match the condition&#125;&#123;[always run]&#125;END&#123;[something]&#125;</span><br><span class="line"><span class="comment"># 支持if else,for,i++</span></span><br><span class="line"><span class="comment"># 支持数组（支持for in遍历，但是顺序会打乱）</span></span><br><span class="line"><span class="comment"># 最好的批量初始化的方式： </span></span><br><span class="line">arr[<span class="string">""</span>]=0 <span class="comment"># 批量设为0</span></span><br><span class="line">str=<span class="string">"a b c"</span>; split(str,arr[,<span class="string">" "</span>]);<span class="comment"># ["a","b","c"]</span></span><br></pre></td></tr></table></figure>
<h2 id="加Kubernetes源"><a href="#加Kubernetes源" class="headerlink" title="加Kubernetes源"></a>加Kubernetes源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://yum.kubernetes.io/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="安装Kubernetes"><a href="#安装Kubernetes" class="headerlink" title="安装Kubernetes"></a>安装Kubernetes</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker kubelet kubeadm kubectl kubernetes-cni</span><br></pre></td></tr></table></figure>
<h2 id="启动进程-amp-关闭防火墙"><a href="#启动进程-amp-关闭防火墙" class="headerlink" title="启动进程&amp;关闭防火墙"></a>启动进程&amp;关闭防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> docker </span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet </span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<h2 id="Tear-Down-当kubeadm-init失败时执行"><a href="#Tear-Down-当kubeadm-init失败时执行" class="headerlink" title="Tear Down(当kubeadm init失败时执行)"></a>Tear Down(当kubeadm init失败时执行)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>
<h2 id="Pull-Docker-Images"><a href="#Pull-Docker-Images" class="headerlink" title="Pull Docker Images"></a>Pull Docker Images</h2><p><strong>此方式十分艰难。后面可以通过代理直接安装。见Tech Log@1-12</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">declare</span> -a images=(</span><br><span class="line">    <span class="string">'dnsmasq-metrics-amd64:1.0'</span></span><br><span class="line">    <span class="string">'etcd-amd64:3.0.14-kubeadm'</span></span><br><span class="line">    <span class="string">'exechealthz-amd64:v1.2.0'</span></span><br><span class="line">    <span class="string">'kube-apiserver-amd64:v1.5.1'</span></span><br><span class="line">    <span class="string">'kube-controller-manager-amd64:v1.5.1'</span></span><br><span class="line">    <span class="string">'kube-discovery-amd64:1.0'</span></span><br><span class="line">    <span class="string">'kube-dnsmasq-amd64:1.4'</span></span><br><span class="line">    <span class="string">'kube-proxy-amd64:v1.5.1'</span></span><br><span class="line">    <span class="string">'kube-scheduler-amd64:v1.5.1'</span></span><br><span class="line">    <span class="string">'kubedns-amd64:1.9'</span></span><br><span class="line">    <span class="string">'kubernetes-dashboard-amd64:v1.5.0'</span></span><br><span class="line">    <span class="string">'pause-amd64:3.0'</span></span><br><span class="line"><span class="comment">#   'weave-kube:1.8.1'</span></span><br><span class="line"><span class="comment">#   'weave-npc:1.8.1'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    docker pull stkevintan/<span class="variable">$imageName</span></span><br><span class="line">    docker tag stkevintan/<span class="variable">$imageName</span> gcr.io/google_containers/<span class="variable">$imageName</span></span><br><span class="line">    docker rmi stkevintan/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xclip -o -sel clipboard &gt; pull_docker</span><br><span class="line">chmod +x pull_docker</span><br><span class="line">./pull_docker</span><br></pre></td></tr></table></figure>
<h2 id="初始化（Master）"><a href="#初始化（Master）" class="headerlink" title="初始化（Master）"></a>初始化（Master）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先需要使用@17-1-3的脚本设置代理。</span></span><br><span class="line"><span class="comment"># Del environment</span></span><br><span class="line"><span class="comment"># Set curl</span></span><br><span class="line"><span class="comment"># Set kube env</span></span><br><span class="line"><span class="comment"># Set docker</span></span><br><span class="line"><span class="comment"># 在/etc/default/docker的DOCKER_OPTS中加入:--insecure-registry gcr.io</span></span><br><span class="line">root@10-10-103-144 ~ $ kubeadm init</span><br><span class="line">[kubeadm] WARNING: kubeadm is <span class="keyword">in</span> alpha, please <span class="keyword">do</span> not use it <span class="keyword">for</span> production clusters.</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[init] Using Kubernetes version: v1.5.2</span><br><span class="line">[tokens] Generated token: <span class="string">"c30875.954dc1dda4d0184b"</span></span><br><span class="line">[certificates] Generated Certificate Authority key and certificate.</span><br><span class="line">[certificates] Generated API Server key and certificate</span><br><span class="line">[certificates] Generated Service Account signing keys</span><br><span class="line">[certificates] Created keys and certificates <span class="keyword">in</span> <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">"/etc/kubernetes/kubelet.conf"</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">"/etc/kubernetes/admin.conf"</span></span><br><span class="line">[apiclient] Created API client, waiting <span class="keyword">for</span> the control plane to become ready</span><br><span class="line">[apiclient] All control plane components are healthy after 16.391731 seconds</span><br><span class="line">[apiclient] Waiting <span class="keyword">for</span> at least one node to register and become ready</span><br><span class="line">[apiclient] First node is ready after 0.509209 seconds</span><br><span class="line">[apiclient] Creating a <span class="built_in">test</span> deployment</span><br><span class="line">[apiclient] Test deployment succeeded</span><br><span class="line">[token-discovery] Created the kube-discovery deployment, waiting <span class="keyword">for</span> it to become ready</span><br><span class="line">[token-discovery] kube-discovery is ready after 3.505676 seconds</span><br><span class="line">[addons] Created essential addon: kube-proxy</span><br><span class="line">[addons] Created essential addon: kube-dns</span><br><span class="line"></span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">    http://kubernetes.io/docs/admin/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node:</span><br><span class="line"></span><br><span class="line">kubeadm join --token=c30875.954dc1dda4d0184b 10.10.103.144</span><br></pre></td></tr></table></figure>
<h2 id="初始化（Node）"><a href="#初始化（Node）" class="headerlink" title="初始化（Node）"></a>初始化（Node）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要在子节点上安装kubelet kubectl kubernetes-cni kubeadm</span></span><br><span class="line"><span class="comment"># 需要使用@17-1-3的脚本设置代理。</span></span><br><span class="line"><span class="comment"># Del environment</span></span><br><span class="line"><span class="comment"># Set curl</span></span><br><span class="line"><span class="comment"># Set kube env</span></span><br><span class="line"><span class="comment"># Set docker</span></span><br><span class="line"><span class="comment"># 在/etc/default/docker的DOCKER_OPTS中加入:--insecure-registry gcr.io</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line"></span><br><span class="line">kubeadm join --token=ace10c.73fcdec44f7a4045 10.10.103.146</span><br></pre></td></tr></table></figure>
<p>可以在master节点上看到该子节点：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@master ~ $ kubectl get node</span><br><span class="line">NAME      STATUS         AGE</span><br><span class="line">master    Ready,master   5d</span><br><span class="line">node1     Ready          1m</span><br></pre></td></tr></table></figure>
<h2 id="Weave-Network"><a href="#Weave-Network" class="headerlink" title="Weave Network"></a>Weave Network</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download config file</span></span><br><span class="line">curl -L https://git.io/weave-kube -o weave-kube.yaml</span><br><span class="line"><span class="comment"># pull docker image</span></span><br><span class="line">docker pull stkevintan/weave-kube:1.8.1</span><br><span class="line">docker tag stkevintan/weave-kube:1.8.1 weaveworks/weave-kube:1.8.1</span><br><span class="line">docker rmi stkevintan/weave-kube:1.8.1</span><br><span class="line"><span class="comment"># create</span></span><br><span class="line">kubectl create -f weave-kube.yaml</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">kubectl create -f https://git.io/weave-kube</span><br></pre></td></tr></table></figure>
<p>可以看到结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@master ~ $ kubectl get pod --namespace=kube-system</span><br><span class="line">NAME                              READY     STATUS              RESTARTS   AGE</span><br><span class="line">dummy-2088944543-bv5gj            1/1       Running             0          5d</span><br><span class="line">etcd-master                       1/1       Running             0          5d</span><br><span class="line">kube-apiserver-master             1/1       Running             27         5d</span><br><span class="line">kube-controller-manager-master    1/1       Running             0          5d</span><br><span class="line">kube-discovery-1769846148-xbm2h   1/1       Running             0          5d</span><br><span class="line">kube-dns-2924299975-phn03         0/4       ContainerCreating   0          5d</span><br><span class="line">kube-proxy-081gt                  1/1       Running             0          5d</span><br><span class="line">kube-proxy-qc40l                  1/1       Running             0          1h</span><br><span class="line">kube-scheduler-master             1/1       Running             1          5d</span><br><span class="line">weave-net-4wvkm                   0/2       ContainerCreating   0          30s</span><br><span class="line">weave-net-l7dh0                   0/2       ContainerCreating   0          30s</span><br></pre></td></tr></table></figure>
<h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml -o kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s/v1.5.1/v1.5.0/g'</span> kubernetes-dashboard.yaml <span class="comment"># 注意此时gcr上面并没有v1.5.1</span></span><br><span class="line">sed -i <span class="string">'s/Alaways/IfNotPresent/g'</span> kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure>
<h2 id="Delete-Pod"><a href="#Delete-Pod" class="headerlink" title="Delete Pod"></a>Delete Pod</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f xxx.yaml</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Cloud Computing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> meow </tag>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos初始化2]]></title>
      <url>http://lishangying.github.io/2017/01/04/CentOS2@1-4/</url>
      <content type="html"><![CDATA[<h2 id="proxychains-ng"><a href="#proxychains-ng" class="headerlink" title="proxychains-ng"></a>proxychains-ng</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng                                 </span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc </span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make install-config   <span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'http 10.100.100.136 4411'</span> &gt;&gt; /etc/proxychains.conf  <span class="comment"># 输入代理设置</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="TMUX"><a href="#TMUX" class="headerlink" title="TMUX"></a>TMUX</h2><p>CentOS的版本太老，手动编译最新版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install ncurses-devel libevent-devel</span><br><span class="line">curl -L https://github.com/tmux/tmux/releases/download/2.3/tmux-2.3.tar.gz | tar xz</span><br><span class="line"><span class="built_in">cd</span> tmux-2.3</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>如果出现<code>protocol version mismatch</code>错误，说明现在tmux正在运行，手动结束掉即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 `pidof tmux`</span><br></pre></td></tr></table></figure>
<h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gpakosz/.tmux.git</span><br><span class="line">ln -s -f .tmux/.tmux.conf</span><br><span class="line">cp .tmux/.tmux.conf.local .</span><br><span class="line">vim .tmux.conf.local <span class="comment">#编辑配置文件</span></span><br><span class="line"><span class="comment"># 去掉status left/right sections separators后面几行的注释（终端字体需要支持Powerline）</span></span><br><span class="line"><span class="comment"># 启用 force vi mode</span></span><br></pre></td></tr></table></figure>
<h3 id="shortcuts"><a href="#shortcuts" class="headerlink" title="shortcuts"></a>shortcuts</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Session</span></span><br><span class="line">:new[-s name]  <span class="comment"># new session</span></span><br><span class="line">:<span class="built_in">kill</span>-session[-t name] <span class="comment"># kill session</span></span><br><span class="line">:ls <span class="comment"># list sessions</span></span><br><span class="line">C-c <span class="comment"># new session</span></span><br><span class="line">s  <span class="comment"># list and select sessions</span></span><br><span class="line">$  <span class="comment"># name session</span></span><br><span class="line"></span><br><span class="line">==============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># Window</span></span><br><span class="line">c  <span class="comment"># create window</span></span><br><span class="line">w  <span class="comment"># list windows</span></span><br><span class="line">n  <span class="comment"># next window</span></span><br><span class="line">p  <span class="comment"># previous window</span></span><br><span class="line">f  <span class="comment"># find window</span></span><br><span class="line">,  <span class="comment"># name window</span></span><br><span class="line">&amp;  <span class="comment"># kill window</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># Panes</span></span><br><span class="line">%  <span class="comment">#vertical split</span></span><br><span class="line"><span class="string">"  # horizontal split</span></span><br><span class="line"><span class="string">o  # swap panes</span></span><br><span class="line"><span class="string">q  # show pane numbers</span></span><br><span class="line"><span class="string">x  # kill pane</span></span><br><span class="line"><span class="string">+  # 最大化pane，再按一次还原</span></span><br><span class="line"><span class="string">-  # restore pane from window</span></span><br><span class="line"><span class="string">⍽  # space - toggle between layouts</span></span><br><span class="line"><span class="string">q  # (Show pane numbers, when the numbers show up type the key to goto that pane)</span></span><br><span class="line"><span class="string">&#123;  # (Move the current pane left)</span></span><br><span class="line"><span class="string">&#125;  # (Move the current pane right)</span></span><br><span class="line"><span class="string">z  # toggle pane zoom</span></span><br><span class="line"><span class="string">方向键 # select the sibling pane</span></span><br><span class="line"><span class="string">C-方向键 # resize current pane</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">================================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Misc</span></span><br><span class="line"><span class="string">d  # detach</span></span><br><span class="line"><span class="string">t  # big clock</span></span><br><span class="line"><span class="string">?  # list shortcuts</span></span><br><span class="line"><span class="string">:  # prompt</span></span><br></pre></td></tr></table></figure>
<h3 id="Tmux-Plugin-Manager-amp-amp-tmux-yank"><a href="#Tmux-Plugin-Manager-amp-amp-tmux-yank" class="headerlink" title="Tmux Plugin Manager &amp;&amp; tmux-yank"></a>Tmux Plugin Manager &amp;&amp; tmux-yank</h3><p>tmux-yank可以将tmux的paste-buffer中的文字拷贝到系统剪贴板</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yumi xclip <span class="comment"># 安装依赖</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm </span><br><span class="line">vim .tmux.conf <span class="comment"># 在最后添加下面几行，注意不是 .tmux.conf.local!!!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List of plugins</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-yank'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)</span></span><br><span class="line">run <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br></pre></td></tr></table></figure>
<p>然后，重新加载tmux，按<prefix> + I 安装<code>tmux-yank</code>插件</prefix></p>
<p>然后，并不能奏效，因为xclip需要有X服务。然而ssh客户端Centos只是纯命令行。需要开启<code>X11Forwarding</code></p>
<h2 id="X11Forwarding"><a href="#X11Forwarding" class="headerlink" title="X11Forwarding"></a>X11Forwarding</h2><ol>
<li><p>在远程Centos中的<code>/etc/ssh/ssh_config</code>文件中，添加<code>X11Forwarding yes</code></p>
</li>
<li><p>在远程Centos中安装认证软件：<code>yumi xorg-x11-xauth</code></p>
</li>
<li><p>在本地ssh连接命令添加<code>-Y</code>参数</p>
<p>启用x11转发之后就可以在Centos中启动x11程序了，可以安装轻量级的xfce4-terminal方便操作。</p>
</li>
</ol>
<h2 id="Prezto"><a href="#Prezto" class="headerlink" title="Prezto"></a>Prezto</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  git <span class="built_in">clone</span> --recursive https://github.com/sorin-ionescu/prezto.git <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.zprezto"</span></span><br><span class="line">rm -rf .zshrc .zpreztorc .zlogin .zlogout .zprofile .zshenv .zhistory .zcompdump</span><br><span class="line"><span class="built_in">setopt</span> EXTENDED_GLOB</span><br><span class="line"><span class="keyword">for</span> rcfile <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>"</span>/.zprezto/runcoms/^README.md(.N); <span class="keyword">do</span></span><br><span class="line">  ln -s <span class="string">"<span class="variable">$rcfile</span>"</span> <span class="string">"<span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.<span class="variable">$&#123;rcfile:t&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题列表</span></span><br><span class="line">prompt -l</span><br><span class="line"><span class="comment"># 预览主题</span></span><br><span class="line">prompt -p NAME</span><br><span class="line"><span class="comment"># 做个备份</span></span><br><span class="line">mv .zpreztorc .zpreztorc.tmp</span><br><span class="line"><span class="comment"># 添加常用插件(不要第二次运行，而是手动修改.zpreztorc文件)</span></span><br><span class="line">awk -v s=<span class="string">"syntax-highlighting git command-not-found yum history-substring-search autosuggestions"</span> \</span><br><span class="line"><span class="string">'BEGIN&#123;n=split(s,m)&#125;/'</span>\<span class="string">''</span>utility<span class="string">'\'</span><span class="string">'\s+\\/&#123;for(i=1;i&lt;=n;i++)printf("  '</span>\<span class="string">''</span>%s<span class="string">'\'</span><span class="string">' \\\n",m[i])&#125;&#123;print&#125;'</span> .zpreztorc.tmp &gt; .zpreztorc</span><br><span class="line"><span class="comment"># 修改默认主题（推荐 skwp）</span></span><br><span class="line">sed -i <span class="string">"s/\(zstyle.*theme\s\).*/\1'skwp'/"</span> .zpreztorc</span><br></pre></td></tr></table></figure>
<h2 id="Yum-Aliases"><a href="#Yum-Aliases" class="headerlink" title="Yum Aliases"></a>Yum Aliases</h2><ul>
<li><code>yumc</code> removes package(s) and leaves.</li>
<li><code>yumi</code> installs package(s).</li>
<li><code>yumh</code> displays history.</li>
<li><code>yuml</code> lists packages.</li>
<li><code>yumL</code> lists installed packages.</li>
<li><code>yumq</code> displays package information.</li>
<li><code>yumr</code> removes package(s).</li>
<li><code>yums</code> searches for a package.</li>
<li><code>yumu</code> updates packages.</li>
<li><code>yumU</code> upgrades packages.</li>
</ul>
<h2 id="spf13-Vim"><a href="#spf13-Vim" class="headerlink" title="spf13 Vim"></a>spf13 Vim</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> tmux </tag>
            
            <tag> prezto </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos初始化]]></title>
      <url>http://lishangying.github.io/2017/01/03/CentOS1@1-3/</url>
      <content type="html"><![CDATA[<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h3 id="写入国内源-centos-7"><a href="#写入国内源-centos-7" class="headerlink" title="写入国内源(centos 7)"></a>写入国内源(centos 7)</h3><p>ustc： <a href="https://lug.ustc.edu.cn/wiki/mirrors/help/centos" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/centos</a></p>
<a id="more"></a>
<p>163：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line">#</span><br><span class="line"># The mirror system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="line"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="line"># unless you are manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class="line"># remarked out baseurl= line instead.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base - 163.com</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">#released updates</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates - 163.com</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">#additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras - 163.com</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">#additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus - 163.com</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># Author: Kevin Tan</span></span><br><span class="line"><span class="comment"># Update-Date: 2017-1-14</span></span><br><span class="line">URL=<span class="variable">$1</span></span><br><span class="line">ACTION=(<span class="string">'\nSet'</span> <span class="string">'\nDel'</span>)</span><br><span class="line">mode=1</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$URL</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'[Warning]: URL parameter is empty, default action change to remove'</span></span><br><span class="line">    mode=2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="function"><span class="title">set_proxy</span></span>()&#123;</span><br><span class="line">  file=<span class="variable">$1</span>;prefix=<span class="variable">$2</span>;value=<span class="string">"<span class="variable">$2</span>=<span class="variable">$3</span>"</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Set \"<span class="variable">$value</span>\" to \"<span class="variable">$file</span>\""</span></span><br><span class="line">  <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$file</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> grep -q <span class="string">"^\s*<span class="variable">$prefix</span>"</span> <span class="string">"<span class="variable">$file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">        sed -i <span class="string">"s#^\s*<span class="variable">$prefix</span>=.*#<span class="variable">$value</span>#g"</span> <span class="variable">$file</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$value</span> &gt;&gt; <span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">del_proxy</span></span>()&#123;</span><br><span class="line">    file=<span class="variable">$1</span>;prefix=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Del \"<span class="variable">$prefix</span>\" from \"<span class="variable">$file</span>\""</span></span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$file</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        sed -i <span class="string">"/^\s*<span class="variable">$prefix</span>=.*/d"</span> <span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$prefix</span>=<span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SHELL_NAME=`ps -p $$ | awk <span class="string">'NR==2 &#123;print $4&#125;'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Current shell is '</span><span class="variable">$SHELL_NAME</span></span><br><span class="line"><span class="function"><span class="title">source_file</span></span>()&#123;</span><br><span class="line">    <span class="comment">## bash</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$SHELL_NAME</span>"</span> = <span class="string">"bash"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">source</span> <span class="variable">$HOME</span><span class="string">'/.bashrc'</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment">## zsh</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$SHELL_NAME</span>"</span> = <span class="string">"zsh"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">source</span> <span class="variable">$HOME</span><span class="string">'/.zshrc'</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$&#123;ACTION[$mode]&#125;</span><span class="string">' the yum? (y/n/r) '</span>;<span class="built_in">read</span> F</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    set_proxy <span class="string">'/etc/yum.conf'</span> <span class="string">'proxy'</span> <span class="variable">$URL</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$F</span> = <span class="string">'r'</span> ] || ([ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 2 ]); <span class="keyword">then</span></span><br><span class="line">    del_proxy <span class="string">'/etc/yum.conf'</span> <span class="string">'proxy'</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># environment</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$&#123;ACTION[$mode]&#125;</span><span class="string">' the environment var?(y/n/r) '</span>;<span class="built_in">read</span> F</span><br><span class="line">shell_names=(zsh bash)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;shell_names[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        set_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export http_proxy"</span> <span class="variable">$URL</span></span><br><span class="line">        set_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export https_proxy"</span> <span class="variable">$URL</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    source_file</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$F</span> = <span class="string">'r'</span> ] || ([ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 2 ]); <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;shell_names[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        del_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export http_proxy"</span></span><br><span class="line">        del_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export https_proxy"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#curl</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$&#123;ACTION[$mode]&#125;</span><span class="string">' the curl proxy alias?(y/n/r) '</span>;<span class="built_in">read</span> F</span><br><span class="line">shell_names=(zsh bash)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;shell_names[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    	set_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"alias curl"</span> <span class="string">"\"curl -x <span class="variable">$URL</span>\""</span>   </span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    source_file</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$F</span> = <span class="string">'r'</span> ] || ([ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 2 ]); <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;shell_names[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        del_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"alias curl"</span></span><br><span class="line">        <span class="built_in">unalias</span> curl</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$&#123;ACTION[$mode]&#125;</span><span class="string">' kube environment var?(y/n/r) '</span>;<span class="built_in">read</span> F</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;shell_names[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        set_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBERNETES_HTTP_PROXY"</span> <span class="variable">$URL</span></span><br><span class="line">        set_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBERNETES_HTTPS_PROXY"</span> <span class="variable">$URL</span></span><br><span class="line">        set_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBE_BUILD_HTTPS_PROXY"</span> <span class="variable">$URL</span></span><br><span class="line">        set_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBE_BUILD_HTTP_PROXY"</span> <span class="variable">$URL</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    source_file</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$F</span> = <span class="string">'r'</span> ] || ([ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 2 ]); <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;shell_names[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        del_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBERNETES_HTTP_PROXY"</span></span><br><span class="line">        del_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBERNETES_HTTPS_PROXY"</span></span><br><span class="line">        del_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBE_BUILD_HTTPS_PROXY"</span></span><br><span class="line">        del_proxy <span class="string">"<span class="variable">$HOME</span>/.<span class="variable">$&#123;name&#125;</span>rc"</span> <span class="string">"export KUBE_BUILD_HTTP_PROXY"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$&#123;ACTION[$mode]&#125;</span><span class="string">' the docker?(y/n/r) '</span>;<span class="built_in">read</span> F</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span> <span class="string">"docker"</span> &amp;&gt;/dev/null &amp;&amp; ([ <span class="variable">$F</span> = <span class="string">'y'</span> ] || [ <span class="variable">$F</span> = <span class="string">'r'</span> ]); <span class="keyword">then</span></span><br><span class="line">        DOCKER_CONF_DIR=<span class="string">'/etc/systemd/system/docker.service.d'</span></span><br><span class="line">        DOCKER_CONF=<span class="variable">$DOCKER_CONF_DIR</span><span class="string">'/http-proxy.conf'</span></span><br><span class="line">        REGISTRY=<span class="string">"87129800.m.daodocker.io"</span></span><br><span class="line">        sudo mkdir -p <span class="string">"<span class="variable">$DOCKER_CONF_DIR</span>"</span></span><br><span class="line">        sudo rm -rf <span class="variable">$DOCKER_CONF</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$F</span> = <span class="string">'y'</span> ] &amp;&amp; [ <span class="variable">$mode</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"[Service]\nEnvironment="</span> | sudo tee <span class="variable">$DOCKER_CONF</span> &gt; /dev/null</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"\"HTTP_PROXY=%s\" "</span> <span class="variable">$URL</span> | sudo tee -a <span class="variable">$DOCKER_CONF</span> &gt; /dev/null</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"\"HTTPS_PROXY=%s\" "</span> <span class="variable">$URL</span> | sudo tee -a <span class="variable">$DOCKER_CONF</span> &gt; /dev/null</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"\"NO_PROXY=localhost,%s\""</span> <span class="variable">$REGISTRY</span> | sudo tee -a <span class="variable">$DOCKER_CONF</span> &gt; /dev/null</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        sudo systemctl daemon-reload</span><br><span class="line">        sudo systemctl restart docker</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Daemon reloaded"</span></span><br><span class="line">        systemctl show --property=Environment docker </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>将上面脚本保持为setproxy，然后执行,注意，如果当前环境下已经有了http_proxy等变量。则需要我们手动reset</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x setproxy</span><br><span class="line"><span class="built_in">source</span> setproxy http://10.100.100.136:4411</span><br></pre></td></tr></table></figure>
<h2 id="基础建设"><a href="#基础建设" class="headerlink" title="基础建设"></a>基础建设</h2><h3 id="git-amp-amp-gcc"><a href="#git-amp-amp-gcc" class="headerlink" title="git &amp;&amp; gcc"></a>git &amp;&amp; gcc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc</span><br></pre></td></tr></table></figure>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://bootstrap.pypa.io/get-pip.py"</span> | python</span><br></pre></td></tr></table></figure>
<p>EPEL</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure>
<h2 id="ZSH"><a href="#ZSH" class="headerlink" title="ZSH"></a>ZSH</h2><h3 id="安装-amp-激活"><a href="#安装-amp-激活" class="headerlink" title="安装 &amp; 激活"></a>安装 &amp; 激活</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pygobject-tutorial-1]]></title>
      <url>http://lishangying.github.io/2016/11/08/pygobject-tutorial-1/</url>
      <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>这章将会介绍GTK+比较重要的几个方面</p>
<h2 id="主循环和信号"><a href="#主循环和信号" class="headerlink" title="主循环和信号"></a>主循环和信号</h2><p>就像大部分GUI库一样，GTK+使用了一种事件驱动的编程模型。当用户什么都没做，GTK+让主循环处于就绪状态并等待用户的输入。如果用户做了一些动作，比如鼠标事件，主循环就会被唤醒，然后将这个事件传递给GTK+程序。<br><a id="more"></a><br>当部件收到一个事件，它们将会频繁的发出一个或者更多的信号，这些信号将会调用与之相绑定的函数。这样的函数通常被称作回调函数。当回调函数被调用时，你就可以进行一些操作了。比如说，你可能要弹出一个文件选择对话框当一个“打开”按钮被点击的之后。当回调函数执行完毕之后，GTK+将会返回到主循环然后等待用户再一次输入。</p>
<p>一个典型的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler_id = widget.connect(<span class="string">'event'</span>,callback,data)</span><br></pre></td></tr></table></figure></p>
<p>首先，<code>widget</code>是一个之前以及创建好的widget实例。接着，我们来看看事件，每个部件都有它自己的事件。举个例子，如果你有一个按钮，那么你往往希望绑定它的点击事件。这样只要按钮被点击，你就能收到它所触发的信号。然后，参数<code>callback</code>代表者需要调用的回调函数的名字，它包含者将要运行的代码，当特定的信号产生之后。最后，<code>data</code>参数包含着任意你想要传递的数据，这个参数是一个可选参数，如果不需要可以省略。<br>该方法返回一个数值，标志着这个signal-callback对。当这个函数再也不会</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> gtk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS DOM API分析]]></title>
      <url>http://lishangying.github.io/2016/11/02/dom-compatibility-note/</url>
      <content type="html"><![CDATA[<h2 id="Element-classList"><a href="#Element-classList" class="headerlink" title="Element.classList"></a>Element.classList</h2><p>返回DOMTokenList,IE version&gt;=10不完全支持。</p>
<ol>
<li>不支持classList.contains的第二个参数(force)</li>
<li>add和remove方法不支持多参数</li>
<li>SVG,MathML结点没有classList属性</li>
</ol>
<a id="more"></a>
<h2 id="Node种类"><a href="#Node种类" class="headerlink" title="Node种类"></a>Node种类</h2><h3 id="Node-nodeName"><a href="#Node-nodeName" class="headerlink" title="Node.nodeName"></a>Node.nodeName</h3><table>
<thead>
<tr>
<th style="text-align:left">Interface</th>
<th style="text-align:left">nodeName</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Comment</td>
<td style="text-align:left">#comment</td>
</tr>
<tr>
<td style="text-align:left">Document</td>
<td style="text-align:left">#document</td>
</tr>
<tr>
<td style="text-align:left">DocumentFragment</td>
<td style="text-align:left">#document-fragment</td>
</tr>
</tbody>
</table>
<h2 id="Node的树遍历"><a href="#Node的树遍历" class="headerlink" title="Node的树遍历"></a>Node的树遍历</h2><p>Node树遍历普遍要考虑空白文字结点。(whitespace textNode)。</p>
<h3 id="Node-childNodes"><a href="#Node-childNodes" class="headerlink" title="Node.childNodes"></a>Node.childNodes</h3><p>返回一个NodeList，表示该结点的所有子结点，包括文字结点和注释，该NodeList里面全部是object，并没有string。可以使用ParentNode.children来获得所有纯Element结点集合。</p>
<h3 id="Node-firstChild"><a href="#Node-firstChild" class="headerlink" title="Node.firstChild"></a>Node.firstChild</h3><p>返回结点的第一个子结点。可能是whitespace textNode。<br>可以使用Element.firstElementChild来获得Element结点。</p>
<h3 id="Node-lastChild"><a href="#Node-lastChild" class="headerlink" title="Node.lastChild"></a>Node.lastChild</h3><p>返回结点的最后一个子结点。可能是whitespace textNode。<br>可以使用Element.lastElementChild来获得Element结点。</p>
<h3 id="Node-nextSibling"><a href="#Node-nextSibling" class="headerlink" title="Node.nextSibling"></a>Node.nextSibling</h3><p>返回下一个兄弟结点，可能是whitespace textNode。可以使用Element.nextElementSibling获得Element结点。</p>
<h3 id="Node-previousSibling"><a href="#Node-previousSibling" class="headerlink" title="Node.previousSibling"></a>Node.previousSibling</h3><p>返回前一个兄弟结点，可能whitespace textNode。可以使用Element.previousElementSibling获得Element结点。</p>
<h2 id="Node-innerText"><a href="#Node-innerText" class="headerlink" title="Node.innerText"></a>Node.innerText</h2><p>是一个非标准的属性，返回当前结点包括其子结点的所有文字。可以使用标准方法Node.textContent代替。</p>
<h2 id="Node-textContent"><a href="#Node-textContent" class="headerlink" title="Node.textContent"></a>Node.textContent</h2><h2 id="Node-parentElement"><a href="#Node-parentElement" class="headerlink" title="Node.parentElement"></a>Node.parentElement</h2><p>返回当前Node的父Element元素，如果没有父Element元素，返回null。</p>
<h2 id="Node-parentNode"><a href="#Node-parentNode" class="headerlink" title="Node.parentNode"></a>Node.parentNode</h2><p>一个元素的parentNode可能是另一个元素、Document或者DocumentFragment。<br>Document和DocumentFragment的parentNode是null，同样，一个刚刚创建的node，如果还没有加到dom树里面，它的parentNode同样是null。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除某element：</span></span><br><span class="line">ele.parentNode.removeChild(ele);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascirpt </tag>
            
            <tag> dom </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[neutron源码分析]]></title>
      <url>http://lishangying.github.io/2016/10/28/neutron-code/</url>
      <content type="html"><![CDATA[<h2 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h2><p>Openstack各项目之间通过RESTful API进行通信；而项目内部不同服务进程则需要通过消息总线通信。关于消息总线的实现，包含在Openstack.oslo.messaging库中。</p>
<h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>远程过程调用，一个服务进程可以调用其他远程服务进程的方法，有两种方式：</p>
<ul>
<li>call 远程方法会被同步执行，调用者会阻塞直到取得返回结果。</li>
<li>cast 远程方法会被异步执行，调用者需要通过其他方式查询这次远程调用的结果。</li>
</ul>
<a id="more"></a>
<h3 id="事件通知-Event-Notification"><a href="#事件通知-Event-Notification" class="headerlink" title="事件通知(Event Notification)"></a>事件通知(Event Notification)</h3><p>服务可以把事件通知发到消息总线上，该消息总线上所有对此类事件感兴趣的服务进程，都可以获得次事件通知并进行处理。处理结果不会返回事件发送者。</p>
<h3 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h3><p>AMQP是一个异步消息传递所使用的开放的应用层协议规范。包括导向、队列、路由、可靠性和安全性。不同的AMQP实现可以进行相互操作。<br>所有消息都有一个routing key,所有Queue都有一个binding key。生产者将消息发送给Exchange,然后Exchange根据这两个key把消息送到相匹配的Queue中。不同类型的Exchange有不同的匹配算法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Direct</td>
<td style="text-align:left">binding key和routing key必须完全一样，不支持通配符</td>
</tr>
<tr>
<td style="text-align:left">Topic</td>
<td style="text-align:left">同Direct类型，但是支持通配符，”*”匹配单字，“#”匹配零个或多个单字，单字之间由“.”来分割</td>
</tr>
<tr>
<td style="text-align:left">Fanout</td>
<td style="text-align:left">忽略binding key和routing key，广播式路由</td>
</tr>
</tbody>
</table>
<h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>WSGI 是一个连接服务端和应用端的接口。WSGI把Web组件分为三部分：</p>
<ul>
<li>WSGI Server</li>
<li>WSGI Middleware</li>
<li>WSGI Application</li>
</ul>
<p>An Application must return an iterable object.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ,start_response)</span>:</span></span><br><span class="line">   start_response(<span class="string">'200 Ok'</span>,[(<span class="string">'Content-Type'</span>,<span class="string">'text/plain'</span>)])</span><br><span class="line">   <span class="keyword">yield</span> <span class="string">'Hello World\n'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>environ</code>:一个dict，包括CGI中定义的环境变量以及7个WSGI所定义的环境变量：wsgi.version,wsgi_input…</li>
<li><code>start_response</code>: 回调函数，要返回一个write(data)对象，用作兼容现有的特殊框架，一般返回None</li>
</ul>
<h3 id="Paste-Deploy"><a href="#Paste-Deploy" class="headerlink" title="Paste.Deploy"></a>Paste.Deploy</h3><p>Paste Deploy通过api-paste.ini配置<br>Paste配置文件分为多个section，每个section以<code>type</code>:<code>name</code>的格式命名。<br>（书上P99）</p>
<h3 id="WebOb"><a href="#WebOb" class="headerlink" title="WebOb"></a>WebOb</h3><p>对WSGI的封装，包含：</p>
<ul>
<li><code>webob.Request</code> 对WSGI的environ的封装</li>
<li><code>webob.Response</code> 对WSGI响应的封装 </li>
<li><code>webob.exc</code> 对HTTP错误代码的封装</li>
</ul>
<p>Webob提供了<code>webob.dec.wsgify</code>的decorator，可以快速开发application<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承自webob.Request</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span><span class="params">(webob.Request)</span>:</span> </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_local</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.remote_addr == <span class="string">'127.0.0.1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wsgify(RequestClass=MyRequest) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(req)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> req.is_local:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'hi!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> webob.exc.HTTPForbidden</span><br></pre></td></tr></table></figure></p>
<h2 id="Eventlet"><a href="#Eventlet" class="headerlink" title="Eventlet"></a>Eventlet</h2><p>Openstack的协程模块</p>
<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>与线程类似，拥有独立的栈和局部变量，但是无法同时执行，(Compare To: Javascript callback)</p>
<h3 id="GreenThread"><a href="#GreenThread" class="headerlink" title="GreenThread"></a>GreenThread</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eventlet</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(param)</span>:</span></span><br><span class="line">    <span class="comment"># do something in coroutine</span></span><br><span class="line">    <span class="keyword">return</span> param</span><br><span class="line">gt = eventlet.spawn(my_func,param)</span><br><span class="line">result = gt.wait()</span><br></pre></td></tr></table></figure>
<p><code>eventlet.spawn</code>只是创建一个协程并不立即执行，直到主线程运行到<code>gt.wait()</code>时才开始进入调度序列。</p>
<h3 id="Monkey-Path"><a href="#Monkey-Path" class="headerlink" title="Monkey Path"></a>Monkey Path</h3><p>实现协程需要使用Patch的方式对Python的网络相关的标准库进行改写，这个patch就叫<code>monkey_patch</code>。<br>Monkey Patch是大部分使用Eventlet函数库之前需要进行的初始化工作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ceilometer/cmd/__init__.py</span></span><br><span class="line"><span class="keyword">import</span> eventlet</span><br><span class="line"><span class="comment"># patch socket,select,thread三个模块</span></span><br><span class="line">eventlet.monkey_patch(socket=<span class="keyword">True</span>,select=<span class="keyword">True</span>,thread=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="Oslo"><a href="#Oslo" class="headerlink" title="Oslo"></a>Oslo</h2><p>Openstack 通用库</p>
<h3 id="Cliff"><a href="#Cliff" class="headerlink" title="Cliff"></a>Cliff</h3><p>构建命令行程序<br>DEMO: <a href="https://github.com/openstack/cliff/tree/master/demoapp" target="_blank" rel="noopener">https://github.com/openstack/cliff/tree/master/demoapp</a></p>
<h3 id="oslo-config"><a href="#oslo-config" class="headerlink" title="oslo.config"></a>oslo.config</h3><p>解析命令行和配置文件中的配置选项（书上P111）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo.config <span class="keyword">import</span> cfg</span><br><span class="line">conf(sys.argv[<span class="number">1</span>:],project=`xyz`) <span class="comment"># 初始化，使得oslo.config能够正常解析配置文件和命令行选项</span></span><br><span class="line">rabbit_group = cfg.OptGroup(name=<span class="string">'rabbit'</span>,</span><br><span class="line">                            title=<span class="string">'RabbitMQ options'</span>)</span><br><span class="line"></span><br><span class="line">rabbit_host_opt = cfg.StrOpt(<span class="string">'host'</span>,</span><br><span class="line">                             default=<span class="string">'localhost'</span>,</span><br><span class="line">                             help=<span class="string">'IP/hostname to listen on.'</span>),</span><br><span class="line">rabbit_port_opt = cfg.PortOpt(<span class="string">'port'</span>,</span><br><span class="line">                              default=<span class="number">5672</span>,</span><br><span class="line">                              help=<span class="string">'Port number to listen on.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_rabbit_opts</span><span class="params">(conf)</span>:</span></span><br><span class="line">    conf.register_group(rabbit_group)</span><br><span class="line">    <span class="comment"># options can be registered under a group in either of these ways:</span></span><br><span class="line">    conf.register_opt(rabbit_host_opt, group=rabbit_group)</span><br><span class="line">    conf.register_opt(rabbit_port_opt, group=<span class="string">'rabbit'</span>)</span><br></pre></td></tr></table></figure></p>
<p>如果没有指定group，则选项默认放在[DEFAULT]组下<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># glance-api.conf:</span></span><br><span class="line"><span class="section">  [DEFAULT]</span></span><br><span class="line">  bind_port = 9292</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="section">  [rabbit]</span></span><br><span class="line">  host = localhost</span><br><span class="line">  port = 5672</span><br><span class="line">  use_ssl = False</span><br><span class="line">  userid = guest</span><br><span class="line">  password = guest</span><br><span class="line">  virtual_host = /</span><br></pre></td></tr></table></figure></p>
<p>从命令行中设置conf，需要使用使用‘-’连接groupname和optionname<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--rabbit-host localhost --rabbit-port 9999</span><br></pre></td></tr></table></figure></p>
<h3 id="oslo-db"><a href="#oslo-db" class="headerlink" title="oslo.db"></a>oslo.db</h3><p>SQLAlchemy数据库模型的抽象</p>
<h3 id="oslo-i18n"><a href="#oslo-i18n" class="headerlink" title="oslo.i18n"></a>oslo.i18n</h3><p>是对Python gettext的封装，主要用于字符串翻译和国际化</p>
<h3 id="oslo-messaging"><a href="#oslo-messaging" class="headerlink" title="oslo.messaging"></a>oslo.messaging</h3><p>Openstack各项目使用RPC和事件通知的统一的接口。其中包括下面4个对象。</p>
<h4 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h4><p>传输层，主要实现RPC底层的通信，支持rabbit、qpid、zmq三种协议。可以通过URL来指定不同的transport的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transport://user:pass@host1:port[,hostN:portN]/virtual_host</span><br></pre></td></tr></table></figure></p>
<h4 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h4><p>封装了指定某一消息最终目的地的所有信息</p>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>即服务端，创建一个Server对象需要指定Transport、Target、endpoints(包含多组可被远程调用的方法，比如某一资源包含CUID四个操作）</p>
<h4 id="RPC-Client"><a href="#RPC-Client" class="headerlink" title="RPC Client"></a>RPC Client</h4><p>即客户端，一个RPC Client可以调用RPC Server上的方法。</p>
<h4 id="Notifier"><a href="#Notifier" class="headerlink" title="Notifier"></a>Notifier</h4><p>Notifier是一个用来发送通知消息的对象。格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    message_id:six_text_type(uuid.uuid4()), #消息id号</span><br><span class="line">    publisher_id:&apos;computer.host1&apos;,#发送者id</span><br><span class="line">    timestamp:timeutils.utcnow(),#时间戳</span><br><span class="line">    priority:&apos;WARN&apos;, # 通知优先级</span><br><span class="line">    event_type:&apos;compute.create_instance&apos;,#通知类型</span><br><span class="line">    payload:&#123;&apos;instance_id&apos;:12,...&#125; #通知内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Notifier-Listener"><a href="#Notifier-Listener" class="headerlink" title="Notifier Listener"></a>Notifier Listener</h4><p>消息监听者，跟Server类似，可以暴露多个endpoint，每个endpoint中也可以包含多种方法，但是它们只是对应者不同的消息优先级。（P118）</p>
]]></content>
      
        <categories>
            
            <category> Cloud Computing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
            <tag> neutron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[张小龙效应]]></title>
      <url>http://lishangying.github.io/2016/01/11/zhangxiaolong/</url>
      <content type="html"><![CDATA[<p>今天的互联网头条是当仁不让的小龙哥。从昨晚风靡朋友圈的情怀回忆图开始：你的第一个微信好友，第xx位微信用户，2015发了多少红包…，（不知是否如小龙哥所说，是出乎公关意料之外的流出产品）加上首次公开演讲的小龙哥，瞬间让今日的微信公开课门庭若市，虽说微信产品的魅力就在于无需推广，但如此用户蝴蝶效应般的蜂拥而至，此种”微信力量“令人叹服。<a id="more"></a><br>  此次微信公开课以公众号直播方式，指明微信2016年的生态风向标，以及开发者最为关心的开放平台发展指南。先不说具体聊了啥，作为一个直播平台提供商的产品负责人，深感惭愧，竞争对手微谷在把握新媒体热点上甩我们好几条街。而微信公开课自身也提供了直播观看入口，以公众号文章形式发布直播，聊天平台需跳转，不知道为何做这个设定，让边看直播边聊天不好吗？<br>  而张小龙说了啥，相信大家印象最深的一句话就是：能让用户用了就走的产品才是好产品。任何产品都是一个工具，如何能让用户高效完成自己想做的事，是我们需要实时思索的，嗯，只有达到一定境界的产品才有勇气这么说，而我们才实现温饱，哪谈得上情怀。一切以用户价值体验为中心，这句话相信是个产品经理都会说，但是真正做到的不会有几个，因为各方面因素会影响我们的产品发展形态，包括用户群使用的不同，特别是我们这种作为面向商业用户的产品。<br>  另外一个重磅消息则是小龙哥提出了应用号的概念。手机app需要商店下载，安装，占用内存，相比微信公众号扫一扫添加的形式，推广门槛高了不是一点两点。未来将会把我们必需的而不经常用的产品，如购买车票，查询信息等需求从app中转移到微信中来。嗯，下了好大一盘棋。从15年开始，大家就已经从这个方向开始发展，包括近期携程线上线下大力推广的汽车票购买服务，各大银行卡信用卡提醒都摈弃了原有的app理念，往轻量级概念发展。而我们的直播，从一开始就没考虑过手机app，直接搭建在微信中，用户即扫即看，边看边聊。这是未来的趋势，至于真正的应用号应该长什么样，我们拭目以待。<br>  正好今天开了个会议，感触良多。我们的产品道路还处于迷茫之中，何为重点方向？提供怎样的直播方案？优势在哪里？如何协调直播与点播？如何丰富产品展现形态？暂时无法回答，但希望自己能尽快清晰道路，更好的带领团队。<br>  思索之后，暂时确定近期规划：数据，反馈，细节展现。<br>  数据：增加平台使用数据汇总，以更形象展现更多观众数据给平台用户<br>  反馈：增加工单机制，让用户有地方提问与收到解答；构建qq群，更open的接触用户；第三方论坛，构建沟通平台<br>  细节展现：增加用户体验的细节，打磨直播页面。</p>
]]></content>
      
        <categories>
            
            <category> ppp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> a </tag>
            
            <tag> b </tag>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo折腾笔记（二）博客优化与定制]]></title>
      <url>http://lishangying.github.io/2015/02/25/hexo-lightum-enhance/</url>
      <content type="html"><![CDATA[<p>首先我使用的是由<a href="http://zipperary.com/" target="_blank" rel="noopener">zippera</a>基于官方<a href="https://github.com/hexojs/hexo-theme-light" target="_blank" rel="noopener">Light</a>主题改进而来的<a href="https://github.com/zippera/lightum" target="_blank" rel="noopener">Lightum</a>主题,其他主题可能稍有出入。</p>
<p>##速度优化<br>参考之前的文章：<a href="http://kevinsfork.info/2015/02/25/hexo-speedup-instantclick/" target="_blank" rel="noopener">静态页面优化</a>。然后使用了<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">hexo-qiniu-sync</a>这个项目，将静态的图片以及css、js同步到了七牛云。（PS：主题模板中包含了两个不同版本的jquery，分别在head.ejs与after-footer.ejs中，随便删除一个。）</p>
<p>对于处于body区域的script、style的引用尽可能的加入data-no-instant属性，避免InstantClick重复加载。</p>
<p>##给instantclick加载进度条加上阴影效果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#instantclick-bar</span>&#123;</span><br><span class="line"><span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.56);</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.56);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>##加入Swiftype搜索<br>去<a href="https://swiftype.com/" target="_blank" rel="noopener">Swiftype</a>官网申请代码，然后修改search.ejs文件为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"st-search-input"</span> <span class="attr">placeholder</span>=<span class="string">"&lt;%= __('search') %&gt;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
 <a id="more"></a>
<p>更具体的指导具体可以参考这篇文章：<a href="http://lukang.me/2015/optimization-of-hexo-2.html" target="_blank" rel="noopener">click here</a>。</p>
<p>##改进多说评论框</p>
<p>###添加data-thread-key等属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多说评论框 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-thread-key</span>=<span class="string">"&lt;%= page.path %&gt;"</span> <span class="attr">data-title</span>=<span class="string">"&lt;%= page.title %&gt;"</span> <span class="attr">data-url</span>=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多说评论框 end --&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>###美化多说评论框<br>进入多说评论的管理后台，将下面代码粘贴到‘设置-&gt;自定义CSS’中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#ds-reset .ds-avatar img&#123;width:54px;height:54px;border-radius:27px;-webkit-border-radius:27px;-moz-border-radius:27px;box-shadow:inset 0 -1px 0 #3333sf;-webkit-box-shadow:inset 0 -1px 0 #3333sf;-webkit-transition:0.4s;-webkit-transition:-webkit-transform 0.4s ease-out;transition:transform 0.4s ease-out;-moz-transition:-moz-transform 0.4s ease-out;&#125;</span><br><span class="line">#ds-reset .ds-avatar img:hover&#123;box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);-webkit-box-shadow:0 0 10px #fff;rgba(255,255,255,.6),inset 0 0 20px rgba(255,255,255,1);transform:rotateZ(360deg);-webkit-transform:rotateZ(360deg);-moz-transform:rotateZ(360deg);&#125;</span><br><span class="line">p.ds-powered-by,#ds-sync-checkbox,.ds-sync label&#123;display:none!important;&#125;</span><br><span class="line">#ds-reset .ds-rounded-top&#123;-webkit-border-top-right-radius:0px;-webkit-border-top-left-radius:0px;border-top-right-radius:0px;border-top-left-radius:0px;&#125;</span><br><span class="line">#ds-thread #ds-reset .ds-textarea-wrapper&#123;background:#fff;border:0;margin-bottom:20px;padding-right:0px;&#125;</span><br><span class="line">#ds-thread #ds-reset .ds-textarea-wrapper textarea&#123;min-height:80px;border:1px solid #ccc;padding:10px;-webkit-appearance:none;border-radius:0;background-color:#FFFFFF;border-color:#cccccc;box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);color:rgba(0,0,0,0.75);-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:border-color 0.15s linear,background 0.15s linear;-moz-transition:border-color 0.15s linear,background 0.15s linear;-ms-transition:border-color 0.15s linear,background 0.15s linear;-o-transition:border-color 0.15s linear,background 0.15s linear;transition:border-color 0.15s linear,background 0.15s linear;&#125;</span><br><span class="line">#ds-thread #ds-reset .ds-textarea-wrapper textarea:focus&#123;border-color:#999999;background:#fafafa;outline:none;&#125;</span><br><span class="line">#ds-thread #ds-reset .ds-post-options&#123;border-bottom-left-radius:0px;-webkit-border-bottom-left-radius:0px;border:none;background:none!important;&#125;</span><br><span class="line">#ds-thread #ds-reset .ds-post-button&#123;border-bottom-right-radius:0px;-webkit-border-bottom-right-radius:0px;&#125;</span><br><span class="line">#ds-reset .ds-textarea-wrapper textarea:focus&#123;border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);&#125;</span><br><span class="line">#ds-thread #ds-reset .ds-post-button&#123;background-image:none;text-shadow:none;border:none;font-weight:normal;line-height:normal;position:absolute;-webkit-appearance:button;-moz-appearance:button;background-color:#008CBA;border-color:#007095;color:#FFFFFF;transition:background-color 300ms ease-out;&#125;</span><br><span class="line">#ds-thread #ds-reset .ds-post-button:hover,#ds-thread #ds-reset .ds-post-button:focus&#123;background-color:#007095;color:#FFFFFF;&#125;</span><br></pre></td></tr></table></figure></p>
<p>##加入多说最新评论<br>修改’theme/lightum/_config.yml’文件，在widgets下面添加<code>- recent_comments</code>项。<br>在主题文件的’theme/lightum/layout/_widget’目录中新建recent_comments.ejs文件，并放入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;widget tag&quot;&gt;</span><br><span class="line">&lt;h3 class=&quot;title&quot;&gt;&lt;%= __(&apos;recent_comments&apos;)&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;entry&quot;&gt;</span><br><span class="line">&lt;!-- 多说最新评论 start --&gt;</span><br><span class="line">    &lt;div class=&quot;ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;1&quot; data-show-time=&quot;1&quot; data-show-title=&quot;1&quot; data-show-admin=&quot;1&quot; data-excerpt-length=&quot;70&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 多说最新评论 end --&gt;</span><br><span class="line">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">..........</span><br><span class="line">&lt;!-- 多说公共JS代码 end --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后在’/languages/zh-CN.yml’文件添加翻译：<code>recent_comments: 最新评论</code></p>
<p>最后，原来的评论样式不太符合lightum主题，可以在’/source/css/_partial’里建立一个recent_comment.styl文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.ds-recent-comments</span><br><span class="line">  li.ds-comment</span><br><span class="line">    &amp;:first-child</span><br><span class="line">      border-top none !important</span><br></pre></td></tr></table></figure></p>
<p>然后在/theme/lightum/source/css/style中将之包括进来：<code>@import &#39;_partial/recent_comments&#39;</code></p>
<p>多说的这个插件同样不兼容于instantclick。我们可以在这篇文章的基础上解决：<a href="/2015/02/25/hexo-speedup-instantclick/">click here</a>:</p>
<ul>
<li>将多说的公共JS放入head或加入’data-no-instant’属性放入body中，并删除recent.ejs与comment.ejs中重复的JS。</li>
<li>修改change事件中的代码为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(typeof DUOSHUO !== &apos;undefined&apos;)&#123; //support 多说评论框</span><br><span class="line">if($(&quot;.ds-thread&quot;).length)&#123;</span><br><span class="line">    DUOSHUO.EmbedThread($(&apos;.ds-thread&apos;)[0]);</span><br><span class="line">&#125;</span><br><span class="line">DUOSHUO.RecentComments($(&apos;.ds-recent-comments&apos;)[0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样虽然能够解决问题，但是会显示方面又会出现点小问题。可以加入下面css修复：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">span.caption&#123;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="加入文章导航"><a href="#加入文章导航" class="headerlink" title="加入文章导航"></a>加入文章导航</h2><p>修改’/layout/_partical/article.ejs’文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"&lt;%= item.layout %&gt;"</span>&gt;</span></span><br><span class="line">  // ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entry"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">item.excerpt</span> &amp;&amp; <span class="attr">index</span>)&#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.excerpt</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span>)&#123; %&gt;</span></span><br><span class="line">        // 插入文章导航</span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">toc</span>') %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.content</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在’\source\css_partial\article.styl’文件后添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.toc-article</span><br><span class="line">  float right</span><br><span class="line">   </span><br><span class="line">#toc</span><br><span class="line">  background #eee</span><br><span class="line">  margin 0 0 10px 20px</span><br><span class="line">  padding 12px</span><br><span class="line">  line-height 18px</span><br><span class="line">  font-size 10px</span><br><span class="line">  strong</span><br><span class="line">    font-size 15px</span><br><span class="line">  ol</span><br><span class="line">    margin-top 5px</span><br><span class="line">    margin-left 0</span><br><span class="line">  .toc</span><br><span class="line">    padding 0</span><br><span class="line">    li</span><br><span class="line">      list-style-type none</span><br><span class="line">  .toc-child</span><br><span class="line">    padding-left 20px</span><br></pre></td></tr></table></figure></p>
<p>这样，我们就能在写文章的时候添加<code>toc: true</code>来启动文章导航功能。</p>
<p>###扩展：浮动式导航<br>实现当页面滑动到下方时将文章导航浮动到屏幕右侧。</p>
<p>在’\layout_partial\’里新建文件：<code>float_nav.ejs</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu-nav"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"title-nav"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">navigation</span>') %&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>→<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content-nav"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">%-</span> <span class="attr">toc</span>(<span class="attr">item.content</span>) %&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">$, scrollSpeed, hiddenSpeed, fadeSpeed</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> T = $(<span class="string">'#toc'</span>);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> M = $(<span class="string">'#menu-nav'</span>);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> C = $(<span class="string">'#content-nav'</span>);</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> Tx = T.position().top;</span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> top = $(<span class="keyword">this</span>).scrollTop();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (top &gt;= Tx + <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="undefined">			M.stop().fadeIn(fadeSpeed);</span></span><br><span class="line"><span class="undefined">			T.stop().fadeTo(fadeSpeed, 0);</span></span><br><span class="line"><span class="javascript">		&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">			M.stop().fadeOut(fadeSpeed);</span></span><br><span class="line"><span class="undefined">			T.stop().fadeTo(fadeSpeed, 1);</span></span><br><span class="line"><span class="undefined">		&#125;</span></span><br><span class="line"><span class="undefined">	&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">	$(<span class="string">'.toc-link'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//阻止默认跳转</span></span></span><br><span class="line"><span class="undefined">		e.preventDefault();</span></span><br><span class="line"><span class="javascript">		<span class="comment">//定义滚动动画</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> scrollTarget = $(<span class="string">'#'</span> + $(<span class="keyword">this</span>).children(<span class="string">'.toc-text'</span>).first().text());</span></span><br><span class="line"><span class="javascript">		$(<span class="string">"html,body"</span>).animate(&#123;</span></span><br><span class="line"><span class="undefined">			scrollTop: scrollTarget.prev().offset().top</span></span><br><span class="line"><span class="undefined">		&#125;, scrollSpeed);</span></span><br><span class="line"><span class="undefined">	&#125;);</span></span><br><span class="line"><span class="javascript">	C.click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">		e.stopPropagation();</span></span><br><span class="line"><span class="undefined">	&#125;);</span></span><br><span class="line"><span class="javascript">	M.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		C.toggle(hiddenSpeed, <span class="string">'linear'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> T = $(<span class="string">'#title-nav div'</span>);</span></span><br><span class="line"><span class="javascript">			T.text() == <span class="string">'←'</span> ? T.text(<span class="string">'→'</span>) : T.text(<span class="string">'←'</span>);</span></span><br><span class="line"><span class="undefined">		&#125;);</span></span><br><span class="line"><span class="undefined">	&#125;);</span></span><br><span class="line"><span class="undefined">&#125;)(jQuery, 500, 200, 100);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在’layout/_partial/article.ejs’中添加对其的引用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(!<span class="attr">index</span> &amp;&amp; <span class="attr">item.toc</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">float_nav</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>添加css样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">navbcolor=rgba(100, 100, 100, 0.74)</span><br><span class="line">#menu-nav</span><br><span class="line">  position fixed;</span><br><span class="line">  display none;</span><br><span class="line">  cursor pointer;</span><br><span class="line">  z-index 150;</span><br><span class="line">  right 0;</span><br><span class="line">  top 20%;</span><br><span class="line">  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);</span><br><span class="line">  color white;</span><br><span class="line">  background navbcolor;</span><br><span class="line">  #title-nav</span><br><span class="line">    display inline-block;</span><br><span class="line">    vertical-align middle;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding: 10px 0;</span><br><span class="line">  #content-nav</span><br><span class="line">    display inline-block;</span><br><span class="line">    vertical-align middle;</span><br><span class="line">    white-space:nowrap;</span><br><span class="line">    border-left: 1px dashed #ccc;</span><br><span class="line">    box-sizing border-box;</span><br><span class="line">    padding 15px;</span><br><span class="line">    line-height 18px;</span><br><span class="line">    font-size 10px;</span><br><span class="line">    li</span><br><span class="line">      list-style-type none;</span><br><span class="line">      width 100%;</span><br><span class="line">      a</span><br><span class="line">        display block;</span><br><span class="line">        box-sizing border-box;</span><br><span class="line">        color #FFFFFF;</span><br><span class="line">        &amp;:hover</span><br><span class="line">          background rgba(100, 100, 100, 1);</span><br><span class="line">      .toc-child a</span><br><span class="line">        padding-left 20px;</span><br></pre></td></tr></table></figure></p>
<p>###添加”返回顶部”<br>与上一节相似，在’layout/_widget/‘中添加<code>totop.ejs</code>文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"to-top"</span>&gt;</span>↑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">$, scrollSpeed, fadeSpeed</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> T = $(<span class="string">'#to-top'</span>);</span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> top = $(<span class="keyword">this</span>).scrollTop();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (top &gt;= <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="undefined">			T.stop().fadeIn(fadeSpeed);</span></span><br><span class="line"><span class="javascript">		&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">			T.stop().fadeOut(fadeSpeed);</span></span><br><span class="line"><span class="undefined">		&#125;</span></span><br><span class="line"><span class="undefined">	&#125;);</span></span><br><span class="line"><span class="javascript">	T.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">"html,body"</span>).animate(&#123;</span></span><br><span class="line"><span class="undefined">			scrollTop: 0</span></span><br><span class="line"><span class="undefined">		&#125;, scrollSpeed);</span></span><br><span class="line"><span class="undefined">	&#125;);</span></span><br><span class="line"><span class="undefined">&#125;)(jQuery, 500, 200);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在’lightum/_config.yml’中启用该挂件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">- totop</span><br></pre></td></tr></table></figure></p>
<p>添加css样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#to-top</span><br><span class="line">  background navbcolor;</span><br><span class="line">  position fixed;</span><br><span class="line">  display none;</span><br><span class="line">  z-index 200;</span><br><span class="line">  right 40px;</span><br><span class="line">  bottom 10%;</span><br><span class="line">  box-shadow 0 0 5px rgba(0, 0, 0, 0.15);</span><br><span class="line">  font-size 14px;</span><br><span class="line">  color white;</span><br><span class="line">  padding 5px 15px;</span><br><span class="line">  cursor pointer;</span><br><span class="line">  font-size 12px;</span><br><span class="line">  text-align center;</span><br><span class="line">  &amp;:hover</span><br><span class="line">    background rgba(100,100,100,1);</span><br></pre></td></tr></table></figure></p>
<p>##参考</p>
<ul>
<li><a href="http://deffi.info/2014/10/03/Hexo-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">Hexo 主题修改:为博客实现更多功能</a></li>
<li><a href="https://luolei.org/duoshuo-css/" target="_blank" rel="noopener">多说评论也玩圆角头像动画「自定义CSS:无压力小白级教程」</a></li>
<li><a href="http://lukang.me/2015/optimization-of-hexo-2.html" target="_blank" rel="noopener">Hexo 优化与定制(二)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> 美化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo折腾笔记（一）博客加速以及instantclick的兼容]]></title>
      <url>http://lishangying.github.io/2015/02/25/hexo-speedup-instantclick/</url>
      <content type="html"><![CDATA[<p><del>首先，Gitcafe的国内速度已经够快了，加不加速其实没多大区别,只不过是闲的蛋疼而已。</del><br>Gitcafe无故page不更新，所以又换回了github。</p>
<h2 id="Hexo加速"><a href="#Hexo加速" class="headerlink" title="Hexo加速"></a>Hexo加速</h2><p>Hexo加速可以有以下几个方面：</p>
<ol>
<li>使用<a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a>并将图片等资源储存至七牛云。可以使用此项目<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">click here</a>。</li>
<li>使用<a href="https://github.com/FlashSoft/hexo-console-optimize" target="_blank" rel="noopener">hexo optimize</a>压缩优化HTML、CSS、JS、Image资源。</li>
<li>使用<a href="http://instantclick.io/" target="_blank" rel="noopener">InstantClick</a>。</li>
</ol>
<p>InstantClick是一款类似于<a href="http://instantclick.io/" target="_blank" rel="noopener">Turbolinks</a>的js库，利用<a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="noopener">pjax</a>（pushState and Ajax)技术对网站进行优化，能够极大的提高访问速度。<br><a id="more"></a></p>
<h2 id="解决InstantClick的兼容问题"><a href="#解决InstantClick的兼容问题" class="headerlink" title="解决InstantClick的兼容问题"></a>解决InstantClick的兼容问题</h2><p>InstantClick效果明显，但是副作用也大。加入它之后，原来相处无碍的Fancybox、百度分享、百度统计、 mathJax、多说评论都挂了。下面是我的解决方法：</p>
<p>###Fancybox<br>Fancybox的修复首先要避面页面切换时jquery.fancybox.min.js文件的重复加载。可以将该js文件的引用放入head中或者加入data-no-instant属性。<br>然后，因为instantclick在预加载时默认只替换body元素，所以在绑定fancybox的时候需要设置parent属性为body：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.fancybox'</span>).fancybox(&#123;<span class="attr">parent</span>:<span class="string">'body'</span>&#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></p>
<p>这样就应该可以了。</p>
<p>###多说评论（以及最新评论、热评文章等）<br>首先，多说的公共JS是不能放在加入data-no-instant属性的。因为不是网站所有页面都包含评论部分的。<br>因此，我们需要将其裹入一层判断中来阻止其多次加载，提高网页的访问速度：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> duoshuoQuery === <span class="string">'undefined'</span>)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> duoshuoQuery = &#123;<span class="attr">short_name</span>:<span class="string">"你的域名"</span>&#125;;</span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">        ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.unstable.js'</span>;</span></span><br><span class="line"><span class="javascript">        ds.charset = <span class="string">'UTF-8'</span>;</span></span><br><span class="line"><span class="javascript">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">         || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后，我们需要在页面预加载的change事件里对其进行重载：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-no-instant</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">InstantClick.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">isInitialLoad</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (isInitialLoad === <span class="literal">false</span>) &#123;</span></span><br><span class="line"><span class="javascript">  	<span class="keyword">if</span>($(<span class="string">".ds-thread"</span>).length &amp;&amp; <span class="keyword">typeof</span> DUOSHUO !== <span class="string">'undefined'</span>)&#123; <span class="comment">//support 多说评论框</span></span></span><br><span class="line"><span class="javascript">  		DUOSHUO.EmbedThread($(<span class="string">'.ds-thread'</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="undefined">  	&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">InstantClick.init();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以用同样的方式解决多说的热门文章、最新评论等插件的问题。DUOSHUO全部的重载函数有：<code>&quot;EmbedThread&quot;, &quot;RecentComments&quot;, &quot;RecentVisitors&quot;, &quot;TopUsers&quot;, &quot;TopThreads&quot;, &quot;LoginWidget&quot;, &quot;ThreadCount&quot;</code></p>
<p>###百度统计、google统计、MathJax<br>这三个可以参考这篇文章：<a href="http://zhiqiang.org/blog/it/instantclick-support-mathjax-baidu-stat.html" target="_blank" rel="noopener">click here</a>。同样是在change事件里对他们进行重新加载。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">InstantClick.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">isInitialLoad</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isInitialLoad === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> MathJax !== <span class="string">'undefined'</span>) <span class="comment">// support MathJax</span></span><br><span class="line">      MathJax.Hub.Queue([<span class="string">"Typeset"</span>,MathJax.Hub]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> prettyPrint !== <span class="string">'undefined'</span>) <span class="comment">// support google code prettify</span></span><br><span class="line">      prettyPrint();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> _hmt !== <span class="string">'undefined'</span>)  <span class="comment">// support 百度统计</span></span><br><span class="line">      _hmt.push([<span class="string">'_trackPageview'</span>, location.pathname + location.search]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ga !== <span class="string">'undefined'</span>)  <span class="comment">// support google analytics</span></span><br><span class="line">        ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>, location.pathname + location.search);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>###百度分享<br>百度分享可以用<a href="http://www.jiathis.com/" target="_blank" rel="noopener">jiathis</a>代替，其实国内的分享工具都差不多。</p>
<p>##关于data-no-instant属性<br>data-no-instant属性是用来避免instantclick在页面切换时对该元素重复加载。可以用在script、style标签中，也能放在a标签中，表示该链接将使用正常方式打开而不用instantclick加速。</p>
<p>data-no-intant无法阻止对div等元素的重新加载，因此无法实现像网易云音乐那样在切换页面的时候无间断的播放音乐等功能。不过曾有人contribute过类似的功能，但是作者没有接受：<a href="https://github.com/dieulot/instantclick/pull/108" target="_blank" rel="noopener">click here</a>。</p>
<p><br><br>至此全部问题解决了，其他的问题可以参考下面几个链接：</p>
<ul>
<li><a href="http://shinychang.net/article/544b6c3578cf49f90fc204d7" target="_blank" rel="noopener">整合 InstantClick 與 AddThis</a></li>
<li><a href="http://lukang.me/2014/hexo-page-speed.html" target="_blank" rel="noopener">Hexo 静态博客加速</a></li>
<li><a href="http://fancyapps.com/fancybox/#docs" target="_blank" rel="noopener">fancybox文档</a></li>
<li><a href="http://instantclick.io/documentation" target="_blank" rel="noopener">InstantClick文档</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> instantclick </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shadowsocks免费账号网址集]]></title>
      <url>http://lishangying.github.io/2015/02/24/shadowsocks-account/</url>
      <content type="html"><![CDATA[<p>G+圈子很多这样的网站，大部分是由<a href="https://github.com/orvice/ss-panel" target="_blank" rel="noopener">ss-panel</a>这个开源项目建成。不知道他们是乐于分享还是另有目的。下面是列表：</p>
<ol>
<li><a href="https://cattt.com/" target="_blank" rel="noopener">Shadow X</a>(ss-panel作者)</li>
<li><a href="http://free.kuaishangss.tk/" target="_blank" rel="noopener">kuaishangSS</a></li>
<li><a href="http://vpn.lintwo.com/" target="_blank" rel="noopener">pepsishadowsocks</a></li>
<li><a href="http://tashi.xyz/" target="_blank" rel="noopener">ChangZ</a></li>
<li><a href="http://ss.ssserver.biz/" target="_blank" rel="noopener">ssserver</a></li>
</ol>
<p>另外推荐Linux下ss GUI客户端：<a href="https://github.com/librehat/shadowsocks-qt5" target="_blank" rel="noopener">shadowsocks-qt5</a></p>
]]></content>
      
        <categories>
            
            <category> GFW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET MVC 4笔记（二）]]></title>
      <url>http://lishangying.github.io/2015/02/24/ASP-NET-MVC4note2/</url>
      <content type="html"><![CDATA[<ol>
<li>有Timestamp修饰的表在修改已有的记录是一定要将该字段复制，也就是说一定要在Edit网页里面添加一行：<pre><code>@Html.HiddenFor(model =&gt; model.RowVersion)
</code></pre></li>
<li>WebSecurity.CreateAccount必须在Userprofile里面先创建账户。<pre><code>System.Diagnostics.Debug.WriteLine(&quot;OnAction:&quot; + controller + &quot;/&quot; + action);
</code></pre></li>
<li>转换string数组到int数组<pre><code>int[] HostsList = Array.ConvertAll&lt;string, int&gt;(Request[&quot;HostsId&quot;].Split(&apos;,&apos;), u =&gt; int.Parse(u));
</code></pre></li>
</ol>
]]></content>
      
        <categories>
            
            <category> ASP.NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> asp.net mvc4 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET MVC4笔记（一） 扩展Simplemembership]]></title>
      <url>http://lishangying.github.io/2015/02/24/ASP-NET-MVC4-note1-Simplemembership/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">using System.Web.Mvc;</span><br><span class="line"></span><br><span class="line">namespace MvcClassManageSystem.ActionFilters</span><br><span class="line">&#123;</span><br><span class="line">    public class LogStateFilterAttribute : ActionFilterAttribute</span><br><span class="line">    &#123;</span><br><span class="line">        public override void OnActionExecuting(ActionExecutingContext filterContext)</span><br><span class="line">        &#123;</span><br><span class="line">            base.OnActionExecuting(filterContext);</span><br><span class="line">            //string controller = filterContext.RouteData.Values[&quot;controller&quot;].ToString();</span><br><span class="line">            //string action = filterContext.RouteData.Values[&quot;action&quot;].ToString();</span><br><span class="line">            //System.Diagnostics.Debug.WriteLine(&quot;OnAction:&quot; + controller + &quot;/&quot; + action);</span><br><span class="line"></span><br><span class="line">            if (WebMatrix.WebData.WebSecurity.IsAuthenticated == true)</span><br><span class="line">            &#123;</span><br><span class="line">                filterContext.Result = new RedirectToRouteResult(new System.Web.Routing.RouteValueDictionary(new &#123; Controller = &quot;Home&quot;, action = &quot;Index&quot; &#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public static class WebUtility</span><br><span class="line">    &#123;</span><br><span class="line">        private static SimpleMembershipProvider membership = (SimpleMembershipProvider)Membership.Provider;</span><br><span class="line">        public static void CreateUserAndAccount(UserProfile userProfile, string Password)</span><br><span class="line">        &#123;</span><br><span class="line">            WebSecurity.CreateUserAndAccount(userProfile.UserName, Password, new</span><br><span class="line">            &#123;</span><br><span class="line">                //TO DO 数据库/模型更改之后别忘记修改此处！！！</span><br><span class="line">                ClassId = userProfile.ClassId,</span><br><span class="line">                UserExtraInfo_Phone = userProfile.UserExtraInfo.Phone,</span><br><span class="line">                UserExtraInfo_Gender = userProfile.UserExtraInfo.Gender,</span><br><span class="line">                UserExtraInfo_BirthDay = userProfile.UserExtraInfo.BirthDay,</span><br><span class="line">                UserExtraInfo_UserDesc = userProfile.UserExtraInfo.UserDesc</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        public static void DeleteUserAndAccount(string UserName)</span><br><span class="line">        &#123;</span><br><span class="line">            membership.DeleteAccount(UserName);</span><br><span class="line">            Roles.RemoveUserFromRoles(UserName, Roles.GetRolesForUser(UserName));</span><br><span class="line">            membership.DeleteUser(UserName, true);</span><br><span class="line">        &#125;</span><br><span class="line">        public static void ResetPassword(string UserName, string NewPassword)</span><br><span class="line">        &#123;</span><br><span class="line">            WebSecurity.ResetPassword(WebSecurity.GeneratePasswordResetToken(UserName, 1), NewPassword);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using System.Web.Mvc;</span><br><span class="line">namespace MvcClassManageSystem.Filters</span><br><span class="line">&#123;</span><br><span class="line">    public class MyAuthorizeAttribute : AuthorizeAttribute</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)</span><br><span class="line">        &#123;</span><br><span class="line">            base.HandleUnauthorizedRequest(filterContext);</span><br><span class="line">            if (filterContext.HttpContext.User.Identity.IsAuthenticated)</span><br><span class="line">            &#123;</span><br><span class="line">                filterContext.Result = new RedirectResult(&quot;/Account/AccessError&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">using System.Data.Entity;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Web.Security;</span><br><span class="line">using WebMatrix.WebData;</span><br><span class="line">namespace MvcClassManageSystem.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class InitSecurityDb : DropCreateDatabaseAlways&lt;DBManager&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void Seed(DBManager context)</span><br><span class="line">        &#123;</span><br><span class="line">            WebSecurity.InitializeDatabaseConnection(&quot;DefaultConnection&quot;, &quot;UserProfile&quot;, &quot;UserId&quot;, &quot;UserName&quot;, autoCreateTables: true);</span><br><span class="line">            var roles = (SimpleRoleProvider)Roles.Provider;</span><br><span class="line"> </span><br><span class="line">            string[] RolesList = new string[] &#123; &quot;Admin&quot;, &quot;Teacher&quot;, &quot;Student&quot; &#125;;</span><br><span class="line">            foreach (var item in RolesList)</span><br><span class="line">            &#123;</span><br><span class="line">                if (!roles.RoleExists(item))</span><br><span class="line">                &#123;</span><br><span class="line">                    roles.CreateRole(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //设置初始班级</span><br><span class="line">            int ClassIndex = 0;</span><br><span class="line">            using (var db = new DBManager())</span><br><span class="line">            &#123;</span><br><span class="line">                var ret = db.ClassProfiles.SingleOrDefault(m =&gt; m.ClassName.CompareTo(&quot;未知班级&quot;) == 0);</span><br><span class="line">                if (ret == null)</span><br><span class="line">                &#123;</span><br><span class="line">                    ret = db.ClassProfiles.Add(new ClassProfile</span><br><span class="line">                    &#123;</span><br><span class="line">                        ClassName = &quot;未知班级&quot;,</span><br><span class="line">                        Desc = &quot;班级未知或无意义&quot;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    db.SaveChanges();</span><br><span class="line">                &#125;</span><br><span class="line">                ClassIndex = ret.ClassId;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!WebSecurity.UserExists(&quot;管理员&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                WebUtility.CreateUserAndAccount(new UserProfile()</span><br><span class="line">                &#123;</span><br><span class="line">                    UserName = &quot;管理员&quot;,</span><br><span class="line">                    ClassId = ClassIndex,</span><br><span class="line">                    UserExtraInfo = new UserExtraInfo()</span><br><span class="line">                    &#123;</span><br><span class="line">                        Phone = &quot;18267912632&quot;,</span><br><span class="line">                        Gender = MvcClassManageSystem.Models.Gender.男,</span><br><span class="line">                        BirthDay = new System.DateTime(1993, 9, 28),</span><br><span class="line">                        UserDesc = &quot;本站的管理员！&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &quot;admin&quot;);</span><br><span class="line">                System.Web.Security.Roles.AddUserToRole(&quot;管理员&quot;, &quot;Admin&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> protected void Application_Start()</span><br><span class="line">        &#123;</span><br><span class="line">            Database.SetInitializer&lt;DBManager&gt;(new InitSecurityDb());</span><br><span class="line">            DBManager db = new DBManager();</span><br><span class="line">            db.Database.Initialize(true);</span><br><span class="line">            if (!WebSecurity.Initialized)</span><br><span class="line">            &#123;</span><br><span class="line">                WebSecurity.InitializeDatabaseConnection(&quot;DefaultConnection&quot;, &quot;UserProfile&quot;, &quot;UserId&quot;, &quot;UserName&quot;, autoCreateTables: true);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            AreaRegistration.RegisterAllAreas();</span><br><span class="line">            WebApiConfig.Register(GlobalConfiguration.Configuration);</span><br><span class="line">            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class="line">            RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">            BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line">            AuthConfig.RegisterAuth();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> ASP.NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> asp.net mvc4 </tag>
            
            <tag> simplemembership </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KDE的Mac向折腾指南]]></title>
      <url>http://lishangying.github.io/2014/12/07/kde-to-mac/</url>
      <content type="html"><![CDATA[<p>惯例，先上图：</p>
<p>[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9.png" alt="logo9](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9-1024x575.png)" title="">
                </div>
                <div class="image-caption">logo9](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo9-1024x575.png)</div>
            </figure><br><a id="more"></a><br>[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8.png" alt="logo5](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5.png) [![logo6](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6.png) [![logo7](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7.png) [![logo8](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8-1024x575.png)" title="">
                </div>
                <div class="image-caption">logo5](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo5.png) [![logo6](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo6.png) [![logo7](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo7.png) [![logo8](http://sforkw-wp.qiniudn.com/jae/uploads/2014/12/logo8-1024x575.png)</div>
            </figure></p>
<p>首先，KDE的全局菜单可以参考我以前的文章《<a href="http://kevinsfork.info/2014/10/31/kde4-e7-9a-84-e9-85-8d-e7-bd-ae-e5-8f-82-e8-80-83/" target="_blank" rel="noopener">KDE4的配置参考</a>》。</p>
<p>然后，Plasma的主题是AG-plasma，aurorae主题是Yoxydaze-light。这些可以去kde-look里找。</p>
<p>底部的dock是plank，主题是ArHU，在deviantART中找到的。另外，plank上的图标是受gtk主题控制的，所以装numix-circle是最好不过的。</p>
<p>我的apps文件可以在这里下载：<a href="http://pan.baidu.com/s/1hqGJDmk" target="_blank" rel="noopener">click here</a></p>
<p>~/.config/plank/dock1/settings文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#This file auto-generated by Plank.</span><br><span class="line">#2014-12-06T09:47:52+0000</span><br><span class="line"></span><br><span class="line">[PlankDockPreferences]</span><br><span class="line">#Whether to show only windows of the current workspace.</span><br><span class="line">CurrentWorkspaceOnly=false</span><br><span class="line">#The size of dock icons (in pixels).</span><br><span class="line">IconSize=42</span><br><span class="line">#If 0, the dock won&apos;t hide. If 1, the dock intelligently hides. If 2, the dock auto-hides. If 3, the dock dodges active maximized windows.</span><br><span class="line">HideMode=0</span><br><span class="line">#Time (in ms) to wait before unhiding the dock.</span><br><span class="line">UnhideDelay=0</span><br><span class="line">#The monitor number for the dock. Use -1 to keep on the primary monitor.</span><br><span class="line">Monitor=-1</span><br><span class="line">#List of *.dockitem files on this dock. DO NOT MODIFY</span><br><span class="line">DockItems=plank.dockitem;;google-chrome.dockitem;;dolphin.dockitem;;juk.dockitem;;eclipse.dockitem;;chrome-pjkebmlmkppdjcdcilfcjdkifljollfd-Default.dockitem;;kate.dockitem;;gwenview.dockitem;;wps-office-wps.dockitem;;konsole.dockitem;;sublime_text_3.dockitem;;love-wallpaper.dockitem;;ksysguard.dockitem;;virtualbox.dockitem</span><br><span class="line">#The position for the dock on the monitor. If 0, left. If 1, right. If 2, top. If 3, bottom.</span><br><span class="line">Position=3</span><br><span class="line">#The dock&apos;s position offset from center (in percent).</span><br><span class="line">Offset=0</span><br><span class="line">#The name of the dock&apos;s theme to use.</span><br><span class="line">Theme=ArHU</span><br><span class="line">#The alignment for the dock on the monitor&apos;s edge. If 0, panel-mode. If 1, left-aligned. If 2, right-aligned. If 3, centered.</span><br><span class="line">Alignment=3</span><br><span class="line">#The alignment of the items in this dock if panel-mode is used. If 1, left-aligned. If 2, right-aligned. If 3, centered.</span><br><span class="line">ItemsAlignment=3</span><br><span class="line">#Whether to prevent drag&apos;n&apos;drop actions and lock items on the dock.</span><br><span class="line">LockItems=false</span><br><span class="line">#Whether to use pressure-based revealing of the dock if the support is available.</span><br><span class="line">PressureReveal=false</span><br><span class="line">#Whether to show only pinned applications. Useful for running more then one dock.</span><br><span class="line">PinnedOnly=true</span><br><span class="line">#Whether to automatically pin an application if it seems useful to do.</span><br><span class="line">AutoPinning=true</span><br></pre></td></tr></table></figure></p>
<p>~/.local/share/plank/themes/ArHU/中的dock.theme和hover.theme文件分别是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#This file auto-generated by Plank.</span><br><span class="line">#2014-12-06T06:22:37+0000</span><br><span class="line"></span><br><span class="line">[PlankDrawingTheme]</span><br><span class="line">#The roundness of the top corners.</span><br><span class="line">TopRoundness=6</span><br><span class="line">#The roundness of the bottom corners.</span><br><span class="line">BottomRoundness=0</span><br><span class="line">#The thickness (in pixels) of lines drawn.</span><br><span class="line">LineWidth=0</span><br><span class="line">#The color (RGBA) of the outer stroke.</span><br><span class="line">OuterStrokeColor=0;;0;;0;;0</span><br><span class="line">#The starting color (RGBA) of the fill gradient.</span><br><span class="line">FillStartColor=255;;255;;255;;150</span><br><span class="line">#The ending color (RGBA) of the fill gradient.</span><br><span class="line">FillEndColor=255;;255;;255;;150</span><br><span class="line">#The color (RGBA) of the inner stroke.</span><br><span class="line">InnerStrokeColor=255;;255;;255;;255</span><br><span class="line"></span><br><span class="line">[PlankDrawingDockTheme]</span><br><span class="line">#The padding on the left/right dock edges, in tenths of a percent of IconSize.</span><br><span class="line">HorizPadding=0</span><br><span class="line">#The padding on the top dock edge, in tenths of a percent of IconSize.</span><br><span class="line">TopPadding=1</span><br><span class="line">#The padding on the bottom dock edge, in tenths of a percent of IconSize.</span><br><span class="line">BottomPadding=1</span><br><span class="line">#The padding between items on the dock, in tenths of a percent of IconSize.</span><br><span class="line">ItemPadding=4</span><br><span class="line">#The size of item indicators, in tenths of a percent of IconSize.</span><br><span class="line">IndicatorSize=0</span><br><span class="line">#The size of the icon-shadow behind every item, in tenths of a percent of IconSize.</span><br><span class="line">IconShadowSize=0</span><br><span class="line">#The height (in percent of IconSize) to bounce an icon when the application sets urgent.</span><br><span class="line">UrgentBounceHeight=0.10000000000000001</span><br><span class="line">#The height (in percent of IconSize) to bounce an icon when launching an application.</span><br><span class="line">LaunchBounceHeight=0.10000000000000001</span><br><span class="line">#The opacity value (0 to 1) to fade the dock to when hiding it.</span><br><span class="line">FadeOpacity=0</span><br><span class="line">#The amount of time (in ms) for click animations.</span><br><span class="line">ClickTime=150</span><br><span class="line">#The amount of time (in ms) to bounce an urgent icon.</span><br><span class="line">UrgentBounceTime=300</span><br><span class="line">#The amount of time (in ms) to bounce an icon when launching an application.</span><br><span class="line">LaunchBounceTime=300</span><br><span class="line">#The amount of time (in ms) for active window indicator animations.</span><br><span class="line">ActiveTime=150</span><br><span class="line">#The amount of time (in ms) to slide icons into/out of the dock.</span><br><span class="line">SlideTime=150</span><br><span class="line">#The time (in ms) to fade the dock in/out on a hide (if FadeOpacity is &amp;lt; 1).</span><br><span class="line">FadeTime=100</span><br><span class="line">#The time (in ms) to slide the dock in/out on a hide (if FadeOpacity is 1).</span><br><span class="line">HideTime=100</span><br><span class="line">#The size of the urgent glow (shown when dock is hidden), in tenths of a percent of IconSize.</span><br><span class="line">GlowSize=30</span><br><span class="line">#The total time (in ms) to show the hidden-dock urgent glow.</span><br><span class="line">GlowTime=10000</span><br><span class="line">#The time (in ms) of each pulse of the hidden-dock urgent glow.</span><br><span class="line">GlowPulseTime=2000</span><br><span class="line">#The hue-shift (-180 to 180) of the urgent indicator color.</span><br><span class="line">UrgentHueShift=150</span><br><span class="line">#The time (in ms) to move an item to its new position.</span><br><span class="line">ItemMoveTime=150</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#This theme written by Perian. thexperian.deviantart.com</span><br><span class="line"></span><br><span class="line">[PlankDrawingTheme]</span><br><span class="line">TopRoundness=3</span><br><span class="line">LineWidth=0</span><br><span class="line">OuterStrokeColor=0;;0;;0;;0</span><br><span class="line">FillStartColor=0;;0;;0;;150</span><br><span class="line">FillEndColor=0;;0;;0;;150</span><br><span class="line">InnerStrokeColor=0;;0;;0;;0</span><br></pre></td></tr></table></figure>
<p>以上是我折腾的结果，找主题也找了半天。大家如果有更好的主题与壁纸也拿来分享一下吧。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DE/WM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)慢慢的，就没有了，就像从未存在过]]></title>
      <url>http://lishangying.github.io/2014/11/28/man-man-de/</url>
      <content type="html"><![CDATA[<p>几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。</p>
<p>　　那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？</p>
<p>　　今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。</p>
<p>　　没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.williamlong.info/upload/4058_1.jpg" alt="慢慢的，就没有了，就像从未存在过" title="">
                </div>
                <div class="image-caption">慢慢的，就没有了，就像从未存在过</div>
            </figure>
<a id="more"></a>
<p>　　多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。</p>
<p>　　然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。</p>
<p>　　多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。</p>
<p>　　然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。</p>
<p>　　多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。</p>
<p>　　哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。</p>
<p>　　可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。</p>
<p>　　我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。</p>
<p>　　对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。</p>
<p>　　可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。</p>
<p>　　没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。</p>
<p>　　没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。</p>
<p>　　没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。</p>
<p>　　没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。</p>
<p>　　慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。</p>
<p>　　接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。</p>
<p>　　游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。</p>
<p>　　你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。</p>
<p>　　一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。</p>
<p>　　天黑了，那么睡觉吧，但愿长醉不复醒。</p>
<p>　　最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</p>
<p>　　作者：小海，来源：豆瓣网，<a href="http://www.douban.com/note/456932116/" target="_blank" rel="noopener">原文</a>已被和谐</p>
]]></content>
      
        <categories>
            
            <category> GFW </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 只言片语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ month contest D.Determinant and Matrix]]></title>
      <url>http://lishangying.github.io/2014/11/07/zoj-month-contest-d-determinant-and-matrix/</url>
      <content type="html"><![CDATA[<hr>
<center style="color: #000000;"><span style="color: green;">Time Limit: </span>2 Seconds      <span style="color: green;">Memory Limit: </span>65536 KB</center>

<hr>
<p>##Description<br>Recently, LBH is learning the curse linear algebra. Thus he is very interested in matrix and determinant now. In order to practice his ability of solving the problem of linear algebra, he just invent some problems by himself. Once the problems was create, he would solve it immediately. However, he meet a problem that was so hard that he couldn’t work out even though racked his brains. The problem was described as follow:</p>
<p>To a integer martix M<sub>nn</sub>(a<sub>ij</sub>), we define two function add(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> + 1) and sub(M<sub>nn</sub>(a<sub>ij</sub>))=M<sub>nn</sub>(a<sub>ij</sub> - 1) which were exactly like this:<br><a id="more"></a></p>
<div style="color: #000000;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig1.png" alt="DeterminantAndMatrixFig1" title="">
                </div>
                <div class="image-caption">DeterminantAndMatrixFig1</div>
            </figure></div><br><div style="color: #000000;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig2.png" alt="DeterminantAndMatrixFig2" title="">
                </div>
                <div class="image-caption">DeterminantAndMatrixFig2</div>
            </figure></div>

<p>According to the martix M<sub>nn</sub>(a<sub>ij</sub>), we can permutate it and get a full permutation set Perm(M<sub>nn</sub>(a<sub>ij</sub>)) = {M<sub>nn</sub>(a<sub>I<sub>i</sub>J<sub>j</sub></sub>)| I and J is a permutation of 1..n }, (Perm(M) is a set, each matrix in Perm(M) is unique). For example:</p>
<div style="color: #000000;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig3.png" alt="DeterminantAndMatrixFig3" title="">
                </div>
                <div class="image-caption">DeterminantAndMatrixFig3</div>
            </figure></div>

<p>The problem is to get the result of a fomula about an integer matrix M<sub>nn</sub>:</p>
<p><div style="color: #000000;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=DeterminantAndMatrixFig4.png" alt="DeterminantAndMatrixFig4" title="">
                </div>
                <div class="image-caption">DeterminantAndMatrixFig4</div>
            </figure></div><br><span style="color: #000000;">in which the det(M) meaned to cacluate the determinant of M.</span></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>There are several test cases.</p>
<p>The first line contains an integer <var>T</var>(<var>T</var> ≤ 100) . Then <var>T</var> test cases follow.</p>
<p>In each test case, the first line contains one integer <var>n</var>(0&lt; <var>n</var>≤ 10). The number means the giving matrix’s size is <var>n×n</var></p>
<p>Then there are <var>n</var> lines followed, each line contains <var>n</var> integers <var>a<sub>ij</sub></var>(-10≤ <var>a<sub>ij</sub></var>≤ 10), in the position row <var>i</var>, colum <var>j</var>, it represents the number <var>a<sub>ij</sub>.</var></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, since the result may be very large, output one line with the result modulo 2<sup>30</sup>.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p><span style="color: #000000;">Author: </span><strong>LIN, Binghui</strong><br><span style="color: #000000;">Source: </span><strong>ZOJ Monthly, August 2014</strong></p>
<p><br></p>
<hr>
<p>这道题全场现场只A了一个人。今天我们比赛的时候我A了，挺爽的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">long</span> fact[]=<span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">15</span>];</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">long</span> kind;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> A[][]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> BigInteger MOD=BigInteger.valueOf(<span class="number">1</span>&amp;lt;&amp;lt;<span class="number">30</span>);</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getKind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> mark[]=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i,j,k,r=<span class="number">0</span>;r&amp;lt;<span class="number">2</span>;r++)&#123;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &amp;lt; n; ++ i) mark[i] = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &amp;lt; n; ++ i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (mark[i]) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (j = i; j &amp;lt; n; ++ j) &#123;</span><br><span class="line">					<span class="keyword">for</span> (k = <span class="number">0</span>; k &amp;lt; n; ++ k) &#123;</span><br><span class="line">						<span class="keyword">if</span> (r==<span class="number">1</span>&amp;amp;&amp;amp;A[k][i] != A[k][j])<span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">if</span>(r==<span class="number">0</span>&amp;amp;&amp;amp;A[i][k] != A[j][k])<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (k == n) &#123;</span><br><span class="line">						++ cnt;</span><br><span class="line">						mark[j] = <span class="keyword">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				kind /= fact[cnt];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Scanner cin=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n,T=cin.nextInt();</span><br><span class="line">		fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=<span class="number">10</span>;i++)fact[i]=fact[i-<span class="number">1</span>]*i;</span><br><span class="line">		<span class="keyword">while</span>(T--&amp;gt;<span class="number">0</span>)&#123;</span><br><span class="line">			n=cin.nextInt();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&amp;lt;n;j++)&#123;</span><br><span class="line">					A[i][j]=cin.nextInt();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">			Matrix matrix=<span class="keyword">new</span> Matrix(n);</span><br><span class="line">			kind=fact[n]*fact[n];</span><br><span class="line">			getKind(n);</span><br><span class="line">			<span class="keyword">if</span>(kind%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">				matrix.valueOf(A, <span class="number">0</span>);</span><br><span class="line">				res=res ^(matrix.Det().mod(MOD).longValue());</span><br><span class="line">			&#125;</span><br><span class="line">			matrix.valueOf(A, <span class="number">1</span>);</span><br><span class="line">			res=res^(matrix.Det().mod(MOD).longValue());</span><br><span class="line">			matrix.valueOf(A, -<span class="number">1</span>);</span><br><span class="line">			res=res^(matrix.Det().mod(MOD).longValue());</span><br><span class="line">			System.out.println(res);</span><br><span class="line">		&#125;</span><br><span class="line">		cin.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span></span>&#123;</span><br><span class="line">	BigInteger M[][]=<span class="keyword">new</span> BigInteger[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">	BigInteger ZERO,ONE;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	Matrix(<span class="keyword">int</span> n)&#123;</span><br><span class="line">		<span class="keyword">this</span>.n=n;</span><br><span class="line">		ZERO=BigInteger.ZERO;</span><br><span class="line">		ONE=BigInteger.ONE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> A[][],<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&amp;lt;n;j++)&#123;</span><br><span class="line">				M[i][j]=BigInteger.valueOf(A[i][j]+d);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">BigInteger <span class="title">Det</span><span class="params">()</span></span>&#123;</span><br><span class="line">		BigInteger tmp, res = ONE, div = ONE;</span><br><span class="line">		<span class="keyword">int</span> i, j, k;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &amp;lt; n; ++ i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (j = i; j &amp;lt; n; ++ j) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!M[j][i].equals(ZERO)) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (j == n) <span class="keyword">return</span> ZERO;</span><br><span class="line">			<span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">				<span class="comment">//res = res.negate();</span></span><br><span class="line">				<span class="keyword">for</span> (k = <span class="number">0</span>; k &amp;lt; n; ++ k) &#123;</span><br><span class="line">				    tmp = M[j][k];</span><br><span class="line">					M[j][k] = M[i][k];</span><br><span class="line">					M[i][k] = tmp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			res = res.multiply(M[i][i]);</span><br><span class="line">			<span class="keyword">for</span> (j = i + <span class="number">1</span>; j &amp;lt; n; ++ j) &#123;</span><br><span class="line">				<span class="keyword">if</span> (M[j][i].equals(ZERO)) <span class="keyword">continue</span>;</span><br><span class="line">				div = div.multiply(M[i][i]);</span><br><span class="line">				<span class="keyword">for</span> (k = i + <span class="number">1</span>; k &amp;lt; n; ++ k) &#123;</span><br><span class="line">					M[j][k] = M[j][k].multiply(M[i][i]).subtract(M[i][k].multiply(M[j][i]));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		res = res.divide(div);</span><br><span class="line">		<span class="keyword">if</span> (res.compareTo(ZERO) &amp;lt; <span class="number">0</span>) res = res.negate();</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FFT求快速卷积的思考]]></title>
      <url>http://lishangying.github.io/2014/11/06/fft-thoughts/</url>
      <content type="html"><![CDATA[<p>离散型卷积的定义是：$$y(n)=\sum_{m=0}^{n} x(m)h(n-m)$$</p>
<p>注意，h函数是反转的。</p>
<p>在Chipher Messages一题中，b串需要反转再与a串匹配。</p>
<p>比如说：</p>
<p>a串： 110110110，则：</p>
<p>b`串：1011&lt;——这里才是原来b串的头。但是向上对应到a串时，已经是m-1这个位置了。所以说，小于m-1的卷积是没有意义的。</p>
<p>于是，base=m。整体匹配。<br><a id="more"></a></p>
<p>同样的，比如杭电1402用FFT求A×B那一题。</p>
<p>可以把A串看成卷积中的x函数，而把B串的<strong>每一个字符</strong>看成h函数。那么卷积就可以看成是一个模拟乘法的过程。</p>
<p>因为h函数是要求逆序的，但是此时的h函数只有<strong>一个字符</strong>所以反转操作无意义。这时候的base=1。单个匹配。</p>
<p>估计FFT就这两种情况了。因为如果1&lt;base&lt;m，那么就应该直接将b串分解成若干base长度的串了。</p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 只言片语 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[baylor 6622 Absurdistan Roads（ NWERC Contest）]]></title>
      <url>http://lishangying.github.io/2014/11/06/baylor6622-absurdistan-roads/</url>
      <content type="html"><![CDATA[<p>原题pdf：<a href="https://icpcarchive.ecs.baylor.edu/external/66/6622.pdf" target="_blank" rel="noopener">click here</a></p>
<p>##Description<br>The people of Absurdistan discovered how to build roads only last year. After the discovery, every city<br>decided to build their own road connecting their city with another city. Each newly built road can be<br>used in both directions.</p>
<p>Absurdistan is full of surprising coincidences. It took all N cities precisely one year to build their<br>roads. And even more surprisingly, in the end it was possible to travel from every city to every other<br>city using the newly built roads.</p>
<a id="more"></a>
<p>You bought a tourist guide which does not have a map of the country with the new roads. It only<br>contains a huge table with the shortest distances between all pairs of cities using the newly built roads.</p>
<p>You would like to know between which pairs of cities there are roads and how long they are, because<br>you want to reconstruct the map of the N newly built roads from the table of shortest distances.</p>
<p>You get a table of shortest distances between all pairs of cities in Absurdistan using the N roads<br>built last year. From this table, you must reconstruct the road network of Absurdistan. There might<br>be multiple road networks with N roads with that same table of shortest distances, but you are happy<br>with any one of those networks.</p>
<p>##Input<br>For each test case:  </p>
<p>• A line containing an integer N (2 ≤ N ≤ 2000) — the number of cities and roads.  </p>
<p>• N lines with N numbers each. The j-th number of the i-th line is the shortest distance from city i to city j.</p>
<p>• All distances between two distinct cities will be positive and at most 1 000 000. The<br>distance from i to i will always be 0 and the distance from i to j will be the same as the distance<br>from j to i.</p>
<p>##Output<br>For each test case:</p>
<p>• Print N lines with three integers ‘a b c’ denoting that there is a road between cities 1 ≤ a ≤ N<br>and 1 ≤ b ≤ N of length 1 ≤ c ≤ 1000000, where a ̸= b. If there are multiple solutions, you can<br>print any one and you can print the roads in any order. At least one solution is guaranteed to<br>exist.</p>
<p>• Print a blank line between every two test cases.</p>
<p>##Sample Input<br>4<br>0 1 2 1<br>1 0 2 1<br>2 2 0 1<br>1 1 1 0<br>4<br>0 1 1 1<br>1 0 2 2<br>1 2 0 2<br>1 2 2 0<br>3<br>0 4 1<br>4 0 3<br>1 3 0  </p>
<p>##Sample Output<br>2 1 1<br>4 1 1<br>4 2 1<br>4 3 1<br>2 1 1<br>3 1 1<br>4 1 1<br>2 1 1<br>3 1 1<br>2 1 4<br>3 2 3<br><br></p>
<hr>
<p>NWERC 题目还挺简单的。<br>题意就是一个N个顶点，N条边的无向图。告诉你两两点之间的最短路。让你重构这个图。(随意输出任意一张满足以上条件的图）<br>这题的突破口就是N条边。要想想如果只有N-1条边，那么这个图就是一个树了。所以，我们可以先构造最小生成树，再来考虑最后一条边。<br>可以先将构造好的树求一遍floyd，然后再跟题目的最短路相比较，如果两点u,v求出的最短路w`与题目给的最短路w不一致（可以断言：w`&gt;w），那么就将w作为最后一条边的边长加在u，v之间即可。这样的边可能会找到很多，事实上只需要加上任意一条就使所有的w`都等于w了。<br>需要注意的是，可能整个树就已经满足题目了。这样的话，最后一条边只需要重复任意一条树边就好了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ufind</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x == p[x] ? x : p[x] = ufind(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = ufind(x);</span><br><span class="line">	<span class="keyword">int</span> fy = ufind(y);</span><br><span class="line">	<span class="keyword">if</span> (fx == fy)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	p[fx] = fy;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	Edge(<span class="keyword">int</span> u = <span class="number">0</span>, <span class="keyword">int</span> v = <span class="number">0</span>, <span class="keyword">int</span> w = <span class="number">0</span>) :</span><br><span class="line">			u(u), v(v), w(w) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge&amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> w &lt; othr.w;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; vt;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; res;</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">		vt.clear();</span><br><span class="line">		res.clear();</span><br><span class="line">		<span class="keyword">if</span> (!first) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		<span class="keyword">else</span> first = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> x, j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">				<span class="keyword">if</span> (j &gt; i)</span><br><span class="line">					vt.push_back(Edge(i, j, x));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line">		sort(vt.begin(), vt.end());</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fill(f[i]+<span class="number">1</span>,f[i]+<span class="number">1</span>+n,inf);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>) vt.size(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Union(vt[i].u, vt[i].v)) &#123;</span><br><span class="line">				f[vt[i].u][vt[i].v] = vt[i].w;</span><br><span class="line">				f[vt[i].v][vt[i].u] = vt[i].w;</span><br><span class="line">				cnt++;</span><br><span class="line">				res.push_back(Edge(vt[i].u, vt[i].v, vt[i].w));</span><br><span class="line">				<span class="keyword">if</span> (cnt &gt;= n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (f[i][k] == inf) <span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (f[i][j] &gt; f[i][k] + f[k][j]) &#123;</span><br><span class="line">						f[i][j] = f[i][k] + f[k][j];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>) vt.size(); i++) &#123;</span><br><span class="line">			Edge now = vt[i];</span><br><span class="line">			<span class="keyword">if</span> (f[now.u][now.v] != now.w) &#123;</span><br><span class="line">				res.push_back(Edge(now.u, now.v, now.w));</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) res.push_back(res.back());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>) res.size(); i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, res[i].u, res[i].v, res[i].w);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Timus 1996 Cipher Message 3 KMP+FFT求卷积]]></title>
      <url>http://lishangying.github.io/2014/11/05/timus-1996-cipher-message-3-kmpfft/</url>
      <content type="html"><![CDATA[<p>题目链接：<a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1996" target="_blank" rel="noopener">click here</a></p>
<p>##description<br>Emperor Palpatine has been ruling the Empire for 25 years and Darth Vader has been the head of the Empire Armed Forces. However, the Rebel movement is strong like it never used to be. One of the rebel leaders, Princess Leia from Alderaan, managed to get hold of secret blueprints of the Death Star, the imperial war station.</p>
<p>The Princess was going to deliver the station plan to the secret base for further analysis and searching for vulnerable spots. But her ship was attacked by the space destroyer “Devastator” headed by Darth Vader. At the last moment Princess Leia managed to send her findings to one of the closest planet called Tatooine with her droid R2-D2. Quite conveniently, an old friend of her father Obi-Wan Kenobi lives on that planet.</p>
<p>R2-D2 realizes the importance of his mission. He is going to encrypt the information so that the wrong people won’t get it.<br><a id="more"></a><br>The memory of R2-D2 has many files with images. First he wanted to use a well-known encrypting algorithm. The point of the method is to replace the least significant bits of the image with the encrypted message bits. The difference is practically unnoticeable on the picture, so one won’t suspect that it contains a hidden message.</p>
<p>But then R2-D2 decided that this method is quite well-known and the information won’t be protected enough. He decided to change the least significant bits of the image so that the secret information was a continuous sequence of the bytes of the image file. Help the droid determine if it is possible. And if it is, find the minimum number of bits to alter.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input contains integers <em>n</em> and <em>m</em> (1 ≤ <em>n</em>, <em>m</em> ≤ 250 000) — the sizes of the image file and of the file with the secret information in bytes. On the second line the content of the file with an image is given and the third line contains the secret information. The files are given as a sequence of space-separated bytes. Each byte is written as a sequence of eight bits in the order from the most to the least significant bit.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print “No”, if it is impossible to encrypt information in this image. Otherwise, print in the first line “Yes”, and in the second line — the number of bits to alter and the number of the byte in the file with the image, starting from which the secret information will be recorded. If there are multiple possible variants, print the one where the secret information is written closer to the beginning of the image file.</p>
<h2 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h2><table>
<thead>
<tr>
<th>input</th>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>3 2<br> 11110001 11110001 11110000<br>11110000 11110000</td>
<td>Yes<br>1 2</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>input</th>
<th>output</th>
</tr>
</thead>
<tbody>
<tr>
<td>3 1<br>11110000 11110001 11110000<br>11110000</td>
<td>Yes<br>0 1</td>
</tr>
</tbody>
</table>
<p><strong>Problem Author: </strong>Denis Dublennykh (prepared by Oleg Dolgorukov)</p>
<p>题目老长难懂，其实就是给你一个n byte的01A串，m byte的01B串.其中A串中每一byte的最后一个bit是可以修改的，问至少修改多少次A串能使B使A的子串。输出修改次数与最小的起始匹配位置。</p>
<p>首先将A串每byte取前7位（代码中的a数组）与B串每byte取前7位（代码中的b数组）用KMP匹配，因为前7位不能改，所以如果没有一处匹配就直接输出No了。</p>
<p>然后将A串每byte取后1位（代码中的ax数组）与B串每byte取后一位（代码中的bx数组）求hamming距离。</p>
<p>如何求ax与bx的hamming距离呢？</p>
<p>可以巧妙的ax作为卷积中的f函数，bx的逆向数组bx`作为卷积中的g函数。两者求卷积。这样就成了：<br>$$c[i + m - 1] = ax[i + 0] <em> bx`[m - 0 - 1] + ax[i + 1] </em> bx`[m - 1 - 1] + …… ax[i + j] <em> bx`[m - j - 1] + …… ax[i + m - 1] </em> bx`[m - (m - 1) - 1]$$</p>
<p>可以看出，如果ax , bx中同为1,乘积为1,否则为0,这样就能统计出了有多少位同为1了。</p>
<p>如果将ax,bx数组中的01取反，再进行上述操作，那么救能统计出有多少位同为0了。两者相加就是全部相同的有多少，用总字符数m减去它，就能求出hamming距离了！</p>
<p>卷积复杂度为O(nlg(n))而暴力算法的复杂度为O(n×m)，真是太神奇了！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">250005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">// Complex  z = a + b * i</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">	Complex(<span class="keyword">double</span> x = <span class="number">0.0</span>, <span class="keyword">double</span> y = <span class="number">0.0</span>) :</span><br><span class="line">			x(x), y(y) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	Complex <span class="keyword">operator</span> +(<span class="keyword">const</span> Complex &amp;amp;c) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Complex(x + c.x, y + c.y);</span><br><span class="line">	&#125;</span><br><span class="line">	Complex <span class="keyword">operator</span> -(<span class="keyword">const</span> Complex &amp;amp;c) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Complex(x - c.x, y - c.y);</span><br><span class="line">	&#125;</span><br><span class="line">	Complex <span class="keyword">operator</span> *(<span class="keyword">const</span> Complex &amp;amp;c) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Complex(x * c.x - y * c.y, x * c.y + y * c.x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], ax[N], bx[N];</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">8</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * kmpNext[]的意思:next'[i]=next[next[...[next[i]]]] (直到next'[i]&amp;lt;0或者</span></span><br><span class="line"><span class="comment"> x[next'[i]]!=x[i])</span></span><br><span class="line"><span class="comment"> * 这样的预处理可以快一些</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preKMP</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> kmpNext[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	j = kmpNext[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &amp;lt; m) &#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">-1</span> != j &amp;amp;&amp;amp; x[i] != x[j])</span><br><span class="line">			j = kmpNext[j];</span><br><span class="line">		<span class="keyword">if</span> (x[++i] == x[++j]) kmpNext[i] = kmpNext[j];</span><br><span class="line">		<span class="keyword">else</span> kmpNext[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 返回x在y中出现的次数,可以重叠</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> next[N];</span><br><span class="line"><span class="built_in">vector</span> pos;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP_Count</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> y[], <span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//x是模式串,y是主串</span></span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	pos.clear();</span><br><span class="line">	preKMP(x, m, next);</span><br><span class="line">	i = j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &amp;lt; n) &#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">-1</span> != j &amp;amp;&amp;amp; y[i] != x[j])</span><br><span class="line">			j = next[j];</span><br><span class="line">		i++;</span><br><span class="line">		j++;</span><br><span class="line">		<span class="keyword">if</span> (j &amp;gt;= m) &#123;</span><br><span class="line">			pos.push_back(i - m);</span><br><span class="line">			j = next[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//len = 2 ^ k</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Complex y[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = len / <span class="number">2</span>; i &amp;lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &amp;lt; j) swap(y[i], y[j]);</span><br><span class="line">		<span class="keyword">int</span> k = len / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span> (j &amp;gt;= k) &#123;</span><br><span class="line">			j -= k;</span><br><span class="line">			k /= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (j &amp;lt; k) j += k;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// FFT</span></span><br><span class="line"><span class="comment">// len = 2 ^ k</span></span><br><span class="line"><span class="comment">// on = 1  DFT    on = -1 IDFT</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span> </span>&#123;</span><br><span class="line">	change(y, len);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">2</span>; h &amp;lt;= len; h &amp;lt;&amp;lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		Complex wn(cos(-on * 2 * pi / h), sin(-on * 2 * pi / h));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; len; j += h) &#123;</span><br><span class="line">			<span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &amp;lt; j + h / <span class="number">2</span>; k++) &#123;</span><br><span class="line">				Complex u = y[k];</span><br><span class="line">				Complex t = w * y[k + h / <span class="number">2</span>];</span><br><span class="line">				y[k] = u + t;</span><br><span class="line">				y[k + h / <span class="number">2</span>] = u - t;</span><br><span class="line">				w = w * wn;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; len; i++) &#123;</span><br><span class="line">			y[i].x /= len;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//FFT求卷积,a数组长度n，b数组长度m</span></span><br><span class="line"><span class="keyword">int</span> res[N];</span><br><span class="line">Complex x1[N &amp;lt;&amp;lt; <span class="number">2</span>], x2[N &amp;lt;&amp;lt; <span class="number">2</span>]; <span class="comment">//FFT开4倍</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Convolution</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> b[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = max(n, m);</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &amp;lt; len * <span class="number">2</span>)</span><br><span class="line">		l &amp;lt;&amp;lt;= <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; l; i++)</span><br><span class="line">		x1[i] = Complex(i &amp;lt; n ? a[i] : <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; l; i++)</span><br><span class="line">		x2[i] = Complex(i &amp;lt; m ? b[i] : <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">//DFT</span></span><br><span class="line">	FFT(x1, l, <span class="number">1</span>);</span><br><span class="line">	FFT(x2, l, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; l; i++)</span><br><span class="line">		x1[i] = x1[i] * x2[i];</span><br><span class="line">	<span class="comment">//IDFT</span></span><br><span class="line">	FFT(x1, l, <span class="number">-1</span>);</span><br><span class="line">	<span class="comment">//based on m</span></span><br><span class="line">	<span class="keyword">int</span> base = m ;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt;= n - base; i++) &#123;</span><br><span class="line">		res[i] += (<span class="keyword">int</span>) (x1[i + base - <span class="number">1</span>].x + <span class="number">0.5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;m)) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">			a[i] = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">				a[i] = a[i] &amp;lt;&amp;lt; <span class="number">1</span> | (buf[j] - <span class="string">'0'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			ax[i] = buf[<span class="number">7</span>] - <span class="string">'0'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; m; i++) &#123;</span><br><span class="line">			b[i] = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">				b[i] = b[i] &amp;lt;&amp;lt; <span class="number">1</span> | (buf[j] - <span class="string">'0'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			bx[i] = buf[<span class="number">7</span>] - <span class="string">'0'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		KMP_Count(b, m, a, n);</span><br><span class="line">		<span class="keyword">if</span> (pos.size() == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			reverse(bx, bx + m);</span><br><span class="line">			<span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span>(res));</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">			Convolution(ax, bx);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">				ax[i] ^= <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; m; i++)</span><br><span class="line">				bx[i] ^= <span class="number">1</span>;</span><br><span class="line">			Convolution(ax, bx);</span><br><span class="line">			<span class="keyword">int</span> ans = m, idx = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; (<span class="keyword">int</span>) pos.size(); i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (m - res[pos[i]] &amp;lt; ans) &#123;</span><br><span class="line">					ans = m - res[pos[i]];</span><br><span class="line">					idx = pos[i] + <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans, idx);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[（转）关于卷积的一个血腥的讲解，看完给跪了]]></title>
      <url>http://lishangying.github.io/2014/11/05/intro-of-fft/</url>
      <content type="html"><![CDATA[<p>比如说你的老板命令你干活，你却到楼下打台球去了，后来被老板发现，他非常气愤，扇了你一巴掌（注意，这就是输入信号，脉冲），于是你的脸上会渐渐地（贱贱地）鼓起来一个包，你的脸就是一个系统，而鼓起来的包就是你的脸对巴掌的响应，好，这样就和信号系统建立起来意义对应的联系。下面还需要一些假设来保证论证的严谨：假定你的脸是线性时不变系统，也就是说，无论什么时候老板打你一巴掌，打在你脸的同一位置（这似乎要求你的脸足够光滑，如果你说你长了很多青春痘，甚至整个脸皮处处连续处处不可导，那难度太大了，我就无话可说了哈哈），你的脸上总是会在相同的时间间隔内鼓起来一个相同高度的包来，并且假定以鼓起来的包的大小作为系统输出。好了，那么，下面可以进入核心内容——卷积了！<br><a id="more"></a><br>如果你每天都到地下去打台球，那么老板每天都要扇你一巴掌，不过当老板打你一巴掌后，你5分钟就消肿了，所以时间长了，你甚至就适应这种生活了……如果有一天，老板忍无可忍，以0.5秒的间隔开始不间断的扇你的过程，这样问题就来了，第一次扇你鼓起来的包还没消肿，第二个巴掌就来了，你脸上的包就可能鼓起来两倍高，老板不断扇你，脉冲不断作用在你脸上，效果不断叠加了，这样这些效果就可以求和了，结果就是你脸上的包的高度随时间变化的一个函数了（注意理解）；如果老板再狠一点，频率越来越高，以至于你都辨别不清时间间隔了，那么，求和就变成积分了。可以这样理解，在这个过程中的某一固定的时刻，你的脸上的包的鼓起程度和什么有关呢？和之前每次打你都有关！但是各次的贡献是不一样的，越早打的巴掌，贡献越小，所以这就是说，某一时刻的输出是之前很多次输入乘以各自的衰减系数之后的叠加而形成某一点的输出，然后再把不同时刻的输出点放在一起，形成一个函数，这就是卷积，卷积之后的函数就是你脸上的包的大小随时间变化的函数。本来你的包几分钟就可以消肿，可是如果连续打，几个小时也消不了肿了，这难道不是一种平滑过程么？反映到剑桥大学的公式上，f(a)就是第a个巴掌，g(x-a)就是第a个巴掌在x时刻的作用程度，乘起来再叠加就ok了，大家说是不是这个道理呢？我想这个例子已经非常形象了，你对卷积有了更加具体深刻的了解了吗？</p>
<p>转自GSDzone论坛</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://2.im.guokr.com/V5QXaMJ7D6dpiGXPGmBsKoRQe9QYz0KIMf1yyJp_D7_PAAAAnAAAAEdJ.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 只言片语 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KDE4的配置参考]]></title>
      <url>http://lishangying.github.io/2014/10/31/kde4-config/</url>
      <content type="html"><![CDATA[<p>西北工大回来后,时间又充裕了,所以又开始了折腾KDE。</p>
<p>话说KDE的渲染阴影等效果非常接近MacBook。先放几张图：</p>
<p>[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14.png" alt="抓图14](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14-1024x575.png)" title="">
                </div>
                <div class="image-caption">抓图14](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图14-1024x575.png)</div>
            </figure><br><a id="more"></a><br>[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18.png" alt="抓图15](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15.png) [![抓图18](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18-1024x575.png)" title="">
                </div>
                <div class="image-caption">抓图15](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15-1024x575.png)](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图15.png) [![抓图18](http://sforkw-wp.qiniudn.com/jae/uploads/2014/10/抓图18-1024x575.png)</div>
            </figure></p>
<p>下面说一下，我的配置过程：</p>
<ol>
<li><strong>发行版：</strong><br> 我的发行版是Arch，没有Arch强大的AUR，很多桌面的配件很难装上。</li>
<li><strong>主题：</strong><br> 我的plasma主题是Helium与dynamo主题混合而成。标题栏主题是Qtcurve，图标主题是dynamo与flattr混合而成，鼠标主题是Breeze。应用程序主题是Qtcurve，配色是Breeze。这些都可以到<a href="http://pan.baidu.com/s/1jGLy3n4" target="_blank" rel="noopener">这里下载</a>。先安装qtcurve再将下载下来的文件解压并覆盖～/.kde4/share/即可。注意，Qtcurve的配置方案是Breeze，并且在窗口管理器中设置边框大小是无侧边框。</li>
<li><strong>全局菜单：</strong><br> 全局菜单可以先加archlinuxcn源，然后依次用yaourt安装appmenu-qt,appmenu-qt5,appmenu-gtk,kdeplasma-applets-menubar。完成之后在面板上添加刚安装的部件再打开“系统设置&gt;应用程序外观&gt;风格”然后选择微调标签，修改“菜单栏风格”为“仅导出”就能有全局菜单了。</li>
<li><strong>最大化隐藏菜单栏：</strong><br> 最大化隐藏菜单栏可以直接在qtCurve中配置，依然在“窗口管理器”中，勾选“最大化窗口无边框”复选框即可。</li>
<li><strong>最大化上面板显示窗口控制按钮：</strong>（最后一张图鼠标所指的地方）<br> 在AUR中安装kdeplasma-applets-kwin-button-improved，然后在面板上重复三次添加这个部件，分别设置为最小化（iconify），最大化/回复（maximize/restore）和关闭（close）就行了。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DE/WM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ACM International Collegiate Programming Contest Asia Regional Contest, Tokyo Problem D Space Golf]]></title>
      <url>http://lishangying.github.io/2014/10/19/acm-international-collegiate-programming-contest-asia-regional-contest-tokyo-problem-d-space-golf/</url>
      <content type="html"><![CDATA[<p>原题pdf：<a href="http://judge.u-aizu.ac.jp/onlinejudge/contest/ICPCOOC2014/D.pdf" target="_blank" rel="noopener">click here</a><br><br></p>
<hr>
<p>日本的亚洲区域赛真心简单啊。两个小时就刷了5题有余了。排名第一的队伍才做出7道。</p>
<p>题目真心长的可以了，看了半个小时才明白。。</p>
<p>题意其实也就是太空中向前方抛小球，问小球能够穿过N个障碍物后到达制定地点的最小初始速度是多少。非常暴力的模拟题。离散化后直接枚举弹跳的次数再取最小值即可。注意45°方向能成功的话，那还是45°最优。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PR pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="comment">/*start*/</span></span><br><span class="line"><span class="keyword">int</span> d, n, b;</span><br><span class="line">PR ob[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">vector</span>&amp;lt;pair&amp;lt;<span class="keyword">double</span>, <span class="keyword">double</span>&amp;gt; &amp;gt; vt;</span><br><span class="line">pair&amp;lt;<span class="keyword">double</span>, <span class="keyword">double</span>&amp;gt; dpr;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">2</span>][<span class="number">2</span>], e[<span class="number">2</span>];</span><br><span class="line">pair&amp;lt;<span class="keyword">double</span>, <span class="keyword">double</span>&amp;gt; Cramer(pair&amp;lt;<span class="keyword">double</span>, <span class="keyword">double</span>&amp;gt; dpr) &#123;</span><br><span class="line">	pair&amp;lt;<span class="keyword">double</span>, <span class="keyword">double</span>&amp;gt; res;</span><br><span class="line">	a[<span class="number">1</span>][<span class="number">0</span>] = dpr.F * dpr.F;</span><br><span class="line">	a[<span class="number">1</span>][<span class="number">1</span>] = dpr.F;</span><br><span class="line">	e[<span class="number">1</span>] = dpr.S;</span><br><span class="line">	<span class="keyword">double</span> div = a[<span class="number">0</span>][<span class="number">0</span>] * a[<span class="number">1</span>][<span class="number">1</span>] - a[<span class="number">1</span>][<span class="number">0</span>] * a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	res.F = (e[<span class="number">0</span>] * a[<span class="number">1</span>][<span class="number">1</span>] - e[<span class="number">1</span>] * a[<span class="number">0</span>][<span class="number">1</span>]) / div;</span><br><span class="line">	res.S = (e[<span class="number">1</span>] * a[<span class="number">0</span>][<span class="number">0</span>] - e[<span class="number">0</span>] * a[<span class="number">1</span>][<span class="number">0</span>]) / div;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;amp;d, &amp;amp;n, &amp;amp;b)) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;ob[i].F, &amp;amp;ob[i].S);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> ans = inf;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &amp;lt;= b; c++) &#123;<span class="comment">//enumerate the times bullet bounces the surface</span></span><br><span class="line">			<span class="keyword">double</span> dist = <span class="number">1.0</span> * d / (c + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">			a[<span class="number">0</span>][<span class="number">0</span>] = dist * dist;</span><br><span class="line">			a[<span class="number">0</span>][<span class="number">1</span>] = dist;</span><br><span class="line">			e[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">			vt.clear();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">				dpr = ob[i];</span><br><span class="line">				<span class="keyword">while</span> (dpr.F + eps &amp;gt;= dist) &#123;</span><br><span class="line">					dpr.F -= dist;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (dpr.F &amp;lt;= eps) &#123;</span><br><span class="line">					f = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				vt.push_back(dpr);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (f == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			pair&amp;lt;<span class="keyword">double</span>, <span class="keyword">double</span>&amp;gt; res;   </span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; Sz(vt); i++) &#123;</span><br><span class="line">				dpr = vt[i];</span><br><span class="line">				<span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">					res = Cramer(dpr);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">double</span> tmph = dpr.F * dpr.F * res.F + dpr.F * res.S;</span><br><span class="line">					<span class="keyword">if</span> (tmph + eps &amp;lt; dpr.S) &#123;</span><br><span class="line">						res = Cramer(dpr);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			res.F = <span class="number">-1.0</span> / (<span class="number">2</span> * res.F);</span><br><span class="line">			res.S = res.F * res.S * res.S;</span><br><span class="line">			ans = min(ans, <span class="built_in">sqrt</span>(res.F + res.S));</span><br><span class="line">                        <span class="comment">//if the vector's angle is less than 45</span></span><br><span class="line">			<span class="keyword">if</span> (res.S + eps &amp;lt; res.F) ans = min(ans, <span class="built_in">sqrt</span>(dist));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%.5f\n"</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 暴力 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优化Wine程序的字体显示]]></title>
      <url>http://lishangying.github.io/2014/10/13/wine-font-config/</url>
      <content type="html"><![CDATA[<p>默认Wine的字体太难看，而且有时候还会显示不出来。开启Wine字体的反锯齿及平滑功能以及将字体映射成文泉驿微米黑的方法是：</p>
<p>1.新建文本文件a.reg，放入如下内容：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Wine\X11 Driver]</span><br><span class="line">&quot;ClientSideAntiAliasWithCore&quot;=&quot;Y&quot;</span><br><span class="line">&quot;ClientSideAntiAliasWithRender&quot;=&quot;Y&quot;</span><br><span class="line">&quot;ClientSideWithRender&quot;=&quot;Y&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Control Panel\Desktop]</span><br><span class="line">&quot;FontSmoothing&quot;=&quot;2&quot;</span><br><span class="line">&quot;FontSmoothingType&quot;=dword:00000002</span><br><span class="line">&quot;FontSmoothingGamma&quot;=dword:00000578</span><br><span class="line">&quot;FontSmoothingOrientation&quot;=dword:00000001</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line">&quot;Arial Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Arial CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Arial CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Arial Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Arial TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Courier New Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Courier New CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Courier New CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Courier New Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Courier New TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times New Roman Baltic,186&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times New Roman CE,238&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times New Roman CYR,204&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times New Roman Greek,161&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times New Roman TUR,162&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Simsun&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br></pre></td></tr></table></figure></p>
<p>2.如果是普通的wine直接终端输入wine regedit打开注册表编辑器。然后点击“注册表—&gt;导入注册表文件”导入该文件。</p>
<p>3.如果是longene等封装好的wine（比如tm2013）可以使用tm2013 -reg命令打开注册表。</p>
]]></content>
      
        <categories>
            
            <category> Wine </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Sublime Text 3 dev 做网页开发的配置]]></title>
      <url>http://lishangying.github.io/2014/09/16/sublime-config-web/</url>
      <content type="html"><![CDATA[<p>文件：<a href="http://pan.baidu.com/s/1pJ7FVuz" target="_blank" rel="noopener">click here</a></p>
]]></content>
      
        <categories>
            
            <category> IDE/Editor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> sublime text </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的xfce4配置]]></title>
      <url>http://lishangying.github.io/2014/09/16/xfce4-config/</url>
      <content type="html"><![CDATA[<p>1.字体：infinally 渲染</p>
<p>2.英文字体：courier prime</p>
<p>3.窗口最大化隐藏标题栏：xfwm4-titleless-dev</p>
<p>4.窗口最大化标题栏隐藏后，在任务栏上显示控制按钮的插件：xfce4-windowck-plugin</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DE/WM </tag>
            
            <tag> xfce4 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4965 Fast Matrix Calculation]]></title>
      <url>http://lishangying.github.io/2014/08/19/hdu-4965-fast-matrix-calculation/</url>
      <content type="html"><![CDATA[<p><strong><span style="font-family: Arial; font-size: 12px; font-weight: bold; color: green;">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 206    Accepted Submission(s): 116<br></span></strong></p>
<p><div class="panel_title" align="left">Problem Description</div></p>
<div class="panel_content">

<p>One day, Alice and Bob felt bored again, Bob knows Alice is a girl who loves math and is just learning something about matrix, so he decided to make a crazy problem for her.</p>
<p>Bob has a six-faced dice which has numbers 0, 1, 2, 3, 4 and 5 on each face. At first, he will choose a number N (4 &lt;= N &lt;= 1000), and for N times, he keeps throwing his dice for K times (2 &lt;=K &lt;= 6) and writes down its number on the top face to make an N<em>K matrix A, in which each element is not less than 0 and not greater than 5. Then he does similar thing again with a bit difference: he keeps throwing his dice for N times and each time repeat it for K times to write down a K</em>N matrix B, in which each element is not less than 0 and not greater than 5. With the two matrix A and B formed, Alice’s task is to perform the following 4-step calculation.<br><a id="more"></a><br>Step 1: Calculate a new N<em>N matrix C = A</em>B.<br>Step 2: Calculate M = C^(N*N).<br>Step 3: For each element x in M, calculate x % 6. All the remainders form a new matrix M’.<br>Step 4: Calculate the sum of all the elements in M’.</p>
<p>Bob just made this problem for kidding but he sees Alice taking it serious, so he also wonders what the answer is. And then Bob turn to you for help because he is not good at math.</p>
<p></p></div><p></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Input</div></p>
<div class="panel_content">

<p>The input contains several test cases. Each test case starts with two integer N and K, indicating the numbers N and K described above. Then N lines follow, and each line has K integers between 0 and 5, representing matrix A. Then K lines follow, and each line has N integers between 0 and 5, representing matrix B.</p>
<p>The end of input is indicated by N = K = 0.</p>
<p></p></div><p></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Output</div></p>
<p><div class="panel_content">For each case, output the sum of all the elements in M’ in a line.</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Input</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">4 2 5 5 4 4 5 4 0 0 4 2 5 5 1 3 1 5 6 3 1 2 3 0 3 0 2 3 4 4 3 2 2 5 5 0 5 0 3 4 5 1 1 0 5 3 2 3 3 2 3 1 5 4 5 2 0 0</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Output</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">14 56</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Source</div></p>
<p><div class="panel_content"><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%209&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener"> 2014 Multi-University Training Contest 9 </a></div><br><br></p>
<hr>
<p><div class="panel_content">这题让我注意了矩阵模板的开销问题。1000X1000多次调用就会爆内存了。下面是用动态数组写的。效率非常慢，难以接受。</div><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PR pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*start*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 6</span></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span>** M;</span><br><span class="line">    Matrix(<span class="keyword">int</span> n, <span class="keyword">int</span> m) :n(n), m(m) &#123;</span><br><span class="line">        M = <span class="keyword">new</span> <span class="keyword">int</span>*[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            M[i] = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k) :</span><br><span class="line">            n(n), m(m) &#123;</span><br><span class="line">        M = <span class="keyword">new</span> <span class="keyword">int</span>*[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            M[i] = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        Init(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Matrix() &#123;</span><br><span class="line">        <span class="keyword">if</span> (M) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (M[i]) &#123;</span><br><span class="line">                    <span class="keyword">delete</span>[] M[i];</span><br><span class="line">                    M[i] = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">delete</span>[] M;</span><br><span class="line">            M = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">bool</span> k)</span> </span>&#123; <span class="comment">//k=1 返回单位矩阵，k=0 返回零矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++)</span><br><span class="line">                M[i][j] = k * (i == j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, M[i][j], j == m - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix &amp;amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Matrix&amp;amp; othr) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&amp;gt;~Matrix();</span><br><span class="line">        n = othr.n;</span><br><span class="line">        m = othr.m;</span><br><span class="line">        M = <span class="keyword">new</span> <span class="keyword">int</span>*[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            M[i] = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                M[i][j] = othr.M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix(<span class="keyword">const</span> Matrix &amp;amp; othr) &#123;</span><br><span class="line">        n = othr.n;</span><br><span class="line">        m = othr.m;</span><br><span class="line">        M = <span class="keyword">new</span> <span class="keyword">int</span>*[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            M[i] = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                M[i][j] = othr.M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Matrix&amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - othr.n || m - othr.m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (M[i][j] != othr.M[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix&amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m - othr.n) <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">//异常退出</span></span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, othr.m, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; othr.m; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &amp;lt; m; k++) &#123;</span><br><span class="line">                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;</span><br><span class="line">                    <span class="keyword">if</span> (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</span><br><span class="line">                    <span class="keyword">if</span> (ans.M[i][j] &amp;lt; <span class="number">0</span>) ans.M[i][j] += MOD;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">int</span>&amp;amp; x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++)</span><br><span class="line">                ans.M[i][j] = M[i][j] * x % MOD;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> +(<span class="keyword">const</span> Matrix &amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - othr.n || m - othr.m) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                ans.M[i][j] = M[i][j] + othr.M[i][j];</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;lt; <span class="number">0</span>) ans.M[i][j] += MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix <span class="keyword">operator</span> -(<span class="keyword">const</span> Matrix&amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - othr.n || m - othr.m) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                ans.M[i][j] = M[i][j] - othr.M[i][j];</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;lt; <span class="number">0</span>) ans.M[i][j] += MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix <span class="keyword">operator</span> ^(<span class="keyword">int</span> x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - m) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        Matrix ans(n, m, 1), base = *this;</span><br><span class="line">        <span class="keyword">while</span> (x &amp;gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp;amp; <span class="number">1</span>) ans = ans * base;</span><br><span class="line">            base = base * base;</span><br><span class="line">            x &amp;gt;&amp;gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;k)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;amp;&amp;amp; k == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        Matrix A(n, k, 0), B(k, n, 0);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; k; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;A.M[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;B.M[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Matrix mat = B * A;</span><br><span class="line">        <span class="keyword">int</span> r = n * n - <span class="number">1</span>;</span><br><span class="line">        Matrix res = A * (mat ^ r) * B;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; n; j++) &#123;</span><br><span class="line">                ans += res.M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后又试了试vector，虽然简单不少，但是仍然很慢：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PR pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*start*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 6</span></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">vector</span>&amp;lt;<span class="built_in">vector</span>&amp;lt;<span class="keyword">int</span>&amp;gt; &amp;gt;M;</span><br><span class="line">    Matrix(<span class="keyword">int</span> n, <span class="keyword">int</span> m) :n(n), m(m) &#123;</span><br><span class="line">        alloc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k) :</span><br><span class="line">            n(n), m(m) &#123;</span><br><span class="line">        alloc();</span><br><span class="line">        Init(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        M.resize(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            M[i].resize(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">bool</span> k)</span> </span>&#123; <span class="comment">//k=1 返回单位矩阵，k=0 返回零矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++)</span><br><span class="line">                M[i][j] = k * (i == j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, M[i][j], j == m - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Matrix&amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - othr.n || m - othr.m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (M[i][j] != othr.M[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix&amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m - othr.n) <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">//异常退出</span></span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, othr.m, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; othr.m; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &amp;lt; m; k++) &#123;</span><br><span class="line">                    ans.M[i][j] += M[i][k] * othr.M[k][j] % MOD;</span><br><span class="line">                    <span class="keyword">if</span> (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</span><br><span class="line">                    <span class="keyword">if</span> (ans.M[i][j] &amp;lt; <span class="number">0</span>) ans.M[i][j] += MOD;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">int</span>&amp;amp; x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++)</span><br><span class="line">                ans.M[i][j] = M[i][j] * x % MOD;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> +(<span class="keyword">const</span> Matrix &amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - othr.n || m - othr.m) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                ans.M[i][j] = M[i][j] + othr.M[i][j];</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;lt; <span class="number">0</span>) ans.M[i][j] += MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix <span class="keyword">operator</span> -(<span class="keyword">const</span> Matrix&amp;amp; othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - othr.n || m - othr.m) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123;</span><br><span class="line">                ans.M[i][j] = M[i][j] - othr.M[i][j];</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;gt;= MOD) ans.M[i][j] -= MOD;</span><br><span class="line">                <span class="keyword">if</span> (ans.M[i][j] &amp;lt; <span class="number">0</span>) ans.M[i][j] += MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix <span class="keyword">operator</span> ^(<span class="keyword">int</span> x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n - m) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        Matrix ans(n, m, 1), base = *this;</span><br><span class="line">        <span class="keyword">while</span> (x &amp;gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp;amp; <span class="number">1</span>) ans = ans * base;</span><br><span class="line">            base = base * base;</span><br><span class="line">            x &amp;gt;&amp;gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;k)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;amp;&amp;amp; k == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        Matrix A(n, k, 0), B(k, n, 0);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; k; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;A.M[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;B.M[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Matrix mat = B * A;</span><br><span class="line">        <span class="keyword">int</span> r = n * n - <span class="number">1</span>;</span><br><span class="line">        Matrix res = A * (mat ^ r) * B;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; n; j++) &#123;</span><br><span class="line">                ans += res.M[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>感觉其他方法还比较麻烦。算了就这样吧~</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 矩阵,暴力 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4952 Number Transformation]]></title>
      <url>http://lishangying.github.io/2014/08/15/hdu-4952-number-transformation/</url>
      <content type="html"><![CDATA[<p><strong><span style="font-family: Arial; font-size: 12px; font-weight: bold; color: green;">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 612    Accepted Submission(s): 310<br></span></strong></p>
<p><div class="panel_title" align="left">Problem Description</div></p>
<p><div class="panel_content">Teacher Mai has an integer x.</div></p>
<p>He does the following operations k times. In the i-th operation, x becomes the least integer no less than x, which is the multiple of i.</p>
<p>He wants to know what is the number x now.</p>
<p><div class="panel_bottom"></div><br><a id="more"></a><br>&nbsp;</p>
<p><div class="panel_title" align="left">Input</div></p>
<p><div class="panel_content">There are multiple test cases, terminated by a line “0 0”.</div></p>
<p>For each test case, the only one line contains two integers x,k(1&lt;=x&lt;=10^10, 1&lt;=k&lt;=10^10).</p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Output</div></p>
<p><div class="panel_content">For each test case, output one line “Case #k: x”, where k is the case number counting from 1.</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Input</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">2520 10 2520 20 0 0</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Output</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">Case #1: 2520 Case #2: 2600</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Source</div></p>
<p><div class="panel_content"><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener"> 2014 Multi-University Training Contest 8 </a></div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Recommend</div></p>
<p><div class="panel_content">hujie   |   We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4955" target="_blank" rel="noopener">4955</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4954" target="_blank" rel="noopener">4954</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4953" target="_blank" rel="noopener">4953</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4951" target="_blank" rel="noopener">4951</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4950" target="_blank" rel="noopener">4950</a></div><br><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PR pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*start*/</span></span><br><span class="line"><span class="keyword">int</span> __;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> type LL</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> type <span class="title">getint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    type ret=<span class="number">0</span>;<span class="keyword">bool</span> ok=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c=getchar();</span><br><span class="line">        <span class="keyword">if</span>(c&amp;gt;=<span class="string">'0'</span>&amp;amp;&amp;amp;c&amp;lt;=<span class="string">'9'</span>)ret=(ret&amp;lt;&amp;lt;<span class="number">3</span>)+ret+ret+c-<span class="string">'0'</span>,ok=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ok)<span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> type</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    LL x, k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        x=getint();</span><br><span class="line">        k=getint();</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> &amp;amp;&amp;amp; k == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&amp;lt;i+<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            x-=x/(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>LLS<span class="string">"\n"</span>,++__,x*k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 暴力 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4945 2048]]></title>
      <url>http://lishangying.github.io/2014/08/15/hdu-4945-2048/</url>
      <content type="html"><![CDATA[<p><strong><span style="font-family: Arial; font-size: 12px; font-weight: bold; color: green;">Time Limit: 3000/1500 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 590    Accepted Submission(s): 136<br></span></strong></p>
<p><div class="panel_title" align="left">Problem Description</div></p>
<div class="panel_content">

<p>Teacher Mai is addicted to game 2048. But finally he finds it’s too hard to get 2048. So he wants to change the rule:</p>
<p>You are given some numbers. Every time you can choose two numbers of the same value from them and merge these two numbers into their sum. And these two numbers disappear meanwhile.</p>
<p>If we can get 2048 from a set of numbers with this operation, Teacher Mai think this multiset is good.</p>
<p>You have n numbers, A<sub>1</sub>,…,A<sub>n</sub>. Teacher Mai ask you how many subsequences of A are good.</p>
<p>The number can be very large, just output the number modulo 998244353.<br><a id="more"></a><br></p></div><p></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Input</div></p>
<div class="panel_content">

<p>There are multiple test cases, terminated by a line “0”.</p>
<p>For each test case, the first line contains an integer n (1&lt;=n&lt;=10^5), the next line contains n integers a<sub>i</sub> (0&lt;=a<sub>i</sub>&lt;=2048).</p>
<p></p></div><p></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Output</div></p>
<p><div class="panel_content">For each test case, output one line “Case #k: ans”, where k is the case number counting from 1, ans is the number module 998244353.</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Input</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">4 1024 512 256 256 4 1024 1024 1024 1024 5 1024 512 512 512 1 0</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Output</div></p>
<p><div class="panel_content"></div></p>
<div style="font-family: Courier New,Courier,monospace;">

<p>Case #1: 1 Case #2: 11 Case #3: 8</p>
<p><div style="font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;"></div></p>
<p><div style="font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;"><em>Hint</em></div><br>In the first case, we should choose all the numbers. In the second case, all the subsequences which contain more than one number are good.</p>
<p></p></div><br>&nbsp;<p></p>
<p><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Source</div></p>
<p><div class="panel_content"><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%208&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener"> 2014 Multi-University Training Contest 8 </a></div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Recommend</div></p>
<p><div class="panel_content">hujie   |   We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4955" target="_blank" rel="noopener">4955</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4954" target="_blank" rel="noopener">4954</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4953" target="_blank" rel="noopener">4953</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4952" target="_blank" rel="noopener">4952</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4951" target="_blank" rel="noopener">4951</a></div><br><br></p>
<hr>
<p><div class="panel_content">貌似这几天第一次做的DP题啊。想象一下二进制就能明白——当子序列的2次幂数字之和大于等于2048时这个序列就是good序列了。正面dp要dp出2048~100000肯定要超时，而反面dp只需要dp出0~2047就够了。复杂度大大降低O（11＊2048*2048）。</div></p>
<p><div class="panel_content">标程写的很厉害！尤其是逆元的处理！</div><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PR pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*start*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">3010</span>];</span><br><span class="line">LL f[<span class="number">101000</span>], g[<span class="number">101000</span>];</span><br><span class="line"><span class="keyword">int</span> pn, n, __;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">13</span>][<span class="number">1025</span>]; <span class="comment">//表示取了2^0、2^1、2^2、……、2^i种元素，总和加起来等于j*2^(i+1)的所有情况</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = getchar();</span><br><span class="line">        <span class="keyword">if</span> (c &amp;gt;= <span class="string">'0'</span> &amp;amp;&amp;amp; c &amp;lt;= <span class="string">'9'</span>) ret = (ret &amp;lt;&amp;lt; <span class="number">3</span>) + ret + ret + c - <span class="string">'0'</span>, ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ok) <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL b, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (b %= MOD; x; x &amp;gt;&amp;gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp;amp; <span class="number">1</span>) res = res * b % MOD;</span><br><span class="line">        b = b * b % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= <span class="number">100000</span>; i++)</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    g[<span class="number">100000</span>] = powmod(f[<span class="number">100000</span>], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">99999</span>; i &amp;gt;= <span class="number">0</span>; i--)</span><br><span class="line">        g[i] = g[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        n = getint();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &amp;lt;= <span class="number">2048</span>; k &amp;lt;&amp;lt;= <span class="number">1</span>)</span><br><span class="line">            cnt[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            cnt[getint()]++;</span><br><span class="line">        &#125;</span><br><span class="line">        pn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &amp;lt;= <span class="number">2048</span>; k &amp;lt;&amp;lt;= <span class="number">1</span>)</span><br><span class="line">            pn += cnt[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, m = <span class="number">1024</span>; i &amp;lt;= <span class="number">11</span>; i++, m &amp;gt;&amp;gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt;= m; j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ct = cnt[<span class="number">1</span>];</span><br><span class="line">        LL cof = f[ct];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt;= ct &amp;amp;&amp;amp; i &amp;lt; <span class="number">2048</span>; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i &amp;gt;&amp;gt; <span class="number">1</span>] += g[ct - i] * g[i] % MOD;</span><br><span class="line">            <span class="keyword">if</span> (dp[<span class="number">0</span>][i &amp;gt;&amp;gt; <span class="number">1</span>] &amp;gt; MOD) dp[<span class="number">0</span>][i &amp;gt;&amp;gt; <span class="number">1</span>] -= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, m = <span class="number">1024</span>; i &amp;lt;= <span class="number">11</span>; i++, m &amp;gt;&amp;gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            ct = cnt[<span class="number">1</span> &amp;lt;&amp;lt; i];</span><br><span class="line">            cof = cof * f[ct] % MOD;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; m; j++) &#123; </span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &amp;lt;= ct &amp;amp;&amp;amp; j + k &amp;lt; m; k++) &#123;<span class="comment">//不要把满足good的序列转移上去。</span></span><br><span class="line">                        dp[i][(j + k) &amp;gt;&amp;gt; <span class="number">1</span>] += dp[i - <span class="number">1</span>][j] * g[k] % MOD * g[ct - k] % MOD;</span><br><span class="line">                        <span class="keyword">if</span> (dp[i][(j + k) &amp;gt;&amp;gt; <span class="number">1</span>] &amp;gt; MOD) dp[i][(j + k) &amp;gt;&amp;gt; <span class="number">1</span>] -= MOD;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = (powmod(<span class="number">2</span>, pn) - dp[<span class="number">11</span>][<span class="number">0</span>] * cof) % MOD</span><br><span class="line">                * powmod(<span class="number">2</span>, n - pn)%MOD;</span><br><span class="line">        <span class="keyword">if</span> (ans &amp;lt; <span class="number">0</span>) ans += MOD;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++__, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的HerbstluftWM]]></title>
      <url>http://lishangying.github.io/2014/08/14/herbustluftwm-config/</url>
      <content type="html"><![CDATA[<p>一直以来想折腾一下WM，但是又感觉麻烦。前天把笔记本带到机房就借此机会在虚拟机中玩了一下。发现事实上比我想像的要简单的多。少量配置了一下两个配置文件就能用了。然后使用compton做透明特效。看起来也挺简洁美观的。</p>
<p>WM最大的特点就是轻便，herbstluftWM也不例外。安装只有几百兆，附加依赖少，几乎一个命令的事情。启动、响应速度都是普通DE无法比拟的快。加上compton的透明效果，稍加修饰整个系统的界面就非常美观了。</p>
<p>两个配置文件与更详细的说明我已经push到了github：<a href="https://github.com/stkevintan/herbstluftwm" target="_blank" rel="noopener">click here</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DE/WM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 2874 Connections between cities]]></title>
      <url>http://lishangying.github.io/2014/08/13/hdu-2874-connections-between-cities/</url>
      <content type="html"><![CDATA[<h1 id="Connections-between-cities"><a href="#Connections-between-cities" class="headerlink" title="Connections between cities"></a>Connections between cities</h1><p><strong><span style="font-family: Arial; font-size: 12px; font-weight: bold; color: green;">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 4759    Accepted Submission(s): 1341<br></span></strong></p>
<p><div class="panel_title" align="left">Problem Description</div></p>
<p><div class="panel_content">After World War X, a lot of cities have been seriously damaged, and we need to rebuild those cities. However, some materials needed can only be produced in certain places. So we need to transport these materials from city to city. For most of roads had been totally destroyed during the war, there might be no path between two cities, no circle exists as well.<br>Now, your task comes. After giving you the condition of the roads, we want to know if there exists a path between any two cities. If the answer is yes, output the shortest path between them.</div><br><a id="more"></a></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Input</div></p>
<p><div class="panel_content">Input consists of multiple problem instances.For each instance, first line contains three integers n, m and c, 2&lt;=n&lt;=10000, 0&lt;=m&lt;10000, 1&lt;=c&lt;=1000000. n represents the number of cities numbered from 1 to n. Following m lines, each line has three integers i, j and k, represent a road between city i and city j, with length k. Last c lines, two integers i, j each line, indicates a query of city i and city j.</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Output</div></p>
<p><div class="panel_content">For each problem instance, one line for each query. If no path between two cities, output “Not connected”, otherwise output the length of the shortest path between them.</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Input</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">5 3 2 1 3 2 2 4 3 5 2 3 1 4 4 5</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Output</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">Not connected 6</div></p>
<p><div style="font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;"></div></p>
<p><div style="font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;"><em>Hint</em></div><br>Hint Huge input, scanf recommended.<br><em> </em><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Source</div></p>
<p><div class="panel_content"><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2009%20Multi-University%20Training%20Contest%208%20-%20Host%20by%20BJNU&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener"> 2009 Multi-University Training Contest 8 - Host by BJNU </a></div><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PR pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*start*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10004</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 10005</span></span><br><span class="line"><span class="keyword">int</span> n, m, c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, nxt;</span><br><span class="line">&#125; e[M &amp;lt;&amp;lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], ecnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].w = w;</span><br><span class="line">    e[ecnt].nxt = head[u];</span><br><span class="line">    head[u] = ecnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//RMQ</span></span><br><span class="line"><span class="keyword">int</span> dpM[<span class="number">20</span>][N &amp;lt;&amp;lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> lg2[N &amp;lt;&amp;lt; <span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getL(R,L) (R-(L)+1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    lg2[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++)</span><br><span class="line">        lg2[i] = i &amp;amp; (i - <span class="number">1</span>) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= lg2[n]; i++) &#123;</span><br><span class="line">        m = getL(n, <span class="number">1</span> &amp;lt;&amp;lt; i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &amp;lt;= m; j++) &#123;</span><br><span class="line">            dpM[i][j] = min(dpM[i - <span class="number">1</span>][j], dpM[i - <span class="number">1</span>][j + (<span class="number">1</span> &amp;lt;&amp;lt; (i - <span class="number">1</span>))]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRMQ</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &amp;gt; b) swap(a, b);</span><br><span class="line">    <span class="keyword">int</span> s = lg2[b - a + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(dpM[s][a], dpM[s][getL(b, <span class="number">1</span> &amp;lt;&amp;lt; s)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//LCA</span></span><br><span class="line"><span class="keyword">int</span> E[N];</span><br><span class="line"><span class="keyword">int</span> T[N];</span><br><span class="line"><span class="keyword">int</span> H[N];</span><br><span class="line"><span class="keyword">int</span> depth, cnt;</span><br><span class="line"><span class="keyword">int</span> belong[N], bcnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (belong[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getEuler</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = dpM[<span class="number">0</span>][H[u] = ++cnt] = ++depth;</span><br><span class="line">    E[tmp] = u;</span><br><span class="line">    belong[u] = bcnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        T[v] = T[u] + e[i].w;</span><br><span class="line">        getEuler(v, u);</span><br><span class="line">        dpM[<span class="number">0</span>][++cnt] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLCA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(T, <span class="number">0</span>, <span class="keyword">sizeof</span>(T));</span><br><span class="line">    <span class="built_in">memset</span>(belong, <span class="number">0</span>, <span class="keyword">sizeof</span>(belong));</span><br><span class="line">    bcnt = cnt = depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">while</span> ((root = findRoot()) != <span class="number">-1</span>) &#123;</span><br><span class="line">        ++bcnt;</span><br><span class="line">        getEuler(root);</span><br><span class="line">    &#125;</span><br><span class="line">    initRMQ(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (belong[u] != belong[v]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (H[u] &amp;gt; H[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">return</span> E[getRMQ(H[u], H[v])];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;amp;n, &amp;amp;m, &amp;amp;c)) &#123;</span><br><span class="line">        initEdge();</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</span><br><span class="line">            add(u, v, w);</span><br><span class="line">            add(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        initLCA();</span><br><span class="line">        <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">            <span class="keyword">int</span> r = getLCA(u, v);</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">"Not connected"</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T[u] + T[v] - <span class="number">2</span> * T[r]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内网 2085马农]]></title>
      <url>http://lishangying.github.io/2014/08/13/zjnu2085/</url>
      <content type="html"><![CDATA[<p>##Description<br> 在观看完战马检阅之后，来自大草原的两兄弟决心成为超级“马农”，专门饲养战马。</p>
<p>兄弟两回到草原，将可以养马的区域，分为N*N的单位面积的正方形，并实地进行考察，归纳出了每个单位面积可以养马所获得的收益。接下来就要开始规划他们各自的马场了。</p>
<p>首先，两人的马场都必须是矩形区域。同时，为了方便两人互相照应，也为了防止马匹互相走散，规定两个马场的矩形区域相邻，且只有一个交点。最后，互不认输的两人希望两个马场的收益相当，这样才不会影响他们兄弟的感情。</p>
<p>现在，兄弟两找到你这位设计师，希望你给他们设计马场，问共有多少种设计方案。<br><a id="more"></a></p>
<p>##Input</p>
<p>第一行一个整数N，表示整个草原的大小为N*N。</p>
<p>接下来N行，每行N个整数A(i,j)，表示第i行第j列的单位草地的收成。（注意：收益可能是负数，养马也不是包赚的，马匹也可能出现生病死亡等意外。）</p>
<p>1&lt;=N&lt;=50<br>-1000&lt;A(i,j)&lt;1000</p>
<p>##Output</p>
<p> 输出符合两人要求的草原分配方案数。</p>
<p>##Sample Input</p>
<p>3 1 2 3 4 5 6 7 8 9</p>
<p>##Sample Output</p>
<p>2</p>
<p>##Hint</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://acm.zjnu.edu.cn/JudgeOnline/userfiles/images/2085.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>##Source</p>
<p>2014宁波初中 T2</p>
<p><br></p>
<hr>
<p>宁波镇海中学的罗方炜给我们组的一场比赛。</p>
<p>此题主要靠技巧。枚举中心点，然后用数组hash。注意数组清空复杂度很大，每次清空必定超时。应该用一个栈来记录更改的地方，直接赋0.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PR pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*start*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2500000</span></span><br><span class="line"><span class="keyword">int</span> f[N][N],a[N][N];</span><br><span class="line"><span class="keyword">int</span> h[M&amp;lt;&amp;lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> st[N*N],top;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &amp;lt;= n; ++j) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;amp;a[i][j]);</span><br><span class="line">                f[i][j]=f[i<span class="number">-1</span>][j]+f[i][j<span class="number">-1</span>]-f[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &amp;lt;= n; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &amp;lt;= n; ++y) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= x; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &amp;lt;= y; ++j) &#123;</span><br><span class="line">                        st[top++]=f[x][y]-f[x][j<span class="number">-1</span>]-f[i<span class="number">-1</span>][y]+f[i<span class="number">-1</span>][j<span class="number">-1</span>]+M;</span><br><span class="line">                        h[st[top<span class="number">-1</span>]]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = x+<span class="number">1</span>; i &amp;lt;= n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = y+<span class="number">1</span>; j &amp;lt;= n; ++j) &#123;</span><br><span class="line">                        res+=h[f[i][j]-f[i][y]-f[x][j]+f[x][y]+M];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(top)&#123;</span><br><span class="line">                    h[st[--top]]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &amp;lt;= n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &amp;lt;= y; ++j) &#123;</span><br><span class="line">                        st[top++]=f[i][y]-f[x<span class="number">-1</span>][y]-f[i][j<span class="number">-1</span>]+f[x<span class="number">-1</span>][j<span class="number">-1</span>]+M;</span><br><span class="line">                        h[st[top<span class="number">-1</span>]]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt; x; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = y+<span class="number">1</span>; j &amp;lt;= n; ++j) &#123;</span><br><span class="line">                        res+=h[f[x<span class="number">-1</span>][j]-f[x<span class="number">-1</span>][y]-f[i<span class="number">-1</span>][j]+f[i<span class="number">-1</span>][y]+M];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(top)&#123;</span><br><span class="line">                    h[st[--top]]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 暴力 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内网2082 字母]]></title>
      <url>http://lishangying.github.io/2014/08/12/zjnu2082/</url>
      <content type="html"><![CDATA[<p>##Description</p>
<p>乐乐开始学习英文字母了，小C为他准备了很多字母牌，每张牌有一个英文字母。有天乐乐把所有的牌排成一行，这些字母竟然形成了一个回文串。小C想知道，乐乐在排字母的时候，有多少种情况，最后的字母形成回文串。</p>
<p>##Input</p>
<p>输入一行，表示乐乐有哪些字母，均大写。</p>
<p>##Output</p>
<p>输出有多少种情况，排列的字母是一个回文串。<br><a id="more"></a></p>
<p>##Sample Input<br>AAAAB AABB CD</p>
<p>##Sample Output</p>
<p>1 2 0</p>
<p>##Hint<br>100%的数据，字母的个数不超过1000。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p>A(m,m)/(A(cnt1,cnt1)*A(cnt2,cnt2)…….)</p>
<p>主要是排列组合数的计算技巧。将n!分解质因数，然后上面的因子减去下面相同的因子，这样就不会因为计算阶乘而爆数组了。n!中质因数m的个数：n/m+n/m^2+n/m^3+n/m^4………<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DSIZE 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigInteger</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">bool</span> sign; <span class="comment">//true-p , false-n</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BigInteger() &#123;</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">        sign = <span class="literal">true</span>;</span><br><span class="line">        clr(a, <span class="number">0</span>);</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> *=(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;amp;<span class="keyword">operator</span>&amp;lt;&amp;lt;(ostream &amp;amp;, <span class="keyword">const</span> BigInteger &amp;amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BigInteger::<span class="keyword">operator</span>*=(<span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &amp;lt; <span class="number">0</span>) x = -x, sign ^= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; len; i++) &#123;</span><br><span class="line">        a[i] *= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &amp;gt;= DSIZE) &#123;</span><br><span class="line">            a[i + <span class="number">1</span>] += a[i] / DSIZE;</span><br><span class="line">            a[i] %= DSIZE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[len]) len++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;amp;<span class="keyword">operator</span>&amp;lt;&amp;lt;(ostream &amp;amp;out, <span class="keyword">const</span> BigInteger &amp;amp;x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!x.sign &amp;amp;&amp;amp; x.len) <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, x.a[x.len - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x.len - <span class="number">2</span>; i &amp;gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d"</span>, x.a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>], tot;</span><br><span class="line"><span class="keyword">bool</span> ok[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> faclist[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    clr(ok, <span class="number">0</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ok[i]) prime[tot++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; tot; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = i * prime[j];</span><br><span class="line">            <span class="keyword">if</span> (now &amp;gt; n) <span class="keyword">break</span>;</span><br><span class="line">            ok[now] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfact</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = x &amp;lt; <span class="number">0</span> ? -x : x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; prime[i] &amp;lt;= s; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = prime[i]; j &amp;lt;= s; j *= prime[i]) &#123;</span><br><span class="line">            faclist[i] += x / j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    getprime(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str)) &#123;</span><br><span class="line">        n = <span class="built_in">strlen</span>(str);</span><br><span class="line">        clr(cnt, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            cnt[str[i] - <span class="string">'A'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">26</span> &amp;amp;&amp;amp; f &amp;lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[i] &amp;amp; <span class="number">1</span>) f++;</span><br><span class="line">            m += cnt[i] &amp;gt;&amp;gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f &amp;gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        clr(faclist, <span class="number">0</span>);</span><br><span class="line">        getfact(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">26</span>; i++)</span><br><span class="line">            getfact(-cnt[i]);</span><br><span class="line">        BigInteger res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; prime[i] &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; faclist[i]; j++) &#123;</span><br><span class="line">                res *= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &amp;lt;&amp;lt; res &amp;lt;&amp;lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```language</span><br></pre></td></tr></table></figure></p>
<p></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 组合 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU4944 FSF’s game]]></title>
      <url>http://lishangying.github.io/2014/08/12/hdu4944-fsfs-game/</url>
      <content type="html"><![CDATA[<p><strong><span style="font-family: Arial; font-size: 12px; font-weight: bold; color: green;">Time Limit: 9000/4500 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 166    Accepted Submission(s): 76<br></span></strong></p>
<p><div class="panel_title" align="left">Problem Description</div></p>
<p><div class="panel_content">FSF has programmed a game.<br>In this game, players need to divide a rectangle into several same squares.<br>The length and width of rectangles are integer, and of course the side length of squares are integer.</div></p>
<p>After division, players can get some coins.<br>If players successfully divide a AxB rectangle(length: A, width: B) into KxK squares(side length: K), they can get A<em>B/ gcd(A/K,B/K) gold coins.<br>In a level, you can’t get coins twice with same method.<br>(For example, You can get 6 coins from 2x2(A=2,B=2) rectangle. When K=1, A</em>B/gcd(A/K,B/K)=2; When K=2, A<em>B/gcd(A/K,B/K)=4; 2+4=6; )<br><a id="more"></a><br>There are N</em>(N+1)/2 levels in this game, and every level is an unique rectangle. (1x1 , 2x1, 2x2, 3x1, …, Nx(N-1), NxN)</p>
<p>FSF has played this game for a long time, and he finally gets all the coins in the game.<br>Unfortunately ,he uses an UNSIGNED 32-BIT INTEGER variable to count the number of coins.<br>This variable may overflow.<br>We want to know what the variable will be.<br>(In other words, the number of coins mod 2^32)</p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Input</div></p>
<p><div class="panel_content">There are multiply test cases.</div></p>
<p>The first line contains an integer T(T&lt;=500000), the number of test cases</p>
<p>Each of the next T lines contain an integer N(N&lt;=500000).</p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Output</div></p>
<p><div class="panel_content">Output a single line for each test case.</div></p>
<p>For each test case, you should output “Case #C: “. first, where C indicates the case number and counts from 1.</p>
<p>Then output the answer, the value of that UNSIGNED 32-BIT INTEGER variable.</p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Input</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">3 1 3 100</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Output</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">Case #1: 1<br>Case #2: 30<br>Case #3: 15662489</div></p>
<p><div style="font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;"></div></p>
<p><div style="font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;"><em>Hint</em></div><br>In the second test case, there are six levels(1x1,1x2,1x3,2x2,2x3,3x3) Here is the details for this game: 1x1: 1(K=1); 1x2: 2(K=1); 1x3: 3(K=1); 2x2: 2(K=1), 4(K=2); 2x3: 6(K=1); 3x3: 3(K=1), 9(K=3); 1+2+3+2+4+6+3+9=30<br><em> </em><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Author</div></p>
<p><div class="panel_content">UESTC</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Source</div></p>
<p><div class="panel_content"><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2014%20Multi-University%20Training%20Contest%207&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener"> 2014 Multi-University Training Contest 7 </a></div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Recommend</div></p>
<p><div class="panel_content">We have carefully selected several similar problems for you:  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4943" target="_blank" rel="noopener">4943</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4942" target="_blank" rel="noopener">4942</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4941" target="_blank" rel="noopener">4941</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4940" target="_blank" rel="noopener">4940</a> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4939" target="_blank" rel="noopener">4939</a></div></p>
<p><div class="panel_content">N(LogN)的复杂度。</div><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500001</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f[N];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> g[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &amp;lt; N; j++) &#123;</span><br><span class="line">            g[i * j] += (<span class="number">1L</span>L + j) * j / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &amp;lt; N; i++) &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + i * g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &amp;lt;= T; c++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %u\n"</span>, c, f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github使用札记]]></title>
      <url>http://lishangying.github.io/2014/08/10/github-tips/</url>
      <content type="html"><![CDATA[<ol>
<li><p>生成ssh key:</p>
<pre><code>ssh-keygen -t rsa -C &quot;stkevintan@foxmail.com&quot;
</code></pre><p> 输入合适的密码。然后将生成的pub公钥粘贴到github上：<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">click here</a></p>
</li>
<li><p>版本推送命令：<a id="more"></a></p>
<pre><code>### Create a new repository on the command line

    touch README.md
    git init
    git add README.md
    git commit -m &quot;first commit&quot;
    git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;
    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;`&lt;/pre&gt;

    ### Push an existing repository from the command line

    &lt;pre&gt;`git remote add origin &lt;span class=&quot;js-live-clone-url&quot;&gt;https://github.com/stkevintan/资源名.git&lt;/span&gt;
    &lt;span class=&quot;js-selectable-text&quot;&gt;git push -u origin master&lt;/span&gt;
</code></pre></li>
<li>修改或删除passphrase。(<a href="https://help.github.com/articles/working-with-ssh-key-passphrases/" target="_blank" rel="noopener">Details</a>)<pre><code>ssh-keygen -p
</code></pre></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内网2073 城主GeassCode]]></title>
      <url>http://lishangying.github.io/2014/08/01/zjnu2073-geasscode/</url>
      <content type="html"><![CDATA[<p>##Description</p>
<p>GeassCode凭借自己在topcoder上的超凡表现，赢得了国王的喜爱，国王赏赐他一座城池。这座城池里有n个 村子，m条路连接这些村子。坐上城主的GeassCode决定要修路，他打算用最少的代价把所以的村子连在一起。据探子回报，有些村子之间虽然原来没有路 径，但是可以强行的去建一条路。GeassCode想知道，如果强行在某两个村子之间建一条路，最后的总花费是多少？</p>
<a id="more"></a>
<p>##Input</p>
<p>输入一行三个整数n，m，表示有n个村子，m条可建路径。</p>
<p>2..m+1行，每行3个整数a,b,c（a≠b），表示可以在a和b村庄建一条花费为c的路径。</p>
<p>第m+2行一个整数q，表示有多少个询问。</p>
<p>接下来q个询问，每行3个整数a,b,c（a≠b），表示如果可以另外在a和b村庄建一条花费为c的路径，最终需要多少花费？</p>
<p>##Output</p>
<p>对于每个询问输出，输出最少的花费。</p>
<p>##Sample Input<br>4 5 1 2 4 2 3 3 1 4 6 2 4 3 1 3 2 3 3 4 3 1 3 1 1 4 2</p>
<p>##Sample Output<br>8 7 7</p>
<p>##Hint<br>n的范围[2,50000],m的范围[2,100000],q的范围[1,50000]。</p>
<p>输入的m条边保证可以把所有村庄连在一起。输入的边权范围[1,10<sup>6</sup>]</p>
<p>##Source</p>
<p>张超<br><br></p>
<hr>
<p>解法是如果可以在(u,v)上再加条边，则将最小生成树上的(u,v)节点最短路径中的最大边权与要加上这条边的替换。如果新的花费比旧的花费少，则取新的花费。否则什么也不换，取旧的花费。</p>
<p>如何求树上两点之间的最短路径中的最大边权呢？</p>
<p>可以按照这篇文章所述建一个类似于哈夫曼树，将点作为叶子，边的权值作为祖先构造一个N+N的树：<a href="http://blog.sina.com.cn/s/blog_51cea4040100ss3n.html" target="_blank" rel="noopener">click here</a></p>
<p>这样写的很容易错，尤其要区分两颗树的规模，我在这上面错了很久。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100005</span></span><br><span class="line"><span class="keyword">int</span> n, m ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> mark;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&amp;lt;(Graph othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &amp;lt; othr.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[M];</span><br><span class="line"><span class="comment">//UnionSet</span></span><br><span class="line"><span class="keyword">int</span> p[N + N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUset</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt;= n; i++)</span><br><span class="line">        p[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uFind</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uMerge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">//y合并到x</span></span><br><span class="line">    <span class="keyword">int</span> fx = uFind(x);</span><br><span class="line">    <span class="keyword">int</span> fy = uFind(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy) p[fy] = fx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Edge Graph</span></span><br><span class="line"><span class="keyword">int</span> head[N + N], pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nxt;</span><br><span class="line">&#125; e[N + N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[pos].v = v;</span><br><span class="line">    e[pos].nxt = head[u];</span><br><span class="line">    head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="built_in">vector</span>&amp;lt;pr&amp;lt;<span class="keyword">int</span>, <span class="keyword">int</span>&amp;gt; &amp;gt; query[N];</span><br><span class="line"><span class="keyword">int</span> qw[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> lca[N];</span><br><span class="line"><span class="keyword">int</span> val[N + N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> solved = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        solved += dfs(v);</span><br><span class="line">        <span class="keyword">if</span> (size == solved) <span class="keyword">return</span> solved;</span><br><span class="line">        uMerge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(~val[u])<span class="keyword">return</span> solved;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; (<span class="keyword">int</span>) query[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = query[u][i].F;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">            solved++;</span><br><span class="line">            lca[query[u][i].S] = uFind(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> solved;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initUset(n);</span><br><span class="line">    clrA(vis, <span class="number">0</span>);</span><br><span class="line">    dfs(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clrA(val, <span class="number">-1</span>);</span><br><span class="line">    initUset(n + n);</span><br><span class="line">    initEdge();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[i].mark == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line">        val[++n] = g[i].w;</span><br><span class="line">        <span class="keyword">int</span> fu = uFind(g[i].u);</span><br><span class="line">        <span class="keyword">int</span> fv = uFind(g[i].v);</span><br><span class="line">        p[fu] = n;</span><br><span class="line">        p[fv] = n;</span><br><span class="line">        add(n, fu);</span><br><span class="line">        add(n, fv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;amp;g[i].u, &amp;amp;g[i].v, &amp;amp;g[i].w);</span><br><span class="line">            g[i].mark = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(g + <span class="number">1</span>, g + <span class="number">1</span> + m);</span><br><span class="line">        initUset(n);</span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> fx = uFind(g[i].u);</span><br><span class="line">            <span class="keyword">int</span> fy = uFind(g[i].v);</span><br><span class="line">            <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">                sum += g[i].w;</span><br><span class="line">                g[i].mark = <span class="literal">true</span>;</span><br><span class="line">                p[fy] = fx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++)</span><br><span class="line">            query[i].clear();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;size);</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= size; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</span><br><span class="line">            qw[i] = w;</span><br><span class="line">            query[u].push_back(MP(v, i));</span><br><span class="line">            query[v].push_back(MP(u, i));</span><br><span class="line">        &#125;</span><br><span class="line">        rebuild();</span><br><span class="line">        tarjan();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= size; i++) &#123;</span><br><span class="line">            LL ans = sum - val[lca[i]] + qw[i];</span><br><span class="line">            <span class="built_in">printf</span>(LLS<span class="string">"\n"</span>, min(ans, sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实，可以直接在dfs的回溯过程中将子节点的max求出来。这样简单多了。感叹一句：并查集真神奇！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair&amp;lt;int,int&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x &amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x &amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y &amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x &amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x &amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y &amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty())x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100005</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&amp;lt;(Graph othr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &amp;lt; othr.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pair</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    Pair(<span class="keyword">int</span> x, <span class="keyword">int</span> y) :</span><br><span class="line">            x(x), y(y) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Edge Graph</span></span><br><span class="line"><span class="keyword">int</span> head[N], pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, nxt;</span><br><span class="line">&#125; e[N &amp;lt;&amp;lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[pos].v = v;</span><br><span class="line">    e[pos].w = w;</span><br><span class="line">    e[pos].nxt = head[u];</span><br><span class="line">    head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UnionSet</span></span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="keyword">int</span> pmax[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt;= n; i++)</span><br><span class="line">        p[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uFind</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x != p[x]) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = p[x];</span><br><span class="line">        p[x] = uFind(p[x]);</span><br><span class="line">        pmax[x] = max(pmax[x], pmax[t]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uMerge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">//y合并到x</span></span><br><span class="line">    <span class="keyword">int</span> fx = uFind(x);</span><br><span class="line">    <span class="keyword">int</span> fy = uFind(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">        p[fy] = fx;</span><br><span class="line">        pmax[fy] = max(pmax[fy], pmax[fx]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="built_in">vector</span>&amp;lt;Pair&amp;gt; query[N];</span><br><span class="line"><span class="built_in">vector</span>&amp;lt;Pair&amp;gt; mark[N];</span><br><span class="line"><span class="keyword">int</span> qw[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> lca[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        pmax[v] = max(pmax[v], e[i].w);</span><br><span class="line">        uMerge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; (<span class="keyword">int</span>) query[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = query[u][i].x;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">            mark[uFind(v)].push_back(Pair(u, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mark[u].empty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (VI(Pair)it=mark[u].begin();it!=mark[u].end();++it) &#123;</span><br><span class="line">            <span class="keyword">int</span> uu = it-&amp;gt;x;</span><br><span class="line">            <span class="keyword">int</span> vv = query[it-&amp;gt;x][it-&amp;gt;y].x;</span><br><span class="line">            <span class="keyword">int</span> ss = query[it-&amp;gt;x][it-&amp;gt;y].y;</span><br><span class="line">            uFind(uu);</span><br><span class="line">            uFind(vv);</span><br><span class="line">            lca[ss] = max(pmax[uu], pmax[vv]);</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        mark[u].clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> assert(<span class="literal">false</span>), <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initUset();</span><br><span class="line">    clrA(vis, <span class="number">0</span>);</span><br><span class="line">    clrA(pmax, <span class="number">0</span>);</span><br><span class="line">    size = m;</span><br><span class="line">    dfs(findRoot(), <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;amp;g[i].u, &amp;amp;g[i].v, &amp;amp;g[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(g + <span class="number">1</span>, g + <span class="number">1</span> + m);</span><br><span class="line">        initUset();</span><br><span class="line">        initEdge();</span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> fx = uFind(g[i].u);</span><br><span class="line">            <span class="keyword">int</span> fy = uFind(g[i].v);</span><br><span class="line">            <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">                sum += g[i].w;</span><br><span class="line">                add(g[i].u, g[i].v, g[i].w);</span><br><span class="line">                add(g[i].v, g[i].u, g[i].w);</span><br><span class="line">                p[fy] = fx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">            query[i].clear();</span><br><span class="line">            mark[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;m);</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w);</span><br><span class="line">            qw[i] = w;</span><br><span class="line">            query[u].push_back(Pair(v, i));</span><br><span class="line">            query[v].push_back(Pair(u, i));</span><br><span class="line">        &#125;</span><br><span class="line">        tarjan();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            LL tmp = sum - lca[i] + qw[i];</span><br><span class="line">            <span class="built_in">printf</span>(LLS<span class="string">"\n"</span>, min(tmp, sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> tarjan </tag>
            
            <tag> LCA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ1989 Distance Queries]]></title>
      <url>http://lishangying.github.io/2014/08/01/poj1989-distance-queries/</url>
      <content type="html"><![CDATA[<p>##Description</p>
<p>Farmer John’s cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in “Navigation Nightmare”,followed by a line containing a single integer K, followed by K “distance queries”. Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ’s distance queries as quickly as possible!<br><a id="more"></a></p>
<p>##Input</p>
<ul>
<li>Lines 1..1+M: Same format as “Navigation Nightmare”</li>
<li>Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000</li>
<li>Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.</li>
</ul>
<p>##Output</p>
<ul>
<li>Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance.</li>
</ul>
<p>##Sample Input</p>
<p>7 6<br>1 6 13 E<br>6 3 9 E<br>3 5 7 S<br>4 1 3 N<br>2 4 20 W<br>4 7 2 S<br>3<br>1 6<br>1 4<br>2 6</p>
<p>##Sample Output<br>13<br>3<br>36</p>
<p>##Hint<br>Farms 2 and 6 are 20+3+13=36 apart.</p>
<p>##Source<br><a href="http://poj.org/searchproblem?field=source&amp;key=USACO+2004+February" target="_blank" rel="noopener">USACO 2004 February</a><br><br></p>
<hr>
<ul>
<li>无向树求节点距离：<code>dist(u,v)=dist(root,u)+dist(root,v)-2*dist(root,lca(u,v))</code></li>
<li>tarjan+并查集求LCA。注意可能树不连通。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 40005</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">//Edge Graph</span></span><br><span class="line"><span class="keyword">int</span> head[N], pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, nxt;</span><br><span class="line">&#125; e[M &amp;lt;&amp;lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[pos].v = v;</span><br><span class="line">    e[pos].w = w;</span><br><span class="line">    e[pos].nxt = head[u];</span><br><span class="line">    head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UnionSet</span></span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt;= n; i++)</span><br><span class="line">        p[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uFind</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uMerge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">//y合并到x</span></span><br><span class="line">    <span class="keyword">int</span> fx = uFind(x);</span><br><span class="line">    <span class="keyword">int</span> fy = uFind(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy) p[fy] = fx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tarjan-LCA</span></span><br><span class="line"><span class="keyword">int</span> size,bcnt;</span><br><span class="line"><span class="keyword">int</span> lca[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10005</span>];</span><br><span class="line"><span class="built_in">vector</span>&amp;lt;pr&amp;lt;<span class="keyword">int</span>, <span class="keyword">int</span>&amp;gt; &amp;gt; query[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> assert(<span class="literal">false</span>),<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> solved = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v] = dis[u] + e[i].w;</span><br><span class="line">        solved += dfs(v, u);</span><br><span class="line">        <span class="keyword">if</span> (solved == size) <span class="keyword">return</span> solved;</span><br><span class="line">        uMerge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = bcnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; (<span class="keyword">int</span>) query[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = query[u][i].F;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]==bcnt) &#123;</span><br><span class="line">            solved++;</span><br><span class="line">            lca[query[u][i].S] = uFind(v);</span><br><span class="line">            ans[query[u][i].S] = dis[u] + dis[v] - <span class="number">2</span> * dis[lca[query[u][i].S]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> solved;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clrA(vis, <span class="number">0</span>);</span><br><span class="line">    clrA(dis, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    bcnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        bcnt++;<span class="comment">//从1开始</span></span><br><span class="line">        tot += dfs(findRoot(), <span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (tot &amp;lt; size);<span class="comment">//图可能不连通</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;m)) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        initEdge();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d %c"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w, &amp;amp;c);</span><br><span class="line">            add(u, v, w);</span><br><span class="line">            add(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        initUset();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++)</span><br><span class="line">            query[i].clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= size; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">            query[u].push_back(MP(v, i));</span><br><span class="line">            query[v].push_back(MP(u, i));</span><br><span class="line">        &#125;</span><br><span class="line">        tarjan();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= size; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，还可以转化为RMQ问题求解：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 40005</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">//Edge Graph</span></span><br><span class="line"><span class="keyword">int</span> head[N], pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, nxt;</span><br><span class="line">&#125; e[M &amp;lt;&amp;lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[pos].v = v;</span><br><span class="line">    e[pos].w = w;</span><br><span class="line">    e[pos].nxt = head[u];</span><br><span class="line">    head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//RMQ</span></span><br><span class="line"><span class="keyword">int</span> dpM[<span class="number">20</span>][N&amp;lt;&amp;lt;<span class="number">1</span>|<span class="number">1</span>];<span class="comment">//dpM[i][j]  从j开始的，连续2^i个数字的最值,j从1开始</span></span><br><span class="line"><span class="keyword">int</span> lg2[N&amp;lt;&amp;lt;<span class="number">1</span>|<span class="number">1</span>];<span class="comment">//等价于 (int)lg2(1.0*m)/lg2(2.0) 若空间不足可以这样写</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getLeft(R,L) (R-(L)+1) <span class="comment">//输入右端点和长度，返回左端点</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    lg2[<span class="number">0</span>]=<span class="number">-1</span>;<span class="keyword">int</span> limit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=n;i++) &#123;</span><br><span class="line">        lg2[i]=(i&amp;amp;(i<span class="number">-1</span>))?lg2[i<span class="number">-1</span>]:lg2[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=lg2[n];i++)&#123;</span><br><span class="line">        limit=getLeft(n,<span class="number">1</span>&amp;lt;&amp;lt;i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&amp;lt;=limit;j++)&#123;</span><br><span class="line">            dpM[i][j]=min(dpM[i<span class="number">-1</span>][j],dpM[i<span class="number">-1</span>][j+(<span class="number">1</span>&amp;lt;&amp;lt;i&amp;gt;&amp;gt;<span class="number">1</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRMQ</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=lg2[b-a+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> s1=a;</span><br><span class="line">    <span class="keyword">int</span> s2=getLeft(b,<span class="number">1</span>&amp;lt;&amp;lt;t);</span><br><span class="line">    <span class="comment">//return max(Max[t][s1],Max[t][s2]);</span></span><br><span class="line">    <span class="keyword">return</span> min(dpM[t][s1],dpM[t][s2]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> getLeft</span></span><br><span class="line"><span class="comment">//LCA</span></span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">int</span> H[N];<span class="comment">//节点第一次出现的位置</span></span><br><span class="line"><span class="keyword">int</span> E[N&amp;lt;&amp;lt;<span class="number">1</span>|<span class="number">1</span>];<span class="comment">//欧拉序列2n+1个</span></span><br><span class="line"><span class="keyword">int</span> cnt,depth;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=n;i++)<span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">void getEuler(int u=findRoot(),int fa=-1)&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=dpM[<span class="number">0</span>][H[u]=++cnt]=++depth;</span><br><span class="line">    E[tmp]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+e[i].w;</span><br><span class="line">        getEuler(v,u);</span><br><span class="line">        dpM[<span class="number">0</span>][++cnt]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLCA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">    cnt=depth=<span class="number">0</span>;</span><br><span class="line">    getEuler();</span><br><span class="line">    initRMQ(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(H[u]&amp;gt;H[v])swap(u,v);</span><br><span class="line">    <span class="keyword">return</span> E[getRMQ(H[u],H[v])];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;m)) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        initEdge();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d %c"</span>, &amp;amp;u, &amp;amp;v, &amp;amp;w, &amp;amp;c);</span><br><span class="line">            add(u, v, w);</span><br><span class="line">            add(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        initLCA();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;amp;u,&amp;amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dist[u]+dist[v]<span class="number">-2</span>*dist[getLCA(u,v)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> tarjan </tag>
            
            <tag> LCA </tag>
            
            <tag> RMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ1330 Nearest Common Ancestors]]></title>
      <url>http://lishangying.github.io/2014/08/01/poj1330-nearest-common-ancestors/</url>
      <content type="html"><![CDATA[<p>Time Limit: 1000MS Memory Limit: 10000K<br>Total Submissions: 17734 Accepted: 9405</p>
<p>##Description<br>A rooted tree is a well-known data structure in computer science and engineering. An example is shown below:</p>
<p>In the figure, each node is labeled with an integer from {1, 2,…,16}. Node 8 is the root of the tree. Node x is an ancestor of node y if node x is in the path between the root and node y. For example, node 4 is an ancestor of node 16. Node 10 is also an ancestor of node 16. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7. A node x is called a common ancestor of two different nodes y and z if node x is an ancestor of node y and an ancestor of node z. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7. A node x is called the nearest common ancestor of nodes y and z if x is a common ancestor of y and z and nearest to y and z among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4. Node 4 is nearer to nodes 16 and 7 than node 8 is.<br><a id="more"></a><br>For other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4. In the last example, if y is an ancestor of z, then the nearest common ancestor of y and z is y.</p>
<p>Write a program that finds the nearest common ancestor of two distinct nodes in a tree.</p>
<p>##Input<br>The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, 2&lt;=N&lt;=10,000. The nodes are labeled with integers 1, 2,…, N. Each of the next N -1 lines contains a pair of integers that represent an edge –the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly N - 1 edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed.</p>
<p>##Output<br>Print exactly one line for each test case. The line should contain the integer that is the nearest common ancestor.</p>
<p>##Sample Input</p>
<p>2<br>16<br>1 14<br>8 5<br>10 16<br>5 9<br>4 6<br>8 4<br>4 10<br>1 13<br>6 15<br>10 11<br>6 7<br>10 2<br>16 3<br>8 1<br>16 12<br>16 7<br>5<br>2 3<br>3 4<br>3 1<br>1 5<br>3 5</p>
<p>##Sample Output</p>
<p>4<br>3</p>
<p>##Source<br>Taejon 2002<br><br></p>
<hr>
<p>tarjan+并查集求LCA模板。将u的子儿子v递归合并到u，若y在x的子树上，则根据并查集的性质，公共祖先即为x（father[y]）。若y和x不再同一子树上。则根据dfs回溯的性质，则搜完y之后一定是回溯到x,y的最近公共祖先才能搜到x的，而此时由并查集的性质，回溯的节点刚好就是father[y]。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=~<span class="number">0u</span>&amp;gt;&amp;gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf=~<span class="number">0u</span>ll&amp;gt;&amp;gt;<span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 10005</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">//UnionSet</span></span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt;= n; i++)</span><br><span class="line">        p[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uFind</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == p[x] ? p[x] : p[x] = uFind(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uMerge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">//y合并到x</span></span><br><span class="line">    <span class="keyword">int</span> fx = uFind(x);</span><br><span class="line">    <span class="keyword">int</span> fy = uFind(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy)</span><br><span class="line">        p[fy]=fx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Edge Graph</span></span><br><span class="line"><span class="keyword">int</span> head[N], pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nxt;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[pos].v = v;</span><br><span class="line">    e[pos].nxt = head[u];</span><br><span class="line">    head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span></span>&#123;<span class="comment">//有向图选择入度为0的点，无向图不同节点做根，LCA结果将不同。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> assert(<span class="literal">false</span>),<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//LCA</span></span><br><span class="line"><span class="keyword">int</span> size, root;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> indeg[N];</span><br><span class="line"><span class="built_in">vector</span>&amp;lt;pr&amp;lt;<span class="keyword">int</span>, <span class="keyword">int</span>&amp;gt; &amp;gt; que[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> solved=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        solved+=dfs(v);</span><br><span class="line">        <span class="keyword">if</span>(solved==size)<span class="keyword">return</span> solved;</span><br><span class="line">        uMerge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; (<span class="keyword">int</span>) que[u].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = que[u][i].F;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">            ans[que[u][i].S] = uFind(v);</span><br><span class="line">            solved++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> solved;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clrA(vis,<span class="number">0</span>);</span><br><span class="line">    dfs(findRoot());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;n);</span><br><span class="line">        initEdge();</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        clrA(indeg,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">            add(u, v);</span><br><span class="line">            indeg[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        initUset();</span><br><span class="line">        size = <span class="number">1</span>;<span class="comment">//查询的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=n;i++)que[i].clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= size; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">            que[u].push_back(MP(v, i));</span><br><span class="line">            que[v].push_back(MP(u, i));</span><br><span class="line">        &#125;</span><br><span class="line">        tarjan();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= size; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>LCA还可以用倍增来求：（思想很普通，只是以2进制的步长向上走：dp[i][j]表示节点i向上走2^j步到达的节点。）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> qlr(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M N-1</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> head[N], pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nxt;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[pos].v = v;</span><br><span class="line">    e[pos].nxt = head[u];</span><br><span class="line">    head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clr(head, <span class="number">-1</span>);</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> deep[N];</span><br><span class="line"><span class="built_in">vector</span>&amp;lt;<span class="keyword">int</span>&amp;gt; dp[N];</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i].empty()) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">void getDeep(int u = findRoot()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        deep[v] = deep[u] + <span class="number">1</span>;</span><br><span class="line">        getDeep(v);</span><br><span class="line">    &#125;</span><br><span class="line">    size = max(size, deep[u] + <span class="number">1</span>);<span class="comment">//记录最大深度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLCA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clr(deep, <span class="number">0</span>);</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    getDeep();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>,t=<span class="number">2</span>;t&amp;lt;=size; len++,t&amp;lt;&amp;lt;=<span class="number">1</span>) &#123;<span class="comment">//跳出条件：(t=2^len)&amp;lt;=size</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)dp[i].size() &amp;gt;= len &amp;amp;&amp;amp; (<span class="keyword">int</span>)dp[dp[i][len<span class="number">-1</span>]].size() &amp;gt;= len) &#123;</span><br><span class="line">                dp[i].push_back(dp[dp[i][len<span class="number">-1</span>]][len<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep[u] &amp;lt; deep[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">int</span> d = deep[u] - deep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; d; i++, d &amp;gt;&amp;gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        u = d &amp;amp; <span class="number">1</span> ? dp[u][i] : u;</span><br><span class="line">    &#125;<span class="comment">//以差值二进制形式将u往上走差值</span></span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = min(dp[u].size(),dp[v].size())<span class="number">-1</span>; i &amp;gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[u][i] != dp[v][i]) &#123;</span><br><span class="line">            u = dp[u][i];</span><br><span class="line">            v = dp[v][i];</span><br><span class="line">            i=(<span class="keyword">int</span>)min(dp[u].size(),dp[v].size());<span class="comment">//注意每次都要更新i！！</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    u = dp[u][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &amp;gt;&amp;gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;n);</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        initEdge();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++)</span><br><span class="line">            dp[i].clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">            add(u, v);</span><br><span class="line">            dp[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        initLCA();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getLCA(u, v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>LCA还可以转化为RMQ问题（个人更喜欢此方法，在线，且效率高）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//============================================================================</span></span><br><span class="line"><span class="comment">// Name        : test3.cpp</span></span><br><span class="line"><span class="comment">// Author      : </span></span><br><span class="line"><span class="comment">// Version     :</span></span><br><span class="line"><span class="comment">// Copyright   : Your copyright notice</span></span><br><span class="line"><span class="comment">// Description : Hello World in C++, Ansi-style</span></span><br><span class="line"><span class="comment">//============================================================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;map&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;set&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;stack&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;string&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;vector&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cctype&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cassert&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;utility&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;numeric&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SI(x) set&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VI(x) vector&amp;lt;x&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI(x,y) map&amp;lt;x,y&amp;gt;::iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRI(x) set&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VRI(x) vector&amp;lt;x&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MRI(x,y) map&amp;lt;x,y&amp;gt;::reverse_iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrQ(x) while(!x.empty)x.pop();</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clrA(x,y) memset(x,y,sizeof(x));</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 10005</span></span><br><span class="line"><span class="keyword">int</span> head[N], pos;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nxt;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[pos].v = v;</span><br><span class="line">    e[pos].nxt = head[u];</span><br><span class="line">    head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//RMQ</span></span><br><span class="line"><span class="keyword">int</span> dpM[<span class="number">20</span>][N &amp;lt;&amp;lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> lg2[N &amp;lt;&amp;lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getLeft(R,L) (R-(L)+1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//dp[0][i]表示区间i的值。预先处理出来。</span></span><br><span class="line">    lg2[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> limit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">        lg2[i] = i &amp;amp; (i - <span class="number">1</span>) ? lg2[i - <span class="number">1</span>] : lg2[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= lg2[n]; i++) &#123;</span><br><span class="line">        limit = getLeft(n, <span class="number">1</span> &amp;lt;&amp;lt; i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &amp;lt;= limit; j++) &#123;</span><br><span class="line">            dpM[i][j] = min(dpM[i - <span class="number">1</span>][j], dpM[i - <span class="number">1</span>][j + (<span class="number">1</span> &amp;lt;&amp;lt; (i - <span class="number">1</span>))]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRMQ</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &amp;gt; y) swap(x, y);</span><br><span class="line">    <span class="keyword">int</span> t = lg2[y - x + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(dpM[t][x], dpM[t][getLeft(y, <span class="number">1</span> &amp;lt;&amp;lt; t)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//LCA</span></span><br><span class="line"><span class="keyword">int</span> depth, cnt;</span><br><span class="line"><span class="keyword">int</span> inde[N], H[N], E[N];</span><br><span class="line"><span class="comment">//dp[0][N&amp;lt;&amp;lt;1|1]深度序列（dfs编号），E[N]每个dfs编号对应的节点，H[N]节点第一次出现在dfs编号序列中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!inde[i]) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">void getEuler(int u = findRoot()) &#123;</span><br><span class="line">    <span class="keyword">int</span> dfn = dpM[<span class="number">0</span>][H[u] = ++cnt] = ++depth;</span><br><span class="line">    E[dfn] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        getEuler(v);</span><br><span class="line">        dpM[<span class="number">0</span>][++cnt] = dfn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLCA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    depth = cnt = <span class="number">0</span>;</span><br><span class="line">    getEuler();</span><br><span class="line">    initRMQ(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (H[u] &amp;gt; H[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">return</span> E[getRMQ(H[u], H[v])];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;n);m=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        initEdge();</span><br><span class="line">        <span class="built_in">memset</span>(inde, <span class="number">0</span>, <span class="keyword">sizeof</span>(inde));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">            add(u, v);</span><br><span class="line">            inde[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        initLCA();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getLCA(u, v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> tarjan </tag>
            
            <tag> LCA </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2014 Multi-University Training Contest 4]]></title>
      <url>http://lishangying.github.io/2014/07/31/2014-multi-university-training-contest-4/</url>
      <content type="html"><![CDATA[<p>心情就像倒数第二楼那样。</p>
<p>CLJ，我也保证不打死你……</p>
<p>PS:最后一楼朱大神还暴露了。</p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 只言片语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU4005 The war]]></title>
      <url>http://lishangying.github.io/2014/07/30/hdu4005-the-war/</url>
      <content type="html"><![CDATA[<p><strong><span style="font-family: Arial; font-size: 12px; font-weight: bold; color: green;">Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65768/65768 K (Java/Others)<br>Total Submission(s): 1992    Accepted Submission(s): 440<br></span></strong></p>
<div class="panel_title" align="left">Problem Description</div><br><div class="panel_content">In the war, the intelligence about the enemy is very important. Now, our troop has mastered the situation of the enemy’s war zones, and known that these war zones can communicate to each other directly or indirectly through the network. We also know the enemy is going to build a new communication line to strengthen their communication network. Our task is to destroy their communication network, so that some of their war zones can’t communicate. Each line has its “cost of destroy”. If we want to destroy a line, we must spend the “cost of destroy” of this line. We want to finish this task using the least cost, but our enemy is very clever. Now, we know the network they have already built, but we know nothing about the new line which our enemy is going to build. In this condition, your task is to find the minimum cost that no matter where our enemy builds the new line, you can destroy it using the fixed money. Please give the minimum cost. For efficiency, we can only destroy one communication line.</div><br><a id="more"></a><br><div class="panel_bottom"></div><br>&nbsp;<br><div class="panel_title" align="left">Input</div><br><div class="panel_content">The input contains several cases. For each cases, the first line contains two positive integers n, m (1&lt;=n&lt;=10000, 0&lt;=m&lt;=100000) standing for the number of the enemy’s war zones (numbered from 1 to n), and the number of lines that our enemy has already build. Then m lines follow. For each line there are three positive integer a, b, c (1&lt;=a, b&lt;=n, 1&lt;=c&lt;=100000), meaning between war zone A and war zone B there is a communication line with the “cost of destroy “ c.</div><br><div class="panel_bottom"></div><br>&nbsp;<br><div class="panel_title" align="left">Output</div><br><div class="panel_content">For each case, if the task can be finished output the minimum cost, or output ‐1.</div><br><div class="panel_bottom"></div><br>&nbsp;<br><div class="panel_title" align="left">Sample Input</div><br><div class="panel_content"><br><div style="font-family: Courier New,Courier,monospace;">3 2 1 2 1 2 3 2 4 3 1 2 1 1 3 2 1 4 3</div><br></div><br><div class="panel_bottom"></div><br>&nbsp;<br><div class="panel_title" align="left">Sample Output</div><br><div class="panel_content"><br><div style="font-family: Courier New,Courier,monospace;">-1 3<br><div style="font-family: Times New Roman; font-size: 14px; background-color: f4fbff; border: #B7CBFF 1px dashed; padding: 6px;"><br><div style="font-family: Arial; font-weight: bold; color: #7ca9ed; border-bottom: #B7CBFF 1px dashed;"><em>Hint</em></div><br>For the second sample input: our enemy may build line 2 to 3, 2 to 4, 3 to 4. If they build line 2 to 3, we will destroy line 1 to 4, cost 3. If they build line 2 to 4, we will destroy line 1 to 3, cost 2. If they build line 3 to 4, we will destroy line 1 to 2, cost 1. So, if we want to make sure that we can destroy successfully, the minimum cost is 3.<br><br></div><br>&nbsp;<br><br></div><br></div><br><div class="panel_bottom"></div><br>&nbsp;<br><div class="panel_title" align="left">Source</div><br><div class="panel_content"><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=The%2036th%20ACM/ICPC%20Asia%20Regional%20Dalian%20Site%20%E2%80%94%E2%80%94%20Online%20Contest&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener"> The 36th ACM/ICPC Asia Regional Dalian Site —— Online Contest </a></div><br><div class="panel_content"></div><br><div class="panel_content"></div><br><div class="panel_content">求无向图边双连通分量缩点，然后DP求第二长边。</div><br><div class="panel_content"><br><pre class="EnlighterJSRAW" data-enlighter-language="null">//#pragma comment(linker, “/STACK:1024000000,1024000000”)//C++加栈<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<br>#include<map><br>#include<br>#include<br>#include<br>using namespace std;<br>#if defined (_WIN32) || defined (<strong>WIN32) || defined (WIN32) || defined (</strong>WIN32<strong>)<br>#define LL </strong>int64<br>#define LLS “%” “I” “6” “4” “d”<br>#define LLU “%” “I” “6” “4” “u”<br>#define LL_MAX _I64_MAX<br><br>#else<br>#define LL long long<br>#define LLS “%” “l” “l” “d”<br>#define LLU “%” “l” “l” “u”<br>#define LL_MAX _I64_MAX<br>#endif<br>#define N 10005<br>#define M 100005<br>int n, m;<br>const int inf = ~0u &gt;&gt; 1;<br>const LL lnf = ~0ull &gt;&gt; 1;<br>struct edge {<br>    int v, w, nxt;<br>    bool mark;<br>} e[M &lt;&lt; 1];<br>struct bridge {<br>    int u, v, w;<br>    bridge(int u, int v, int w) {<br>        this-&gt;u = u;<br>        this-&gt;w = w;<br>        this-&gt;v = v;<br>    }<br>};<br>int pos, head[N];<br>int top, stk[N];<br>int pre[N], dfs_clock, belong[N], bcnt;<br>vector brg;<br>void InitEdge() {<br>    memset(head, -1, sizeof(head));<br>    pos = 0;<br>}<br>void add(int u, int v, int w) {<br>    e[pos].v = v;<br>    e[pos].w = w;<br>    e[pos].nxt = head[u];<br>    head[u] = pos++;<br>}<br>int dfs(int u,int fa) {<br>    int lowu = pre[u] = ++dfs_clock;<br>    stk[top++] = u;<br>    bool vis=true;<br>    for (int i = head[u]; ~i; i = e[i].nxt) {<br>        int v = e[i].v;<br>        if(v==fa &amp;&amp; vis){<br>            vis=false;//重边<br>            continue;<br>        }<br>        if (!pre[v]) {<br>            int lowv = dfs(v,u);<br>            lowu = min(lowu, lowv);<br>            if (lowv &gt; pre[u]) { //u-v为桥<br>                brg.push_back(bridge(u, v, e[i].w));<br>            }<br>        } else lowu = min(lowu, pre[v]);<br>    }<br>    if (pre[u] == lowu) {<br>        bcnt++;<br>        do {<br>            belong[stk[–top]] = bcnt;<br>        } while (stk[top] != u);<br>    }<br>    return lowu;<br>}<br>void tarjan() {<br>    top = bcnt = dfs_clock = 0;<br>    memset(pre, 0, sizeof(pre));<br>    memset(belong, 0, sizeof(belong));<br>    brg.clear();<br>    for (int i = 1; i &lt;= n; i++) {<br>        if (!pre[i])dfs(i,-1);<br>    }<br>}<br>void rebuild() { //根据桥来缩点重构图<br>    InitEdge();<br>    for (int i = 0; i &lt; (int) brg.size(); i++) {<br>        int u = belong[brg[i].u];<br>        int v = belong[brg[i].v];<br>        int w = brg[i].w;<br>        add(u, v, w);<br>        add(v, u, w);<br>    }<br>}<br>int res;<br>int DP(int u, int fa) {<br>    int Min = inf;<br>    for (int i = head[u]; ~i; i = e[i].nxt) {<br>        int v = e[i].v;<br>        if (v == fa)continue;<br>        int w = DP(v, u);<br>        w = min(w, e[i].w);<br>        if (Min &gt; w) {<br>            res = min(res, Min);<br>            Min = w;<br>        } else res = min(res, w);<br>    }<br>    return Min;<br>}<br>int main() {<br>    while (~scanf(“%d%d”, &amp;n, &amp;m)) {<br>        int u, v, w;<br>        InitEdge();<br>        for (int i = 0; i &lt; m; i++) {<br>            scanf(“%d%d%d”, &amp;u, &amp;v, &amp;w);<br>            add(u, v, w);<br>            add(v, u, w);<br>        }<br>        tarjan();<br>        rebuild();<br>        bridge minbrg(-1, -1, inf);<br>        for (int i = 0; i &lt; (int) brg.size(); i++) {<br>            if (brg[i].w &lt; minbrg.w) {<br>                minbrg = brg[i];<br>            }<br>        }<br>        res = inf;<br>        DP(belong[minbrg.u], belong[minbrg.v]);<br>        DP(belong[minbrg.v], belong[minbrg.u]);<br>        if(res==inf)res=-1;<br>        printf(“%d\n”, res);<br>    }<br>}<br></map></pre><br></div>]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> tarjan </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU4612 Warm up]]></title>
      <url>http://lishangying.github.io/2014/07/30/hdu4612-warm-up/</url>
      <content type="html"><![CDATA[<p><strong><span style="font-family: Arial; font-size: 12px; font-weight: bold; color: green;">Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65535/65535 K (Java/Others)<br>Total Submission(s): 3532    Accepted Submission(s): 813</span></strong></p>
<p><div class="panel_title" align="left">Problem Description</div></p>
<p><div class="panel_content">　 　N planets are connected by M bidirectional channels that allow instant transportation. It’s always possible to travel between any two planets through these channels.<br>If we can isolate some planets from others by breaking only one channel , the channel is called a bridge of the transportation system.<br>People don’t like to be isolated. So they ask what’s the minimal number of bridges they can have if they decide to build a new channel.<br>Note that there could be more than one channel between two planets.</div><br><a id="more"></a></p>
<p><div class="panel_title" align="left">Input</div></p>
<p><div class="panel_content">　　The input contains multiple cases.<br>Each case starts with two positive integers N and M , indicating the number of planets and the number of channels.<br>(2&lt;=N&lt;=200000, 1&lt;=M&lt;=1000000)<br>Next M lines each contains two positive integers A and B, indicating a channel between planet A and B in the system. Planets are numbered by 1..N.<br>A line with two integers ‘0’ terminates the input.</div></p>
<p><div class="panel_title" align="left">Output</div></p>
<p><div class="panel_content">　　For each case, output the minimal number of bridges after building a new channel in a line.</div></p>
<p><div class="panel_title" align="left">Sample Input</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">4 4 1 2 1 3 1 4 2 3 0 0</div><br></p>
<p><div class="panel_title" align="left">Sample Output</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">0</div><br></p>
<p><div class="panel_title" align="left">Source</div></p>
<p><div class="panel_content"><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2013%20Multi-University%20Training%20Contest%202&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener"> 2013 Multi-University Training Contest 2 </a></div><br><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)<span class="comment">//C++加栈</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (_WIN32) || defined (__WIN32) || defined (WIN32) || defined (__WIN32__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"I"</span> <span class="meta-string">"6"</span> <span class="meta-string">"4"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLS <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLU <span class="meta-string">"%"</span> <span class="meta-string">"l"</span> <span class="meta-string">"l"</span> <span class="meta-string">"u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL_MAX _I64_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000005</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ~<span class="number">0u</span> &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> LL lnf = ~<span class="number">0u</span>ll &amp;gt;&amp;gt; <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> v, nxt;</span><br><span class="line">&#125; e[M &amp;lt;&amp;lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bridge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	bridge(<span class="keyword">int</span> u, <span class="keyword">int</span> v) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&amp;gt;u = u;</span><br><span class="line">		<span class="keyword">this</span>-&amp;gt;v = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> pos, head[N];</span><br><span class="line"><span class="keyword">int</span> top, stk[N];</span><br><span class="line"><span class="keyword">int</span> pre[N], dfs_clock, belong[N], bcnt;</span><br><span class="line"><span class="built_in">vector</span> brg;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">	pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	e[pos].v = v;</span><br><span class="line">	e[pos].nxt = head[u];</span><br><span class="line">	head[u] = pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lowu = pre[u] = ++dfs_clock;</span><br><span class="line">	stk[top++] = u;</span><br><span class="line">	<span class="keyword">bool</span> vis = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].v;</span><br><span class="line">		<span class="keyword">if</span> (v == fa &amp;amp;&amp;amp; vis) &#123;</span><br><span class="line">			vis = <span class="literal">false</span>; <span class="comment">//u-v的反向边一定是v-u邻接表里的第一条边。</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!pre[v]) &#123;</span><br><span class="line">			<span class="keyword">int</span> lowv = dfs(v, u);</span><br><span class="line">			lowu = min(lowu, lowv);</span><br><span class="line">			<span class="keyword">if</span> (lowv &amp;gt; pre[u]) &#123; <span class="comment">//u-v为桥</span></span><br><span class="line">				brg.push_back(bridge(u, v));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> lowu = min(lowu, pre[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (pre[u] == lowu) &#123;</span><br><span class="line">		bcnt++;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			belong[stk[--top]] = bcnt;</span><br><span class="line">		&#125; <span class="keyword">while</span> (stk[top] != u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> lowu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	top = bcnt = dfs_clock = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">	<span class="built_in">memset</span>(belong, <span class="number">0</span>, <span class="keyword">sizeof</span>(belong));</span><br><span class="line">	brg.clear();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!pre[i]) dfs(i, <span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">()</span> </span>&#123; <span class="comment">//根据桥来缩点重构图</span></span><br><span class="line">	InitEdge();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; (<span class="keyword">int</span>) brg.size(); i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = belong[brg[i].u];</span><br><span class="line">		<span class="keyword">int</span> v = belong[brg[i].v];</span><br><span class="line">		add(u, v);</span><br><span class="line">		add(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> diameter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findR</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> h1 = <span class="number">0</span>, h2 = <span class="number">0</span>; <span class="comment">// 以u为根，h1最高的儿子，h2次高儿子。放在dfs里面两者不会重合。</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].v;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">int</span> h = findR(v, u) + <span class="number">1</span>; <span class="comment">//若路径有权重，则把1改为u-v的权重</span></span><br><span class="line">		<span class="keyword">if</span> (h &amp;gt; h1) h2 = h1, h1 = h;</span><br><span class="line">		<span class="keyword">else</span> h2 = max(h, h2);</span><br><span class="line">	&#125;</span><br><span class="line">	diameter = max(diameter, h1 + h2);</span><br><span class="line">	<span class="keyword">return</span> h1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tree_diameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	diameter = <span class="number">0</span>;</span><br><span class="line">	findR(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;n, &amp;amp;m), n || m) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		InitEdge();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; m; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;amp;u, &amp;amp;v);</span><br><span class="line">			add(u, v);</span><br><span class="line">			add(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">		tarjan();</span><br><span class="line">		rebuild();</span><br><span class="line">		tree_diameter();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bcnt - diameter - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> tarjan </tag>
            
            <tag> 树的直径 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU4888 Redraw Beautiful Drawings ]]></title>
      <url>http://lishangying.github.io/2014/07/29/hdu4888-redraw-beautiful-drawings/</url>
      <content type="html"><![CDATA[<p><div class="panel_title" align="left">Problem Description</div></p>
<p><div class="panel_content">Alice and Bob are playing together. Alice is crazy about art and she has visited many museums around the world. She has a good memory and she can remember all drawings she has seen.Today Alice designs a game using these drawings in her memory. First, she matches K+1 colors appears in the picture to K+1 different integers(from 0 to K). After that, she slices the drawing into grids and there are N rows and M columns. Each grid has an integer on it(from 0 to K) representing the color on the corresponding position in the original drawing. Alice wants to share the wonderful drawings with Bob and she tells Bob the size of the drawing, the number of different colors, and the sum of integers on each row and each column. Bob has to redraw the drawing with Alice’s information. Unfortunately, somtimes, the information Alice offers is wrong because of Alice’s poor math. And sometimes, Bob can work out multiple different drawings using the information Alice provides. Bob gets confused and he needs your help. You have to tell Bob if Alice’s information is right and if her information is right you should also tell Bob whether he can get a unique drawing.</div></p>
<p><div class="panel_bottom"></div><br><a id="more"></a><br>&nbsp;</p>
<p><div class="panel_title" align="left">Input</div></p>
<p><div class="panel_content">The input contains mutiple testcases.For each testcase, the first line contains three integers N(1 ≤ N ≤ 400) , M(1 ≤ M ≤ 400) and K(1 ≤ K ≤ 40).<br>N integers are given in the second line representing the sum of N rows.<br>M integers are given in the third line representing the sum of M columns.The input is terminated by EOF.</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Output</div></p>
<p><div class="panel_content">For each testcase, if there is no solution for Bob, output “Impossible” in one line(without the quotation mark); if there is only one solution for Bob, output “Unique” in one line(without the quotation mark) and output an N * M matrix in the following N lines representing Bob’s unique solution; if there are many ways for Bob to redraw the drawing, output “Not Unique” in one line(without the quotation mark).</div></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Input</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">2 2 4 4 2 4 2 4 2 2 2 2 5 0 5 4 1 4 3 9 1 2 3 3</div><br></p>
<p><div class="panel_bottom"></div><br>&nbsp;</p>
<p><div class="panel_title" align="left">Sample Output</div></p>
<p><div class="panel_content"></div></p>
<p><div style="font-family: Courier New,Courier,monospace;">Not Unique Impossible Unique 1 2 3 3</div><br><br>&nbsp;</p>
<hr>
<p>第一步，考虑如何求是否有解。使用网络流求解，每一行和每一列分别对应一个点，加上源点和汇点一共有N+M+2个点。有三类边：</p>
<ol>
<li>源点 -&gt; 每一行对应的点，流量限制为该行的和</li>
<li>每一行对应的点 -&gt; 每一列对应的点，流量限制为 K</li>
<li>每一列对应的点 -&gt; 汇点，流量限制为该列的和<br>&nbsp;</li>
</ol>
<p>对上图做最大流，若源点出发的边和到达汇点的边全都满流，则有解，否则无解。若要求构造方案，则 (i,j) 对应的整数就是行 i–&gt; 列 j 的流量。</p>
<p>第二步，考虑解是否唯一。显然，解唯一的充分必要条件是完成最大流后的残余网络没有长度大于 2 的环。所以，判断解的唯一性可使用dfs，注意遍历的时候不可以在走完一条边后马上走其反向边，加此限制检查是否有环即可判断解是否唯一。</p>
<p>至此，全题已解决。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;iostream&amp;gt; </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;cstring&amp;gt; </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;cstdio&amp;gt; </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;queue&amp;gt; </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;cstdlib&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>,maxm=maxn*maxn;</span><br><span class="line"><span class="keyword">int</span> next[maxm*<span class="number">2</span>],num[maxm*<span class="number">2</span>],r[maxm*<span class="number">2</span>],a[maxn*<span class="number">2</span>],row_sum[maxn],col_sum[maxn],n,m,K,tt,T,d[maxn*<span class="number">2</span>],st[maxn*<span class="number">2</span>],cod[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> h[maxn*<span class="number">2</span>],vh[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> don[maxm*<span class="number">2</span>],in[maxn*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> rr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	next[++tt]=a[x];num[tt]=y;r[tt]=rr;a[x]=tt;</span><br><span class="line">	next[++tt]=a[y];num[tt]=x;r[tt]=<span class="number">0</span>;a[y]=tt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tt=<span class="number">1</span>;T=n+m+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;=T;i++) a[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=n;i++) insert(<span class="number">0</span>,i,row_sum[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=m;i++) insert(i+n,T,col_sum[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&amp;lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			insert(i,j+n,K);</span><br><span class="line">			cod[i][j]=tt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x==T) <span class="keyword">return</span> y;</span><br><span class="line">	<span class="keyword">int</span> sig=st[x],minh=T+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (r[st[x]])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (h[num[st[x]]]+<span class="number">1</span>==h[x])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> k=dfs(num[st[x]],min(y,r[st[x]]));</span><br><span class="line">				<span class="keyword">if</span> (k)</span><br><span class="line">				&#123;</span><br><span class="line">					r[st[x]]-=k;</span><br><span class="line">					r[st[x]^<span class="number">1</span>]+=k;</span><br><span class="line">					<span class="keyword">return</span> k;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			minh=min(minh,h[num[st[x]]]+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (h[<span class="number">0</span>]&amp;gt;T) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		st[x]=next[st[x]];</span><br><span class="line">		<span class="keyword">if</span> (st[x]==<span class="number">0</span>) st[x]=a[x];</span><br><span class="line">	&#125;<span class="keyword">while</span> (sig!=st[x]);</span><br><span class="line">	<span class="keyword">if</span> (vh[h[x]]--==<span class="number">0</span>) h[<span class="number">0</span>]=T+<span class="number">1</span>;</span><br><span class="line">	vh[h[x]=minh]++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;=T;i++) h[i]=vh[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;=T;i++) st[i]=a[i];</span><br><span class="line">	vh[<span class="number">0</span>]=T+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (h[<span class="number">0</span>]&amp;lt;=T) ret+=dfs(<span class="number">0</span>,K+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*bool find_circle()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	deque  q;</span></span><br><span class="line"><span class="comment">	for (int i=0;i&amp;lt;=T;i++) d[i]=0;</span></span><br><span class="line"><span class="comment">	for (int i=0;i&amp;lt;=T;i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		for (int p=a[i];p;p=next[p])</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			if (r[p]) d[i]++;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		if (d[i]==0) q.push_back(i);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	int cnt=T+1;</span></span><br><span class="line"><span class="comment">	while (!q.empty())</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		int x=q.front();</span></span><br><span class="line"><span class="comment">		cnt--;</span></span><br><span class="line"><span class="comment">		q.pop_front();</span></span><br><span class="line"><span class="comment">		for (int p=a[x];p;p=next[p])</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			if (r[p^1]) </span></span><br><span class="line"><span class="comment">			&#123;</span></span><br><span class="line"><span class="comment">				d[num[p]]--;</span></span><br><span class="line"><span class="comment">				if (d[num[p]]==0) q.push_back(num[p]);</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	return cnt;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (don[ed]) </span><br><span class="line">		<span class="keyword">return</span> in[x];</span><br><span class="line">	don[ed]=<span class="literal">true</span>;</span><br><span class="line">	in[x]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> p=a[x];p;p=next[p])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (r[p] &amp;amp;&amp;amp; (ed^p)!=<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">if</span> (visit(num[p],p)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	in[x]=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find_circle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;=T;i++) in[i]=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=tt;i++) don[i]=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> col=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&amp;lt;=tt;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (r[i] &amp;amp;&amp;amp; !don[i])</span><br><span class="line">		&#123;</span><br><span class="line">			in[num[i^<span class="number">1</span>]]=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span> (visit(num[i],i)) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">			in[num[i^<span class="number">1</span>]]=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_scheme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Unique\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,r[cod[i][<span class="number">1</span>]]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&amp;lt;=m;j++) <span class="built_in">printf</span>(<span class="string">" %d"</span>,r[cod[i][j]]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;amp;n,&amp;amp;m,&amp;amp;K)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;amp;row_sum[i]);</span><br><span class="line">			tmp+=row_sum[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> sum=tmp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&amp;lt;=m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;amp;col_sum[i]);</span><br><span class="line">			tmp-=col_sum[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tmp) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		construct();</span><br><span class="line">		<span class="keyword">if</span> (max_flow()&amp;lt;sum)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (find_circle())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Not Unique\n"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> print_scheme();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
